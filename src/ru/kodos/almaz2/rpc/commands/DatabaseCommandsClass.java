// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: database_commands.proto

package ru.kodos.almaz2.rpc.commands;

public final class DatabaseCommandsClass {
    private DatabaseCommandsClass() {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistry registry) {
    }

    public interface ControlObjectStateQueryOrBuilder
            extends com.google.protobuf.MessageOrBuilder {

        // optional uint32 control_object_id = 1;

        /**
         * <code>optional uint32 control_object_id = 1;</code>
         */
        boolean hasControlObjectId();

        /**
         * <code>optional uint32 control_object_id = 1;</code>
         */
        int getControlObjectId();

        // optional uint32 from_time = 2;

        /**
         * <code>optional uint32 from_time = 2;</code>
         */
        boolean hasFromTime();

        /**
         * <code>optional uint32 from_time = 2;</code>
         */
        int getFromTime();

        // optional uint32 to_time = 3;

        /**
         * <code>optional uint32 to_time = 3;</code>
         */
        boolean hasToTime();

        /**
         * <code>optional uint32 to_time = 3;</code>
         */
        int getToTime();
    }

    /**
     * Protobuf type {@code almaz2.rpc.commands.ControlObjectStateQuery}
     */
    public static final class ControlObjectStateQuery extends
            com.google.protobuf.GeneratedMessage
            implements ControlObjectStateQueryOrBuilder {
        // Use ControlObjectStateQuery.newBuilder() to construct.
        private ControlObjectStateQuery(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private ControlObjectStateQuery(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final ControlObjectStateQuery defaultInstance;

        public static ControlObjectStateQuery getDefaultInstance() {
            return defaultInstance;
        }

        public ControlObjectStateQuery getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private ControlObjectStateQuery(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            bitField0_ |= 0x00000001;
                            controlObjectId_ = input.readUInt32();
                            break;
                        }
                        case 16: {
                            bitField0_ |= 0x00000002;
                            fromTime_ = input.readUInt32();
                            break;
                        }
                        case 24: {
                            bitField0_ |= 0x00000004;
                            toTime_ = input.readUInt32();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_ControlObjectStateQuery_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_ControlObjectStateQuery_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery.class, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery.Builder.class);
        }

        public static com.google.protobuf.Parser<ControlObjectStateQuery> PARSER =
                new com.google.protobuf.AbstractParser<ControlObjectStateQuery>() {
                    public ControlObjectStateQuery parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new ControlObjectStateQuery(input, extensionRegistry);
                    }
                };

        @java.lang.Override
        public com.google.protobuf.Parser<ControlObjectStateQuery> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        // optional uint32 control_object_id = 1;
        public static final int CONTROL_OBJECT_ID_FIELD_NUMBER = 1;
        private int controlObjectId_;

        /**
         * <code>optional uint32 control_object_id = 1;</code>
         */
        public boolean hasControlObjectId() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>optional uint32 control_object_id = 1;</code>
         */
        public int getControlObjectId() {
            return controlObjectId_;
        }

        // optional uint32 from_time = 2;
        public static final int FROM_TIME_FIELD_NUMBER = 2;
        private int fromTime_;

        /**
         * <code>optional uint32 from_time = 2;</code>
         */
        public boolean hasFromTime() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional uint32 from_time = 2;</code>
         */
        public int getFromTime() {
            return fromTime_;
        }

        // optional uint32 to_time = 3;
        public static final int TO_TIME_FIELD_NUMBER = 3;
        private int toTime_;

        /**
         * <code>optional uint32 to_time = 3;</code>
         */
        public boolean hasToTime() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>optional uint32 to_time = 3;</code>
         */
        public int getToTime() {
            return toTime_;
        }

        private void initFields() {
            controlObjectId_ = 0;
            fromTime_ = 0;
            toTime_ = 0;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != -1) return isInitialized == 1;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeUInt32(1, controlObjectId_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeUInt32(2, fromTime_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeUInt32(3, toTime_);
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(1, controlObjectId_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(2, fromTime_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(3, toTime_);
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        protected java.lang.Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code almaz2.rpc.commands.ControlObjectStateQuery}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder>
                implements ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQueryOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_ControlObjectStateQuery_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_ControlObjectStateQuery_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery.class, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery.Builder.class);
            }

            // Construct using ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                controlObjectId_ = 0;
                bitField0_ = (bitField0_ & ~0x00000001);
                fromTime_ = 0;
                bitField0_ = (bitField0_ & ~0x00000002);
                toTime_ = 0;
                bitField0_ = (bitField0_ & ~0x00000004);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_ControlObjectStateQuery_descriptor;
            }

            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery getDefaultInstanceForType() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery.getDefaultInstance();
            }

            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery build() {
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery buildPartial() {
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery result = new ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.controlObjectId_ = controlObjectId_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.fromTime_ = fromTime_;
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                result.toTime_ = toTime_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery) {
                    return mergeFrom((ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery other) {
                if (other == ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery.getDefaultInstance())
                    return this;
                if (other.hasControlObjectId()) {
                    setControlObjectId(other.getControlObjectId());
                }
                if (other.hasFromTime()) {
                    setFromTime(other.getFromTime());
                }
                if (other.hasToTime()) {
                    setToTime(other.getToTime());
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            // optional uint32 control_object_id = 1;
            private int controlObjectId_;

            /**
             * <code>optional uint32 control_object_id = 1;</code>
             */
            public boolean hasControlObjectId() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>optional uint32 control_object_id = 1;</code>
             */
            public int getControlObjectId() {
                return controlObjectId_;
            }

            /**
             * <code>optional uint32 control_object_id = 1;</code>
             */
            public Builder setControlObjectId(int value) {
                bitField0_ |= 0x00000001;
                controlObjectId_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional uint32 control_object_id = 1;</code>
             */
            public Builder clearControlObjectId() {
                bitField0_ = (bitField0_ & ~0x00000001);
                controlObjectId_ = 0;
                onChanged();
                return this;
            }

            // optional uint32 from_time = 2;
            private int fromTime_;

            /**
             * <code>optional uint32 from_time = 2;</code>
             */
            public boolean hasFromTime() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>optional uint32 from_time = 2;</code>
             */
            public int getFromTime() {
                return fromTime_;
            }

            /**
             * <code>optional uint32 from_time = 2;</code>
             */
            public Builder setFromTime(int value) {
                bitField0_ |= 0x00000002;
                fromTime_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional uint32 from_time = 2;</code>
             */
            public Builder clearFromTime() {
                bitField0_ = (bitField0_ & ~0x00000002);
                fromTime_ = 0;
                onChanged();
                return this;
            }

            // optional uint32 to_time = 3;
            private int toTime_;

            /**
             * <code>optional uint32 to_time = 3;</code>
             */
            public boolean hasToTime() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }

            /**
             * <code>optional uint32 to_time = 3;</code>
             */
            public int getToTime() {
                return toTime_;
            }

            /**
             * <code>optional uint32 to_time = 3;</code>
             */
            public Builder setToTime(int value) {
                bitField0_ |= 0x00000004;
                toTime_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional uint32 to_time = 3;</code>
             */
            public Builder clearToTime() {
                bitField0_ = (bitField0_ & ~0x00000004);
                toTime_ = 0;
                onChanged();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.ControlObjectStateQuery)
        }

        static {
            defaultInstance = new ControlObjectStateQuery(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.ControlObjectStateQuery)
    }

    public interface ControlObjectStateResultOrBuilder
            extends com.google.protobuf.MessageOrBuilder {

        // optional uint32 current_block = 1;

        /**
         * <code>optional uint32 current_block = 1;</code>
         */
        boolean hasCurrentBlock();

        /**
         * <code>optional uint32 current_block = 1;</code>
         */
        int getCurrentBlock();

        // optional uint32 total_blocks = 2;

        /**
         * <code>optional uint32 total_blocks = 2;</code>
         */
        boolean hasTotalBlocks();

        /**
         * <code>optional uint32 total_blocks = 2;</code>
         */
        int getTotalBlocks();

        // repeated .almaz2.domain_objects.ControlObjectState control_object_states = 3;

        /**
         * <code>repeated .almaz2.domain_objects.ControlObjectState control_object_states = 3;</code>
         */
        java.util.List<ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState>
        getControlObjectStatesList();

        /**
         * <code>repeated .almaz2.domain_objects.ControlObjectState control_object_states = 3;</code>
         */
        ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState getControlObjectStates(int index);

        /**
         * <code>repeated .almaz2.domain_objects.ControlObjectState control_object_states = 3;</code>
         */
        int getControlObjectStatesCount();

        /**
         * <code>repeated .almaz2.domain_objects.ControlObjectState control_object_states = 3;</code>
         */
        java.util.List<? extends ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectStateOrBuilder>
        getControlObjectStatesOrBuilderList();

        /**
         * <code>repeated .almaz2.domain_objects.ControlObjectState control_object_states = 3;</code>
         */
        ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectStateOrBuilder getControlObjectStatesOrBuilder(
                int index);
    }

    /**
     * Protobuf type {@code almaz2.rpc.commands.ControlObjectStateResult}
     */
    public static final class ControlObjectStateResult extends
            com.google.protobuf.GeneratedMessage
            implements ControlObjectStateResultOrBuilder {
        // Use ControlObjectStateResult.newBuilder() to construct.
        private ControlObjectStateResult(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private ControlObjectStateResult(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final ControlObjectStateResult defaultInstance;

        public static ControlObjectStateResult getDefaultInstance() {
            return defaultInstance;
        }

        public ControlObjectStateResult getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private ControlObjectStateResult(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            bitField0_ |= 0x00000001;
                            currentBlock_ = input.readUInt32();
                            break;
                        }
                        case 16: {
                            bitField0_ |= 0x00000002;
                            totalBlocks_ = input.readUInt32();
                            break;
                        }
                        case 26: {
                            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                                controlObjectStates_ = new java.util.ArrayList<ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState>();
                                mutable_bitField0_ |= 0x00000004;
                            }
                            controlObjectStates_.add(input.readMessage(ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState.PARSER, extensionRegistry));
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                    controlObjectStates_ = java.util.Collections.unmodifiableList(controlObjectStates_);
                }
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_ControlObjectStateResult_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_ControlObjectStateResult_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult.class, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult.Builder.class);
        }

        public static com.google.protobuf.Parser<ControlObjectStateResult> PARSER =
                new com.google.protobuf.AbstractParser<ControlObjectStateResult>() {
                    public ControlObjectStateResult parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new ControlObjectStateResult(input, extensionRegistry);
                    }
                };

        @java.lang.Override
        public com.google.protobuf.Parser<ControlObjectStateResult> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        // optional uint32 current_block = 1;
        public static final int CURRENT_BLOCK_FIELD_NUMBER = 1;
        private int currentBlock_;

        /**
         * <code>optional uint32 current_block = 1;</code>
         */
        public boolean hasCurrentBlock() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>optional uint32 current_block = 1;</code>
         */
        public int getCurrentBlock() {
            return currentBlock_;
        }

        // optional uint32 total_blocks = 2;
        public static final int TOTAL_BLOCKS_FIELD_NUMBER = 2;
        private int totalBlocks_;

        /**
         * <code>optional uint32 total_blocks = 2;</code>
         */
        public boolean hasTotalBlocks() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional uint32 total_blocks = 2;</code>
         */
        public int getTotalBlocks() {
            return totalBlocks_;
        }

        // repeated .almaz2.domain_objects.ControlObjectState control_object_states = 3;
        public static final int CONTROL_OBJECT_STATES_FIELD_NUMBER = 3;
        private java.util.List<ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState> controlObjectStates_;

        /**
         * <code>repeated .almaz2.domain_objects.ControlObjectState control_object_states = 3;</code>
         */
        public java.util.List<ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState> getControlObjectStatesList() {
            return controlObjectStates_;
        }

        /**
         * <code>repeated .almaz2.domain_objects.ControlObjectState control_object_states = 3;</code>
         */
        public java.util.List<? extends ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectStateOrBuilder>
        getControlObjectStatesOrBuilderList() {
            return controlObjectStates_;
        }

        /**
         * <code>repeated .almaz2.domain_objects.ControlObjectState control_object_states = 3;</code>
         */
        public int getControlObjectStatesCount() {
            return controlObjectStates_.size();
        }

        /**
         * <code>repeated .almaz2.domain_objects.ControlObjectState control_object_states = 3;</code>
         */
        public ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState getControlObjectStates(int index) {
            return controlObjectStates_.get(index);
        }

        /**
         * <code>repeated .almaz2.domain_objects.ControlObjectState control_object_states = 3;</code>
         */
        public ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectStateOrBuilder getControlObjectStatesOrBuilder(
                int index) {
            return controlObjectStates_.get(index);
        }

        private void initFields() {
            currentBlock_ = 0;
            totalBlocks_ = 0;
            controlObjectStates_ = java.util.Collections.emptyList();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != -1) return isInitialized == 1;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeUInt32(1, currentBlock_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeUInt32(2, totalBlocks_);
            }
            for (int i = 0; i < controlObjectStates_.size(); i++) {
                output.writeMessage(3, controlObjectStates_.get(i));
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(1, currentBlock_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(2, totalBlocks_);
            }
            for (int i = 0; i < controlObjectStates_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(3, controlObjectStates_.get(i));
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        protected java.lang.Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code almaz2.rpc.commands.ControlObjectStateResult}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder>
                implements ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResultOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_ControlObjectStateResult_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_ControlObjectStateResult_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult.class, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult.Builder.class);
            }

            // Construct using ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                    getControlObjectStatesFieldBuilder();
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                currentBlock_ = 0;
                bitField0_ = (bitField0_ & ~0x00000001);
                totalBlocks_ = 0;
                bitField0_ = (bitField0_ & ~0x00000002);
                if (controlObjectStatesBuilder_ == null) {
                    controlObjectStates_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000004);
                } else {
                    controlObjectStatesBuilder_.clear();
                }
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_ControlObjectStateResult_descriptor;
            }

            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult getDefaultInstanceForType() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult.getDefaultInstance();
            }

            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult build() {
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult buildPartial() {
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult result = new ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.currentBlock_ = currentBlock_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.totalBlocks_ = totalBlocks_;
                if (controlObjectStatesBuilder_ == null) {
                    if (((bitField0_ & 0x00000004) == 0x00000004)) {
                        controlObjectStates_ = java.util.Collections.unmodifiableList(controlObjectStates_);
                        bitField0_ = (bitField0_ & ~0x00000004);
                    }
                    result.controlObjectStates_ = controlObjectStates_;
                } else {
                    result.controlObjectStates_ = controlObjectStatesBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult) {
                    return mergeFrom((ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult other) {
                if (other == ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult.getDefaultInstance())
                    return this;
                if (other.hasCurrentBlock()) {
                    setCurrentBlock(other.getCurrentBlock());
                }
                if (other.hasTotalBlocks()) {
                    setTotalBlocks(other.getTotalBlocks());
                }
                if (controlObjectStatesBuilder_ == null) {
                    if (!other.controlObjectStates_.isEmpty()) {
                        if (controlObjectStates_.isEmpty()) {
                            controlObjectStates_ = other.controlObjectStates_;
                            bitField0_ = (bitField0_ & ~0x00000004);
                        } else {
                            ensureControlObjectStatesIsMutable();
                            controlObjectStates_.addAll(other.controlObjectStates_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.controlObjectStates_.isEmpty()) {
                        if (controlObjectStatesBuilder_.isEmpty()) {
                            controlObjectStatesBuilder_.dispose();
                            controlObjectStatesBuilder_ = null;
                            controlObjectStates_ = other.controlObjectStates_;
                            bitField0_ = (bitField0_ & ~0x00000004);
                            controlObjectStatesBuilder_ =
                                    com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                                            getControlObjectStatesFieldBuilder() : null;
                        } else {
                            controlObjectStatesBuilder_.addAllMessages(other.controlObjectStates_);
                        }
                    }
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            // optional uint32 current_block = 1;
            private int currentBlock_;

            /**
             * <code>optional uint32 current_block = 1;</code>
             */
            public boolean hasCurrentBlock() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>optional uint32 current_block = 1;</code>
             */
            public int getCurrentBlock() {
                return currentBlock_;
            }

            /**
             * <code>optional uint32 current_block = 1;</code>
             */
            public Builder setCurrentBlock(int value) {
                bitField0_ |= 0x00000001;
                currentBlock_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional uint32 current_block = 1;</code>
             */
            public Builder clearCurrentBlock() {
                bitField0_ = (bitField0_ & ~0x00000001);
                currentBlock_ = 0;
                onChanged();
                return this;
            }

            // optional uint32 total_blocks = 2;
            private int totalBlocks_;

            /**
             * <code>optional uint32 total_blocks = 2;</code>
             */
            public boolean hasTotalBlocks() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>optional uint32 total_blocks = 2;</code>
             */
            public int getTotalBlocks() {
                return totalBlocks_;
            }

            /**
             * <code>optional uint32 total_blocks = 2;</code>
             */
            public Builder setTotalBlocks(int value) {
                bitField0_ |= 0x00000002;
                totalBlocks_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional uint32 total_blocks = 2;</code>
             */
            public Builder clearTotalBlocks() {
                bitField0_ = (bitField0_ & ~0x00000002);
                totalBlocks_ = 0;
                onChanged();
                return this;
            }

            // repeated .almaz2.domain_objects.ControlObjectState control_object_states = 3;
            private java.util.List<ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState> controlObjectStates_ =
                    java.util.Collections.emptyList();

            private void ensureControlObjectStatesIsMutable() {
                if (!((bitField0_ & 0x00000004) == 0x00000004)) {
                    controlObjectStates_ = new java.util.ArrayList<ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState>(controlObjectStates_);
                    bitField0_ |= 0x00000004;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<
                    ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState, ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState.Builder, ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectStateOrBuilder> controlObjectStatesBuilder_;

            /**
             * <code>repeated .almaz2.domain_objects.ControlObjectState control_object_states = 3;</code>
             */
            public java.util.List<ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState> getControlObjectStatesList() {
                if (controlObjectStatesBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(controlObjectStates_);
                } else {
                    return controlObjectStatesBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .almaz2.domain_objects.ControlObjectState control_object_states = 3;</code>
             */
            public int getControlObjectStatesCount() {
                if (controlObjectStatesBuilder_ == null) {
                    return controlObjectStates_.size();
                } else {
                    return controlObjectStatesBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .almaz2.domain_objects.ControlObjectState control_object_states = 3;</code>
             */
            public ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState getControlObjectStates(int index) {
                if (controlObjectStatesBuilder_ == null) {
                    return controlObjectStates_.get(index);
                } else {
                    return controlObjectStatesBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .almaz2.domain_objects.ControlObjectState control_object_states = 3;</code>
             */
            public Builder setControlObjectStates(
                    int index, ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState value) {
                if (controlObjectStatesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureControlObjectStatesIsMutable();
                    controlObjectStates_.set(index, value);
                    onChanged();
                } else {
                    controlObjectStatesBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .almaz2.domain_objects.ControlObjectState control_object_states = 3;</code>
             */
            public Builder setControlObjectStates(
                    int index, ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState.Builder builderForValue) {
                if (controlObjectStatesBuilder_ == null) {
                    ensureControlObjectStatesIsMutable();
                    controlObjectStates_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    controlObjectStatesBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .almaz2.domain_objects.ControlObjectState control_object_states = 3;</code>
             */
            public Builder addControlObjectStates(ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState value) {
                if (controlObjectStatesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureControlObjectStatesIsMutable();
                    controlObjectStates_.add(value);
                    onChanged();
                } else {
                    controlObjectStatesBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <code>repeated .almaz2.domain_objects.ControlObjectState control_object_states = 3;</code>
             */
            public Builder addControlObjectStates(
                    int index, ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState value) {
                if (controlObjectStatesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureControlObjectStatesIsMutable();
                    controlObjectStates_.add(index, value);
                    onChanged();
                } else {
                    controlObjectStatesBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .almaz2.domain_objects.ControlObjectState control_object_states = 3;</code>
             */
            public Builder addControlObjectStates(
                    ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState.Builder builderForValue) {
                if (controlObjectStatesBuilder_ == null) {
                    ensureControlObjectStatesIsMutable();
                    controlObjectStates_.add(builderForValue.build());
                    onChanged();
                } else {
                    controlObjectStatesBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .almaz2.domain_objects.ControlObjectState control_object_states = 3;</code>
             */
            public Builder addControlObjectStates(
                    int index, ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState.Builder builderForValue) {
                if (controlObjectStatesBuilder_ == null) {
                    ensureControlObjectStatesIsMutable();
                    controlObjectStates_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    controlObjectStatesBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .almaz2.domain_objects.ControlObjectState control_object_states = 3;</code>
             */
            public Builder addAllControlObjectStates(
                    java.lang.Iterable<? extends ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState> values) {
                if (controlObjectStatesBuilder_ == null) {
                    ensureControlObjectStatesIsMutable();
                    super.addAll(values, controlObjectStates_);
                    onChanged();
                } else {
                    controlObjectStatesBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <code>repeated .almaz2.domain_objects.ControlObjectState control_object_states = 3;</code>
             */
            public Builder clearControlObjectStates() {
                if (controlObjectStatesBuilder_ == null) {
                    controlObjectStates_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000004);
                    onChanged();
                } else {
                    controlObjectStatesBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>repeated .almaz2.domain_objects.ControlObjectState control_object_states = 3;</code>
             */
            public Builder removeControlObjectStates(int index) {
                if (controlObjectStatesBuilder_ == null) {
                    ensureControlObjectStatesIsMutable();
                    controlObjectStates_.remove(index);
                    onChanged();
                } else {
                    controlObjectStatesBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <code>repeated .almaz2.domain_objects.ControlObjectState control_object_states = 3;</code>
             */
            public ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState.Builder getControlObjectStatesBuilder(
                    int index) {
                return getControlObjectStatesFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .almaz2.domain_objects.ControlObjectState control_object_states = 3;</code>
             */
            public ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectStateOrBuilder getControlObjectStatesOrBuilder(
                    int index) {
                if (controlObjectStatesBuilder_ == null) {
                    return controlObjectStates_.get(index);
                } else {
                    return controlObjectStatesBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .almaz2.domain_objects.ControlObjectState control_object_states = 3;</code>
             */
            public java.util.List<? extends ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectStateOrBuilder>
            getControlObjectStatesOrBuilderList() {
                if (controlObjectStatesBuilder_ != null) {
                    return controlObjectStatesBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(controlObjectStates_);
                }
            }

            /**
             * <code>repeated .almaz2.domain_objects.ControlObjectState control_object_states = 3;</code>
             */
            public ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState.Builder addControlObjectStatesBuilder() {
                return getControlObjectStatesFieldBuilder().addBuilder(
                        ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState.getDefaultInstance());
            }

            /**
             * <code>repeated .almaz2.domain_objects.ControlObjectState control_object_states = 3;</code>
             */
            public ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState.Builder addControlObjectStatesBuilder(
                    int index) {
                return getControlObjectStatesFieldBuilder().addBuilder(
                        index, ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState.getDefaultInstance());
            }

            /**
             * <code>repeated .almaz2.domain_objects.ControlObjectState control_object_states = 3;</code>
             */
            public java.util.List<ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState.Builder>
            getControlObjectStatesBuilderList() {
                return getControlObjectStatesFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilder<
                    ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState, ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState.Builder, ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectStateOrBuilder>
            getControlObjectStatesFieldBuilder() {
                if (controlObjectStatesBuilder_ == null) {
                    controlObjectStatesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
                            ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState, ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState.Builder, ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectStateOrBuilder>(
                            controlObjectStates_,
                            ((bitField0_ & 0x00000004) == 0x00000004),
                            getParentForChildren(),
                            isClean());
                    controlObjectStates_ = null;
                }
                return controlObjectStatesBuilder_;
            }

            // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.ControlObjectStateResult)
        }

        static {
            defaultInstance = new ControlObjectStateResult(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.ControlObjectStateResult)
    }

    public interface ControlElementChangeOverPeriodQueryOrBuilder
            extends com.google.protobuf.MessageOrBuilder {

        // optional uint32 control_object_id = 1;

        /**
         * <code>optional uint32 control_object_id = 1;</code>
         */
        boolean hasControlObjectId();

        /**
         * <code>optional uint32 control_object_id = 1;</code>
         */
        int getControlObjectId();

        // optional uint32 control_element_id = 2;

        /**
         * <code>optional uint32 control_element_id = 2;</code>
         */
        boolean hasControlElementId();

        /**
         * <code>optional uint32 control_element_id = 2;</code>
         */
        int getControlElementId();

        // optional uint32 from_time = 3;

        /**
         * <code>optional uint32 from_time = 3;</code>
         */
        boolean hasFromTime();

        /**
         * <code>optional uint32 from_time = 3;</code>
         */
        int getFromTime();

        // optional uint32 to_time = 4;

        /**
         * <code>optional uint32 to_time = 4;</code>
         */
        boolean hasToTime();

        /**
         * <code>optional uint32 to_time = 4;</code>
         */
        int getToTime();
    }

    /**
     * Protobuf type {@code almaz2.rpc.commands.ControlElementChangeOverPeriodQuery}
     */
    public static final class ControlElementChangeOverPeriodQuery extends
            com.google.protobuf.GeneratedMessage
            implements ControlElementChangeOverPeriodQueryOrBuilder {
        // Use ControlElementChangeOverPeriodQuery.newBuilder() to construct.
        private ControlElementChangeOverPeriodQuery(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private ControlElementChangeOverPeriodQuery(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final ControlElementChangeOverPeriodQuery defaultInstance;

        public static ControlElementChangeOverPeriodQuery getDefaultInstance() {
            return defaultInstance;
        }

        public ControlElementChangeOverPeriodQuery getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private ControlElementChangeOverPeriodQuery(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            bitField0_ |= 0x00000001;
                            controlObjectId_ = input.readUInt32();
                            break;
                        }
                        case 16: {
                            bitField0_ |= 0x00000002;
                            controlElementId_ = input.readUInt32();
                            break;
                        }
                        case 24: {
                            bitField0_ |= 0x00000004;
                            fromTime_ = input.readUInt32();
                            break;
                        }
                        case 32: {
                            bitField0_ |= 0x00000008;
                            toTime_ = input.readUInt32();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_ControlElementChangeOverPeriodQuery_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_ControlElementChangeOverPeriodQuery_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery.class, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery.Builder.class);
        }

        public static com.google.protobuf.Parser<ControlElementChangeOverPeriodQuery> PARSER =
                new com.google.protobuf.AbstractParser<ControlElementChangeOverPeriodQuery>() {
                    public ControlElementChangeOverPeriodQuery parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new ControlElementChangeOverPeriodQuery(input, extensionRegistry);
                    }
                };

        @java.lang.Override
        public com.google.protobuf.Parser<ControlElementChangeOverPeriodQuery> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        // optional uint32 control_object_id = 1;
        public static final int CONTROL_OBJECT_ID_FIELD_NUMBER = 1;
        private int controlObjectId_;

        /**
         * <code>optional uint32 control_object_id = 1;</code>
         */
        public boolean hasControlObjectId() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>optional uint32 control_object_id = 1;</code>
         */
        public int getControlObjectId() {
            return controlObjectId_;
        }

        // optional uint32 control_element_id = 2;
        public static final int CONTROL_ELEMENT_ID_FIELD_NUMBER = 2;
        private int controlElementId_;

        /**
         * <code>optional uint32 control_element_id = 2;</code>
         */
        public boolean hasControlElementId() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional uint32 control_element_id = 2;</code>
         */
        public int getControlElementId() {
            return controlElementId_;
        }

        // optional uint32 from_time = 3;
        public static final int FROM_TIME_FIELD_NUMBER = 3;
        private int fromTime_;

        /**
         * <code>optional uint32 from_time = 3;</code>
         */
        public boolean hasFromTime() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>optional uint32 from_time = 3;</code>
         */
        public int getFromTime() {
            return fromTime_;
        }

        // optional uint32 to_time = 4;
        public static final int TO_TIME_FIELD_NUMBER = 4;
        private int toTime_;

        /**
         * <code>optional uint32 to_time = 4;</code>
         */
        public boolean hasToTime() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }

        /**
         * <code>optional uint32 to_time = 4;</code>
         */
        public int getToTime() {
            return toTime_;
        }

        private void initFields() {
            controlObjectId_ = 0;
            controlElementId_ = 0;
            fromTime_ = 0;
            toTime_ = 0;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != -1) return isInitialized == 1;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeUInt32(1, controlObjectId_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeUInt32(2, controlElementId_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeUInt32(3, fromTime_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                output.writeUInt32(4, toTime_);
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(1, controlObjectId_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(2, controlElementId_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(3, fromTime_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(4, toTime_);
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        protected java.lang.Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code almaz2.rpc.commands.ControlElementChangeOverPeriodQuery}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder>
                implements ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQueryOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_ControlElementChangeOverPeriodQuery_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_ControlElementChangeOverPeriodQuery_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery.class, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery.Builder.class);
            }

            // Construct using ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                controlObjectId_ = 0;
                bitField0_ = (bitField0_ & ~0x00000001);
                controlElementId_ = 0;
                bitField0_ = (bitField0_ & ~0x00000002);
                fromTime_ = 0;
                bitField0_ = (bitField0_ & ~0x00000004);
                toTime_ = 0;
                bitField0_ = (bitField0_ & ~0x00000008);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_ControlElementChangeOverPeriodQuery_descriptor;
            }

            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery getDefaultInstanceForType() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery.getDefaultInstance();
            }

            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery build() {
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery buildPartial() {
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery result = new ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.controlObjectId_ = controlObjectId_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.controlElementId_ = controlElementId_;
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                result.fromTime_ = fromTime_;
                if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                    to_bitField0_ |= 0x00000008;
                }
                result.toTime_ = toTime_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery) {
                    return mergeFrom((ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery other) {
                if (other == ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery.getDefaultInstance())
                    return this;
                if (other.hasControlObjectId()) {
                    setControlObjectId(other.getControlObjectId());
                }
                if (other.hasControlElementId()) {
                    setControlElementId(other.getControlElementId());
                }
                if (other.hasFromTime()) {
                    setFromTime(other.getFromTime());
                }
                if (other.hasToTime()) {
                    setToTime(other.getToTime());
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            // optional uint32 control_object_id = 1;
            private int controlObjectId_;

            /**
             * <code>optional uint32 control_object_id = 1;</code>
             */
            public boolean hasControlObjectId() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>optional uint32 control_object_id = 1;</code>
             */
            public int getControlObjectId() {
                return controlObjectId_;
            }

            /**
             * <code>optional uint32 control_object_id = 1;</code>
             */
            public Builder setControlObjectId(int value) {
                bitField0_ |= 0x00000001;
                controlObjectId_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional uint32 control_object_id = 1;</code>
             */
            public Builder clearControlObjectId() {
                bitField0_ = (bitField0_ & ~0x00000001);
                controlObjectId_ = 0;
                onChanged();
                return this;
            }

            // optional uint32 control_element_id = 2;
            private int controlElementId_;

            /**
             * <code>optional uint32 control_element_id = 2;</code>
             */
            public boolean hasControlElementId() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>optional uint32 control_element_id = 2;</code>
             */
            public int getControlElementId() {
                return controlElementId_;
            }

            /**
             * <code>optional uint32 control_element_id = 2;</code>
             */
            public Builder setControlElementId(int value) {
                bitField0_ |= 0x00000002;
                controlElementId_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional uint32 control_element_id = 2;</code>
             */
            public Builder clearControlElementId() {
                bitField0_ = (bitField0_ & ~0x00000002);
                controlElementId_ = 0;
                onChanged();
                return this;
            }

            // optional uint32 from_time = 3;
            private int fromTime_;

            /**
             * <code>optional uint32 from_time = 3;</code>
             */
            public boolean hasFromTime() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }

            /**
             * <code>optional uint32 from_time = 3;</code>
             */
            public int getFromTime() {
                return fromTime_;
            }

            /**
             * <code>optional uint32 from_time = 3;</code>
             */
            public Builder setFromTime(int value) {
                bitField0_ |= 0x00000004;
                fromTime_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional uint32 from_time = 3;</code>
             */
            public Builder clearFromTime() {
                bitField0_ = (bitField0_ & ~0x00000004);
                fromTime_ = 0;
                onChanged();
                return this;
            }

            // optional uint32 to_time = 4;
            private int toTime_;

            /**
             * <code>optional uint32 to_time = 4;</code>
             */
            public boolean hasToTime() {
                return ((bitField0_ & 0x00000008) == 0x00000008);
            }

            /**
             * <code>optional uint32 to_time = 4;</code>
             */
            public int getToTime() {
                return toTime_;
            }

            /**
             * <code>optional uint32 to_time = 4;</code>
             */
            public Builder setToTime(int value) {
                bitField0_ |= 0x00000008;
                toTime_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional uint32 to_time = 4;</code>
             */
            public Builder clearToTime() {
                bitField0_ = (bitField0_ & ~0x00000008);
                toTime_ = 0;
                onChanged();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.ControlElementChangeOverPeriodQuery)
        }

        static {
            defaultInstance = new ControlElementChangeOverPeriodQuery(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.ControlElementChangeOverPeriodQuery)
    }

    public interface ControlElementChangeOverPeriodResultOrBuilder
            extends com.google.protobuf.MessageOrBuilder {

        // optional uint32 current_block = 1;

        /**
         * <code>optional uint32 current_block = 1;</code>
         */
        boolean hasCurrentBlock();

        /**
         * <code>optional uint32 current_block = 1;</code>
         */
        int getCurrentBlock();

        // optional uint32 total_blocks = 2;

        /**
         * <code>optional uint32 total_blocks = 2;</code>
         */
        boolean hasTotalBlocks();

        /**
         * <code>optional uint32 total_blocks = 2;</code>
         */
        int getTotalBlocks();

        // repeated .almaz2.domain_objects.ControlElementChangeOverPeriod control_clement_change_over_periods = 3;

        /**
         * <code>repeated .almaz2.domain_objects.ControlElementChangeOverPeriod control_clement_change_over_periods = 3;</code>
         */
        java.util.List<ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriod>
        getControlClementChangeOverPeriodsList();

        /**
         * <code>repeated .almaz2.domain_objects.ControlElementChangeOverPeriod control_clement_change_over_periods = 3;</code>
         */
        ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriod getControlClementChangeOverPeriods(int index);

        /**
         * <code>repeated .almaz2.domain_objects.ControlElementChangeOverPeriod control_clement_change_over_periods = 3;</code>
         */
        int getControlClementChangeOverPeriodsCount();

        /**
         * <code>repeated .almaz2.domain_objects.ControlElementChangeOverPeriod control_clement_change_over_periods = 3;</code>
         */
        java.util.List<? extends ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriodOrBuilder>
        getControlClementChangeOverPeriodsOrBuilderList();

        /**
         * <code>repeated .almaz2.domain_objects.ControlElementChangeOverPeriod control_clement_change_over_periods = 3;</code>
         */
        ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriodOrBuilder getControlClementChangeOverPeriodsOrBuilder(
                int index);
    }

    /**
     * Protobuf type {@code almaz2.rpc.commands.ControlElementChangeOverPeriodResult}
     */
    public static final class ControlElementChangeOverPeriodResult extends
            com.google.protobuf.GeneratedMessage
            implements ControlElementChangeOverPeriodResultOrBuilder {
        // Use ControlElementChangeOverPeriodResult.newBuilder() to construct.
        private ControlElementChangeOverPeriodResult(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private ControlElementChangeOverPeriodResult(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final ControlElementChangeOverPeriodResult defaultInstance;

        public static ControlElementChangeOverPeriodResult getDefaultInstance() {
            return defaultInstance;
        }

        public ControlElementChangeOverPeriodResult getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private ControlElementChangeOverPeriodResult(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            bitField0_ |= 0x00000001;
                            currentBlock_ = input.readUInt32();
                            break;
                        }
                        case 16: {
                            bitField0_ |= 0x00000002;
                            totalBlocks_ = input.readUInt32();
                            break;
                        }
                        case 26: {
                            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                                controlClementChangeOverPeriods_ = new java.util.ArrayList<ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriod>();
                                mutable_bitField0_ |= 0x00000004;
                            }
                            controlClementChangeOverPeriods_.add(input.readMessage(ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriod.PARSER, extensionRegistry));
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                    controlClementChangeOverPeriods_ = java.util.Collections.unmodifiableList(controlClementChangeOverPeriods_);
                }
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_ControlElementChangeOverPeriodResult_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_ControlElementChangeOverPeriodResult_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult.class, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult.Builder.class);
        }

        public static com.google.protobuf.Parser<ControlElementChangeOverPeriodResult> PARSER =
                new com.google.protobuf.AbstractParser<ControlElementChangeOverPeriodResult>() {
                    public ControlElementChangeOverPeriodResult parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new ControlElementChangeOverPeriodResult(input, extensionRegistry);
                    }
                };

        @java.lang.Override
        public com.google.protobuf.Parser<ControlElementChangeOverPeriodResult> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        // optional uint32 current_block = 1;
        public static final int CURRENT_BLOCK_FIELD_NUMBER = 1;
        private int currentBlock_;

        /**
         * <code>optional uint32 current_block = 1;</code>
         */
        public boolean hasCurrentBlock() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>optional uint32 current_block = 1;</code>
         */
        public int getCurrentBlock() {
            return currentBlock_;
        }

        // optional uint32 total_blocks = 2;
        public static final int TOTAL_BLOCKS_FIELD_NUMBER = 2;
        private int totalBlocks_;

        /**
         * <code>optional uint32 total_blocks = 2;</code>
         */
        public boolean hasTotalBlocks() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional uint32 total_blocks = 2;</code>
         */
        public int getTotalBlocks() {
            return totalBlocks_;
        }

        // repeated .almaz2.domain_objects.ControlElementChangeOverPeriod control_clement_change_over_periods = 3;
        public static final int CONTROL_CLEMENT_CHANGE_OVER_PERIODS_FIELD_NUMBER = 3;
        private java.util.List<ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriod> controlClementChangeOverPeriods_;

        /**
         * <code>repeated .almaz2.domain_objects.ControlElementChangeOverPeriod control_clement_change_over_periods = 3;</code>
         */
        public java.util.List<ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriod> getControlClementChangeOverPeriodsList() {
            return controlClementChangeOverPeriods_;
        }

        /**
         * <code>repeated .almaz2.domain_objects.ControlElementChangeOverPeriod control_clement_change_over_periods = 3;</code>
         */
        public java.util.List<? extends ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriodOrBuilder>
        getControlClementChangeOverPeriodsOrBuilderList() {
            return controlClementChangeOverPeriods_;
        }

        /**
         * <code>repeated .almaz2.domain_objects.ControlElementChangeOverPeriod control_clement_change_over_periods = 3;</code>
         */
        public int getControlClementChangeOverPeriodsCount() {
            return controlClementChangeOverPeriods_.size();
        }

        /**
         * <code>repeated .almaz2.domain_objects.ControlElementChangeOverPeriod control_clement_change_over_periods = 3;</code>
         */
        public ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriod getControlClementChangeOverPeriods(int index) {
            return controlClementChangeOverPeriods_.get(index);
        }

        /**
         * <code>repeated .almaz2.domain_objects.ControlElementChangeOverPeriod control_clement_change_over_periods = 3;</code>
         */
        public ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriodOrBuilder getControlClementChangeOverPeriodsOrBuilder(
                int index) {
            return controlClementChangeOverPeriods_.get(index);
        }

        private void initFields() {
            currentBlock_ = 0;
            totalBlocks_ = 0;
            controlClementChangeOverPeriods_ = java.util.Collections.emptyList();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != -1) return isInitialized == 1;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeUInt32(1, currentBlock_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeUInt32(2, totalBlocks_);
            }
            for (int i = 0; i < controlClementChangeOverPeriods_.size(); i++) {
                output.writeMessage(3, controlClementChangeOverPeriods_.get(i));
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(1, currentBlock_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(2, totalBlocks_);
            }
            for (int i = 0; i < controlClementChangeOverPeriods_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(3, controlClementChangeOverPeriods_.get(i));
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        protected java.lang.Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code almaz2.rpc.commands.ControlElementChangeOverPeriodResult}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder>
                implements ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResultOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_ControlElementChangeOverPeriodResult_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_ControlElementChangeOverPeriodResult_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult.class, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult.Builder.class);
            }

            // Construct using ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                    getControlClementChangeOverPeriodsFieldBuilder();
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                currentBlock_ = 0;
                bitField0_ = (bitField0_ & ~0x00000001);
                totalBlocks_ = 0;
                bitField0_ = (bitField0_ & ~0x00000002);
                if (controlClementChangeOverPeriodsBuilder_ == null) {
                    controlClementChangeOverPeriods_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000004);
                } else {
                    controlClementChangeOverPeriodsBuilder_.clear();
                }
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_ControlElementChangeOverPeriodResult_descriptor;
            }

            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult getDefaultInstanceForType() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult.getDefaultInstance();
            }

            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult build() {
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult buildPartial() {
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult result = new ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.currentBlock_ = currentBlock_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.totalBlocks_ = totalBlocks_;
                if (controlClementChangeOverPeriodsBuilder_ == null) {
                    if (((bitField0_ & 0x00000004) == 0x00000004)) {
                        controlClementChangeOverPeriods_ = java.util.Collections.unmodifiableList(controlClementChangeOverPeriods_);
                        bitField0_ = (bitField0_ & ~0x00000004);
                    }
                    result.controlClementChangeOverPeriods_ = controlClementChangeOverPeriods_;
                } else {
                    result.controlClementChangeOverPeriods_ = controlClementChangeOverPeriodsBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult) {
                    return mergeFrom((ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult other) {
                if (other == ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult.getDefaultInstance())
                    return this;
                if (other.hasCurrentBlock()) {
                    setCurrentBlock(other.getCurrentBlock());
                }
                if (other.hasTotalBlocks()) {
                    setTotalBlocks(other.getTotalBlocks());
                }
                if (controlClementChangeOverPeriodsBuilder_ == null) {
                    if (!other.controlClementChangeOverPeriods_.isEmpty()) {
                        if (controlClementChangeOverPeriods_.isEmpty()) {
                            controlClementChangeOverPeriods_ = other.controlClementChangeOverPeriods_;
                            bitField0_ = (bitField0_ & ~0x00000004);
                        } else {
                            ensureControlClementChangeOverPeriodsIsMutable();
                            controlClementChangeOverPeriods_.addAll(other.controlClementChangeOverPeriods_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.controlClementChangeOverPeriods_.isEmpty()) {
                        if (controlClementChangeOverPeriodsBuilder_.isEmpty()) {
                            controlClementChangeOverPeriodsBuilder_.dispose();
                            controlClementChangeOverPeriodsBuilder_ = null;
                            controlClementChangeOverPeriods_ = other.controlClementChangeOverPeriods_;
                            bitField0_ = (bitField0_ & ~0x00000004);
                            controlClementChangeOverPeriodsBuilder_ =
                                    com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                                            getControlClementChangeOverPeriodsFieldBuilder() : null;
                        } else {
                            controlClementChangeOverPeriodsBuilder_.addAllMessages(other.controlClementChangeOverPeriods_);
                        }
                    }
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            // optional uint32 current_block = 1;
            private int currentBlock_;

            /**
             * <code>optional uint32 current_block = 1;</code>
             */
            public boolean hasCurrentBlock() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>optional uint32 current_block = 1;</code>
             */
            public int getCurrentBlock() {
                return currentBlock_;
            }

            /**
             * <code>optional uint32 current_block = 1;</code>
             */
            public Builder setCurrentBlock(int value) {
                bitField0_ |= 0x00000001;
                currentBlock_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional uint32 current_block = 1;</code>
             */
            public Builder clearCurrentBlock() {
                bitField0_ = (bitField0_ & ~0x00000001);
                currentBlock_ = 0;
                onChanged();
                return this;
            }

            // optional uint32 total_blocks = 2;
            private int totalBlocks_;

            /**
             * <code>optional uint32 total_blocks = 2;</code>
             */
            public boolean hasTotalBlocks() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>optional uint32 total_blocks = 2;</code>
             */
            public int getTotalBlocks() {
                return totalBlocks_;
            }

            /**
             * <code>optional uint32 total_blocks = 2;</code>
             */
            public Builder setTotalBlocks(int value) {
                bitField0_ |= 0x00000002;
                totalBlocks_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional uint32 total_blocks = 2;</code>
             */
            public Builder clearTotalBlocks() {
                bitField0_ = (bitField0_ & ~0x00000002);
                totalBlocks_ = 0;
                onChanged();
                return this;
            }

            // repeated .almaz2.domain_objects.ControlElementChangeOverPeriod control_clement_change_over_periods = 3;
            private java.util.List<ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriod> controlClementChangeOverPeriods_ =
                    java.util.Collections.emptyList();

            private void ensureControlClementChangeOverPeriodsIsMutable() {
                if (!((bitField0_ & 0x00000004) == 0x00000004)) {
                    controlClementChangeOverPeriods_ = new java.util.ArrayList<ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriod>(controlClementChangeOverPeriods_);
                    bitField0_ |= 0x00000004;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<
                    ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriod, ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriod.Builder, ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriodOrBuilder> controlClementChangeOverPeriodsBuilder_;

            /**
             * <code>repeated .almaz2.domain_objects.ControlElementChangeOverPeriod control_clement_change_over_periods = 3;</code>
             */
            public java.util.List<ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriod> getControlClementChangeOverPeriodsList() {
                if (controlClementChangeOverPeriodsBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(controlClementChangeOverPeriods_);
                } else {
                    return controlClementChangeOverPeriodsBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .almaz2.domain_objects.ControlElementChangeOverPeriod control_clement_change_over_periods = 3;</code>
             */
            public int getControlClementChangeOverPeriodsCount() {
                if (controlClementChangeOverPeriodsBuilder_ == null) {
                    return controlClementChangeOverPeriods_.size();
                } else {
                    return controlClementChangeOverPeriodsBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .almaz2.domain_objects.ControlElementChangeOverPeriod control_clement_change_over_periods = 3;</code>
             */
            public ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriod getControlClementChangeOverPeriods(int index) {
                if (controlClementChangeOverPeriodsBuilder_ == null) {
                    return controlClementChangeOverPeriods_.get(index);
                } else {
                    return controlClementChangeOverPeriodsBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .almaz2.domain_objects.ControlElementChangeOverPeriod control_clement_change_over_periods = 3;</code>
             */
            public Builder setControlClementChangeOverPeriods(
                    int index, ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriod value) {
                if (controlClementChangeOverPeriodsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureControlClementChangeOverPeriodsIsMutable();
                    controlClementChangeOverPeriods_.set(index, value);
                    onChanged();
                } else {
                    controlClementChangeOverPeriodsBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .almaz2.domain_objects.ControlElementChangeOverPeriod control_clement_change_over_periods = 3;</code>
             */
            public Builder setControlClementChangeOverPeriods(
                    int index, ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriod.Builder builderForValue) {
                if (controlClementChangeOverPeriodsBuilder_ == null) {
                    ensureControlClementChangeOverPeriodsIsMutable();
                    controlClementChangeOverPeriods_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    controlClementChangeOverPeriodsBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .almaz2.domain_objects.ControlElementChangeOverPeriod control_clement_change_over_periods = 3;</code>
             */
            public Builder addControlClementChangeOverPeriods(ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriod value) {
                if (controlClementChangeOverPeriodsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureControlClementChangeOverPeriodsIsMutable();
                    controlClementChangeOverPeriods_.add(value);
                    onChanged();
                } else {
                    controlClementChangeOverPeriodsBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <code>repeated .almaz2.domain_objects.ControlElementChangeOverPeriod control_clement_change_over_periods = 3;</code>
             */
            public Builder addControlClementChangeOverPeriods(
                    int index, ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriod value) {
                if (controlClementChangeOverPeriodsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureControlClementChangeOverPeriodsIsMutable();
                    controlClementChangeOverPeriods_.add(index, value);
                    onChanged();
                } else {
                    controlClementChangeOverPeriodsBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .almaz2.domain_objects.ControlElementChangeOverPeriod control_clement_change_over_periods = 3;</code>
             */
            public Builder addControlClementChangeOverPeriods(
                    ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriod.Builder builderForValue) {
                if (controlClementChangeOverPeriodsBuilder_ == null) {
                    ensureControlClementChangeOverPeriodsIsMutable();
                    controlClementChangeOverPeriods_.add(builderForValue.build());
                    onChanged();
                } else {
                    controlClementChangeOverPeriodsBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .almaz2.domain_objects.ControlElementChangeOverPeriod control_clement_change_over_periods = 3;</code>
             */
            public Builder addControlClementChangeOverPeriods(
                    int index, ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriod.Builder builderForValue) {
                if (controlClementChangeOverPeriodsBuilder_ == null) {
                    ensureControlClementChangeOverPeriodsIsMutable();
                    controlClementChangeOverPeriods_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    controlClementChangeOverPeriodsBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .almaz2.domain_objects.ControlElementChangeOverPeriod control_clement_change_over_periods = 3;</code>
             */
            public Builder addAllControlClementChangeOverPeriods(
                    java.lang.Iterable<? extends ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriod> values) {
                if (controlClementChangeOverPeriodsBuilder_ == null) {
                    ensureControlClementChangeOverPeriodsIsMutable();
                    super.addAll(values, controlClementChangeOverPeriods_);
                    onChanged();
                } else {
                    controlClementChangeOverPeriodsBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <code>repeated .almaz2.domain_objects.ControlElementChangeOverPeriod control_clement_change_over_periods = 3;</code>
             */
            public Builder clearControlClementChangeOverPeriods() {
                if (controlClementChangeOverPeriodsBuilder_ == null) {
                    controlClementChangeOverPeriods_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000004);
                    onChanged();
                } else {
                    controlClementChangeOverPeriodsBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>repeated .almaz2.domain_objects.ControlElementChangeOverPeriod control_clement_change_over_periods = 3;</code>
             */
            public Builder removeControlClementChangeOverPeriods(int index) {
                if (controlClementChangeOverPeriodsBuilder_ == null) {
                    ensureControlClementChangeOverPeriodsIsMutable();
                    controlClementChangeOverPeriods_.remove(index);
                    onChanged();
                } else {
                    controlClementChangeOverPeriodsBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <code>repeated .almaz2.domain_objects.ControlElementChangeOverPeriod control_clement_change_over_periods = 3;</code>
             */
            public ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriod.Builder getControlClementChangeOverPeriodsBuilder(
                    int index) {
                return getControlClementChangeOverPeriodsFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .almaz2.domain_objects.ControlElementChangeOverPeriod control_clement_change_over_periods = 3;</code>
             */
            public ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriodOrBuilder getControlClementChangeOverPeriodsOrBuilder(
                    int index) {
                if (controlClementChangeOverPeriodsBuilder_ == null) {
                    return controlClementChangeOverPeriods_.get(index);
                } else {
                    return controlClementChangeOverPeriodsBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .almaz2.domain_objects.ControlElementChangeOverPeriod control_clement_change_over_periods = 3;</code>
             */
            public java.util.List<? extends ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriodOrBuilder>
            getControlClementChangeOverPeriodsOrBuilderList() {
                if (controlClementChangeOverPeriodsBuilder_ != null) {
                    return controlClementChangeOverPeriodsBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(controlClementChangeOverPeriods_);
                }
            }

            /**
             * <code>repeated .almaz2.domain_objects.ControlElementChangeOverPeriod control_clement_change_over_periods = 3;</code>
             */
            public ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriod.Builder addControlClementChangeOverPeriodsBuilder() {
                return getControlClementChangeOverPeriodsFieldBuilder().addBuilder(
                        ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriod.getDefaultInstance());
            }

            /**
             * <code>repeated .almaz2.domain_objects.ControlElementChangeOverPeriod control_clement_change_over_periods = 3;</code>
             */
            public ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriod.Builder addControlClementChangeOverPeriodsBuilder(
                    int index) {
                return getControlClementChangeOverPeriodsFieldBuilder().addBuilder(
                        index, ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriod.getDefaultInstance());
            }

            /**
             * <code>repeated .almaz2.domain_objects.ControlElementChangeOverPeriod control_clement_change_over_periods = 3;</code>
             */
            public java.util.List<ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriod.Builder>
            getControlClementChangeOverPeriodsBuilderList() {
                return getControlClementChangeOverPeriodsFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilder<
                    ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriod, ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriod.Builder, ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriodOrBuilder>
            getControlClementChangeOverPeriodsFieldBuilder() {
                if (controlClementChangeOverPeriodsBuilder_ == null) {
                    controlClementChangeOverPeriodsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
                            ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriod, ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriod.Builder, ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.ControlElementChangeOverPeriodOrBuilder>(
                            controlClementChangeOverPeriods_,
                            ((bitField0_ & 0x00000004) == 0x00000004),
                            getParentForChildren(),
                            isClean());
                    controlClementChangeOverPeriods_ = null;
                }
                return controlClementChangeOverPeriodsBuilder_;
            }

            // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.ControlElementChangeOverPeriodResult)
        }

        static {
            defaultInstance = new ControlElementChangeOverPeriodResult(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.ControlElementChangeOverPeriodResult)
    }

    public interface SensorChangeOverPeriodQueryOrBuilder
            extends com.google.protobuf.MessageOrBuilder {

        // optional uint32 control_object_id = 1;

        /**
         * <code>optional uint32 control_object_id = 1;</code>
         */
        boolean hasControlObjectId();

        /**
         * <code>optional uint32 control_object_id = 1;</code>
         */
        int getControlObjectId();

        // optional uint32 control_element_id = 2;

        /**
         * <code>optional uint32 control_element_id = 2;</code>
         */
        boolean hasControlElementId();

        /**
         * <code>optional uint32 control_element_id = 2;</code>
         */
        int getControlElementId();

        // optional uint32 sensor_id = 3;

        /**
         * <code>optional uint32 sensor_id = 3;</code>
         */
        boolean hasSensorId();

        /**
         * <code>optional uint32 sensor_id = 3;</code>
         */
        int getSensorId();

        // optional uint32 from_time = 4;

        /**
         * <code>optional uint32 from_time = 4;</code>
         */
        boolean hasFromTime();

        /**
         * <code>optional uint32 from_time = 4;</code>
         */
        int getFromTime();

        // optional uint32 to_time = 5;

        /**
         * <code>optional uint32 to_time = 5;</code>
         */
        boolean hasToTime();

        /**
         * <code>optional uint32 to_time = 5;</code>
         */
        int getToTime();
    }

    /**
     * Protobuf type {@code almaz2.rpc.commands.SensorChangeOverPeriodQuery}
     */
    public static final class SensorChangeOverPeriodQuery extends
            com.google.protobuf.GeneratedMessage
            implements SensorChangeOverPeriodQueryOrBuilder {
        // Use SensorChangeOverPeriodQuery.newBuilder() to construct.
        private SensorChangeOverPeriodQuery(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private SensorChangeOverPeriodQuery(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final SensorChangeOverPeriodQuery defaultInstance;

        public static SensorChangeOverPeriodQuery getDefaultInstance() {
            return defaultInstance;
        }

        public SensorChangeOverPeriodQuery getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private SensorChangeOverPeriodQuery(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            bitField0_ |= 0x00000001;
                            controlObjectId_ = input.readUInt32();
                            break;
                        }
                        case 16: {
                            bitField0_ |= 0x00000002;
                            controlElementId_ = input.readUInt32();
                            break;
                        }
                        case 24: {
                            bitField0_ |= 0x00000004;
                            sensorId_ = input.readUInt32();
                            break;
                        }
                        case 32: {
                            bitField0_ |= 0x00000008;
                            fromTime_ = input.readUInt32();
                            break;
                        }
                        case 40: {
                            bitField0_ |= 0x00000010;
                            toTime_ = input.readUInt32();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_SensorChangeOverPeriodQuery_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_SensorChangeOverPeriodQuery_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery.class, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery.Builder.class);
        }

        public static com.google.protobuf.Parser<SensorChangeOverPeriodQuery> PARSER =
                new com.google.protobuf.AbstractParser<SensorChangeOverPeriodQuery>() {
                    public SensorChangeOverPeriodQuery parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new SensorChangeOverPeriodQuery(input, extensionRegistry);
                    }
                };

        @java.lang.Override
        public com.google.protobuf.Parser<SensorChangeOverPeriodQuery> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        // optional uint32 control_object_id = 1;
        public static final int CONTROL_OBJECT_ID_FIELD_NUMBER = 1;
        private int controlObjectId_;

        /**
         * <code>optional uint32 control_object_id = 1;</code>
         */
        public boolean hasControlObjectId() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>optional uint32 control_object_id = 1;</code>
         */
        public int getControlObjectId() {
            return controlObjectId_;
        }

        // optional uint32 control_element_id = 2;
        public static final int CONTROL_ELEMENT_ID_FIELD_NUMBER = 2;
        private int controlElementId_;

        /**
         * <code>optional uint32 control_element_id = 2;</code>
         */
        public boolean hasControlElementId() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional uint32 control_element_id = 2;</code>
         */
        public int getControlElementId() {
            return controlElementId_;
        }

        // optional uint32 sensor_id = 3;
        public static final int SENSOR_ID_FIELD_NUMBER = 3;
        private int sensorId_;

        /**
         * <code>optional uint32 sensor_id = 3;</code>
         */
        public boolean hasSensorId() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>optional uint32 sensor_id = 3;</code>
         */
        public int getSensorId() {
            return sensorId_;
        }

        // optional uint32 from_time = 4;
        public static final int FROM_TIME_FIELD_NUMBER = 4;
        private int fromTime_;

        /**
         * <code>optional uint32 from_time = 4;</code>
         */
        public boolean hasFromTime() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }

        /**
         * <code>optional uint32 from_time = 4;</code>
         */
        public int getFromTime() {
            return fromTime_;
        }

        // optional uint32 to_time = 5;
        public static final int TO_TIME_FIELD_NUMBER = 5;
        private int toTime_;

        /**
         * <code>optional uint32 to_time = 5;</code>
         */
        public boolean hasToTime() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
        }

        /**
         * <code>optional uint32 to_time = 5;</code>
         */
        public int getToTime() {
            return toTime_;
        }

        private void initFields() {
            controlObjectId_ = 0;
            controlElementId_ = 0;
            sensorId_ = 0;
            fromTime_ = 0;
            toTime_ = 0;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != -1) return isInitialized == 1;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeUInt32(1, controlObjectId_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeUInt32(2, controlElementId_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeUInt32(3, sensorId_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                output.writeUInt32(4, fromTime_);
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                output.writeUInt32(5, toTime_);
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(1, controlObjectId_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(2, controlElementId_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(3, sensorId_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(4, fromTime_);
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(5, toTime_);
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        protected java.lang.Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code almaz2.rpc.commands.SensorChangeOverPeriodQuery}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder>
                implements ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQueryOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_SensorChangeOverPeriodQuery_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_SensorChangeOverPeriodQuery_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery.class, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery.Builder.class);
            }

            // Construct using ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                controlObjectId_ = 0;
                bitField0_ = (bitField0_ & ~0x00000001);
                controlElementId_ = 0;
                bitField0_ = (bitField0_ & ~0x00000002);
                sensorId_ = 0;
                bitField0_ = (bitField0_ & ~0x00000004);
                fromTime_ = 0;
                bitField0_ = (bitField0_ & ~0x00000008);
                toTime_ = 0;
                bitField0_ = (bitField0_ & ~0x00000010);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_SensorChangeOverPeriodQuery_descriptor;
            }

            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery getDefaultInstanceForType() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery.getDefaultInstance();
            }

            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery build() {
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery buildPartial() {
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery result = new ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.controlObjectId_ = controlObjectId_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.controlElementId_ = controlElementId_;
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                result.sensorId_ = sensorId_;
                if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                    to_bitField0_ |= 0x00000008;
                }
                result.fromTime_ = fromTime_;
                if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
                    to_bitField0_ |= 0x00000010;
                }
                result.toTime_ = toTime_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery) {
                    return mergeFrom((ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery other) {
                if (other == ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery.getDefaultInstance())
                    return this;
                if (other.hasControlObjectId()) {
                    setControlObjectId(other.getControlObjectId());
                }
                if (other.hasControlElementId()) {
                    setControlElementId(other.getControlElementId());
                }
                if (other.hasSensorId()) {
                    setSensorId(other.getSensorId());
                }
                if (other.hasFromTime()) {
                    setFromTime(other.getFromTime());
                }
                if (other.hasToTime()) {
                    setToTime(other.getToTime());
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            // optional uint32 control_object_id = 1;
            private int controlObjectId_;

            /**
             * <code>optional uint32 control_object_id = 1;</code>
             */
            public boolean hasControlObjectId() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>optional uint32 control_object_id = 1;</code>
             */
            public int getControlObjectId() {
                return controlObjectId_;
            }

            /**
             * <code>optional uint32 control_object_id = 1;</code>
             */
            public Builder setControlObjectId(int value) {
                bitField0_ |= 0x00000001;
                controlObjectId_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional uint32 control_object_id = 1;</code>
             */
            public Builder clearControlObjectId() {
                bitField0_ = (bitField0_ & ~0x00000001);
                controlObjectId_ = 0;
                onChanged();
                return this;
            }

            // optional uint32 control_element_id = 2;
            private int controlElementId_;

            /**
             * <code>optional uint32 control_element_id = 2;</code>
             */
            public boolean hasControlElementId() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>optional uint32 control_element_id = 2;</code>
             */
            public int getControlElementId() {
                return controlElementId_;
            }

            /**
             * <code>optional uint32 control_element_id = 2;</code>
             */
            public Builder setControlElementId(int value) {
                bitField0_ |= 0x00000002;
                controlElementId_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional uint32 control_element_id = 2;</code>
             */
            public Builder clearControlElementId() {
                bitField0_ = (bitField0_ & ~0x00000002);
                controlElementId_ = 0;
                onChanged();
                return this;
            }

            // optional uint32 sensor_id = 3;
            private int sensorId_;

            /**
             * <code>optional uint32 sensor_id = 3;</code>
             */
            public boolean hasSensorId() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }

            /**
             * <code>optional uint32 sensor_id = 3;</code>
             */
            public int getSensorId() {
                return sensorId_;
            }

            /**
             * <code>optional uint32 sensor_id = 3;</code>
             */
            public Builder setSensorId(int value) {
                bitField0_ |= 0x00000004;
                sensorId_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional uint32 sensor_id = 3;</code>
             */
            public Builder clearSensorId() {
                bitField0_ = (bitField0_ & ~0x00000004);
                sensorId_ = 0;
                onChanged();
                return this;
            }

            // optional uint32 from_time = 4;
            private int fromTime_;

            /**
             * <code>optional uint32 from_time = 4;</code>
             */
            public boolean hasFromTime() {
                return ((bitField0_ & 0x00000008) == 0x00000008);
            }

            /**
             * <code>optional uint32 from_time = 4;</code>
             */
            public int getFromTime() {
                return fromTime_;
            }

            /**
             * <code>optional uint32 from_time = 4;</code>
             */
            public Builder setFromTime(int value) {
                bitField0_ |= 0x00000008;
                fromTime_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional uint32 from_time = 4;</code>
             */
            public Builder clearFromTime() {
                bitField0_ = (bitField0_ & ~0x00000008);
                fromTime_ = 0;
                onChanged();
                return this;
            }

            // optional uint32 to_time = 5;
            private int toTime_;

            /**
             * <code>optional uint32 to_time = 5;</code>
             */
            public boolean hasToTime() {
                return ((bitField0_ & 0x00000010) == 0x00000010);
            }

            /**
             * <code>optional uint32 to_time = 5;</code>
             */
            public int getToTime() {
                return toTime_;
            }

            /**
             * <code>optional uint32 to_time = 5;</code>
             */
            public Builder setToTime(int value) {
                bitField0_ |= 0x00000010;
                toTime_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional uint32 to_time = 5;</code>
             */
            public Builder clearToTime() {
                bitField0_ = (bitField0_ & ~0x00000010);
                toTime_ = 0;
                onChanged();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.SensorChangeOverPeriodQuery)
        }

        static {
            defaultInstance = new SensorChangeOverPeriodQuery(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.SensorChangeOverPeriodQuery)
    }

    public interface SensorChangeOverPeriodResultOrBuilder
            extends com.google.protobuf.MessageOrBuilder {

        // optional uint32 current_block = 1;

        /**
         * <code>optional uint32 current_block = 1;</code>
         */
        boolean hasCurrentBlock();

        /**
         * <code>optional uint32 current_block = 1;</code>
         */
        int getCurrentBlock();

        // optional uint32 total_blocks = 2;

        /**
         * <code>optional uint32 total_blocks = 2;</code>
         */
        boolean hasTotalBlocks();

        /**
         * <code>optional uint32 total_blocks = 2;</code>
         */
        int getTotalBlocks();

        // repeated .almaz2.domain_objects.SensorChangeOverPeriod sensor_change_over_periods = 3;

        /**
         * <code>repeated .almaz2.domain_objects.SensorChangeOverPeriod sensor_change_over_periods = 3;</code>
         */
        java.util.List<ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriod>
        getSensorChangeOverPeriodsList();

        /**
         * <code>repeated .almaz2.domain_objects.SensorChangeOverPeriod sensor_change_over_periods = 3;</code>
         */
        ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriod getSensorChangeOverPeriods(int index);

        /**
         * <code>repeated .almaz2.domain_objects.SensorChangeOverPeriod sensor_change_over_periods = 3;</code>
         */
        int getSensorChangeOverPeriodsCount();

        /**
         * <code>repeated .almaz2.domain_objects.SensorChangeOverPeriod sensor_change_over_periods = 3;</code>
         */
        java.util.List<? extends ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriodOrBuilder>
        getSensorChangeOverPeriodsOrBuilderList();

        /**
         * <code>repeated .almaz2.domain_objects.SensorChangeOverPeriod sensor_change_over_periods = 3;</code>
         */
        ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriodOrBuilder getSensorChangeOverPeriodsOrBuilder(
                int index);
    }

    /**
     * Protobuf type {@code almaz2.rpc.commands.SensorChangeOverPeriodResult}
     */
    public static final class SensorChangeOverPeriodResult extends
            com.google.protobuf.GeneratedMessage
            implements SensorChangeOverPeriodResultOrBuilder {
        // Use SensorChangeOverPeriodResult.newBuilder() to construct.
        private SensorChangeOverPeriodResult(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private SensorChangeOverPeriodResult(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final SensorChangeOverPeriodResult defaultInstance;

        public static SensorChangeOverPeriodResult getDefaultInstance() {
            return defaultInstance;
        }

        public SensorChangeOverPeriodResult getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private SensorChangeOverPeriodResult(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            bitField0_ |= 0x00000001;
                            currentBlock_ = input.readUInt32();
                            break;
                        }
                        case 16: {
                            bitField0_ |= 0x00000002;
                            totalBlocks_ = input.readUInt32();
                            break;
                        }
                        case 26: {
                            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                                sensorChangeOverPeriods_ = new java.util.ArrayList<ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriod>();
                                mutable_bitField0_ |= 0x00000004;
                            }
                            sensorChangeOverPeriods_.add(input.readMessage(ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriod.PARSER, extensionRegistry));
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                    sensorChangeOverPeriods_ = java.util.Collections.unmodifiableList(sensorChangeOverPeriods_);
                }
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_SensorChangeOverPeriodResult_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_SensorChangeOverPeriodResult_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult.class, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult.Builder.class);
        }

        public static com.google.protobuf.Parser<SensorChangeOverPeriodResult> PARSER =
                new com.google.protobuf.AbstractParser<SensorChangeOverPeriodResult>() {
                    public SensorChangeOverPeriodResult parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new SensorChangeOverPeriodResult(input, extensionRegistry);
                    }
                };

        @java.lang.Override
        public com.google.protobuf.Parser<SensorChangeOverPeriodResult> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        // optional uint32 current_block = 1;
        public static final int CURRENT_BLOCK_FIELD_NUMBER = 1;
        private int currentBlock_;

        /**
         * <code>optional uint32 current_block = 1;</code>
         */
        public boolean hasCurrentBlock() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>optional uint32 current_block = 1;</code>
         */
        public int getCurrentBlock() {
            return currentBlock_;
        }

        // optional uint32 total_blocks = 2;
        public static final int TOTAL_BLOCKS_FIELD_NUMBER = 2;
        private int totalBlocks_;

        /**
         * <code>optional uint32 total_blocks = 2;</code>
         */
        public boolean hasTotalBlocks() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional uint32 total_blocks = 2;</code>
         */
        public int getTotalBlocks() {
            return totalBlocks_;
        }

        // repeated .almaz2.domain_objects.SensorChangeOverPeriod sensor_change_over_periods = 3;
        public static final int SENSOR_CHANGE_OVER_PERIODS_FIELD_NUMBER = 3;
        private java.util.List<ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriod> sensorChangeOverPeriods_;

        /**
         * <code>repeated .almaz2.domain_objects.SensorChangeOverPeriod sensor_change_over_periods = 3;</code>
         */
        public java.util.List<ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriod> getSensorChangeOverPeriodsList() {
            return sensorChangeOverPeriods_;
        }

        /**
         * <code>repeated .almaz2.domain_objects.SensorChangeOverPeriod sensor_change_over_periods = 3;</code>
         */
        public java.util.List<? extends ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriodOrBuilder>
        getSensorChangeOverPeriodsOrBuilderList() {
            return sensorChangeOverPeriods_;
        }

        /**
         * <code>repeated .almaz2.domain_objects.SensorChangeOverPeriod sensor_change_over_periods = 3;</code>
         */
        public int getSensorChangeOverPeriodsCount() {
            return sensorChangeOverPeriods_.size();
        }

        /**
         * <code>repeated .almaz2.domain_objects.SensorChangeOverPeriod sensor_change_over_periods = 3;</code>
         */
        public ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriod getSensorChangeOverPeriods(int index) {
            return sensorChangeOverPeriods_.get(index);
        }

        /**
         * <code>repeated .almaz2.domain_objects.SensorChangeOverPeriod sensor_change_over_periods = 3;</code>
         */
        public ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriodOrBuilder getSensorChangeOverPeriodsOrBuilder(
                int index) {
            return sensorChangeOverPeriods_.get(index);
        }

        private void initFields() {
            currentBlock_ = 0;
            totalBlocks_ = 0;
            sensorChangeOverPeriods_ = java.util.Collections.emptyList();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != -1) return isInitialized == 1;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeUInt32(1, currentBlock_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeUInt32(2, totalBlocks_);
            }
            for (int i = 0; i < sensorChangeOverPeriods_.size(); i++) {
                output.writeMessage(3, sensorChangeOverPeriods_.get(i));
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(1, currentBlock_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(2, totalBlocks_);
            }
            for (int i = 0; i < sensorChangeOverPeriods_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(3, sensorChangeOverPeriods_.get(i));
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        protected java.lang.Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code almaz2.rpc.commands.SensorChangeOverPeriodResult}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder>
                implements ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResultOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_SensorChangeOverPeriodResult_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_SensorChangeOverPeriodResult_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult.class, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult.Builder.class);
            }

            // Construct using ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                    getSensorChangeOverPeriodsFieldBuilder();
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                currentBlock_ = 0;
                bitField0_ = (bitField0_ & ~0x00000001);
                totalBlocks_ = 0;
                bitField0_ = (bitField0_ & ~0x00000002);
                if (sensorChangeOverPeriodsBuilder_ == null) {
                    sensorChangeOverPeriods_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000004);
                } else {
                    sensorChangeOverPeriodsBuilder_.clear();
                }
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_SensorChangeOverPeriodResult_descriptor;
            }

            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult getDefaultInstanceForType() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult.getDefaultInstance();
            }

            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult build() {
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult buildPartial() {
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult result = new ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.currentBlock_ = currentBlock_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.totalBlocks_ = totalBlocks_;
                if (sensorChangeOverPeriodsBuilder_ == null) {
                    if (((bitField0_ & 0x00000004) == 0x00000004)) {
                        sensorChangeOverPeriods_ = java.util.Collections.unmodifiableList(sensorChangeOverPeriods_);
                        bitField0_ = (bitField0_ & ~0x00000004);
                    }
                    result.sensorChangeOverPeriods_ = sensorChangeOverPeriods_;
                } else {
                    result.sensorChangeOverPeriods_ = sensorChangeOverPeriodsBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult) {
                    return mergeFrom((ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult other) {
                if (other == ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult.getDefaultInstance())
                    return this;
                if (other.hasCurrentBlock()) {
                    setCurrentBlock(other.getCurrentBlock());
                }
                if (other.hasTotalBlocks()) {
                    setTotalBlocks(other.getTotalBlocks());
                }
                if (sensorChangeOverPeriodsBuilder_ == null) {
                    if (!other.sensorChangeOverPeriods_.isEmpty()) {
                        if (sensorChangeOverPeriods_.isEmpty()) {
                            sensorChangeOverPeriods_ = other.sensorChangeOverPeriods_;
                            bitField0_ = (bitField0_ & ~0x00000004);
                        } else {
                            ensureSensorChangeOverPeriodsIsMutable();
                            sensorChangeOverPeriods_.addAll(other.sensorChangeOverPeriods_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.sensorChangeOverPeriods_.isEmpty()) {
                        if (sensorChangeOverPeriodsBuilder_.isEmpty()) {
                            sensorChangeOverPeriodsBuilder_.dispose();
                            sensorChangeOverPeriodsBuilder_ = null;
                            sensorChangeOverPeriods_ = other.sensorChangeOverPeriods_;
                            bitField0_ = (bitField0_ & ~0x00000004);
                            sensorChangeOverPeriodsBuilder_ =
                                    com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                                            getSensorChangeOverPeriodsFieldBuilder() : null;
                        } else {
                            sensorChangeOverPeriodsBuilder_.addAllMessages(other.sensorChangeOverPeriods_);
                        }
                    }
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            // optional uint32 current_block = 1;
            private int currentBlock_;

            /**
             * <code>optional uint32 current_block = 1;</code>
             */
            public boolean hasCurrentBlock() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>optional uint32 current_block = 1;</code>
             */
            public int getCurrentBlock() {
                return currentBlock_;
            }

            /**
             * <code>optional uint32 current_block = 1;</code>
             */
            public Builder setCurrentBlock(int value) {
                bitField0_ |= 0x00000001;
                currentBlock_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional uint32 current_block = 1;</code>
             */
            public Builder clearCurrentBlock() {
                bitField0_ = (bitField0_ & ~0x00000001);
                currentBlock_ = 0;
                onChanged();
                return this;
            }

            // optional uint32 total_blocks = 2;
            private int totalBlocks_;

            /**
             * <code>optional uint32 total_blocks = 2;</code>
             */
            public boolean hasTotalBlocks() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>optional uint32 total_blocks = 2;</code>
             */
            public int getTotalBlocks() {
                return totalBlocks_;
            }

            /**
             * <code>optional uint32 total_blocks = 2;</code>
             */
            public Builder setTotalBlocks(int value) {
                bitField0_ |= 0x00000002;
                totalBlocks_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional uint32 total_blocks = 2;</code>
             */
            public Builder clearTotalBlocks() {
                bitField0_ = (bitField0_ & ~0x00000002);
                totalBlocks_ = 0;
                onChanged();
                return this;
            }

            // repeated .almaz2.domain_objects.SensorChangeOverPeriod sensor_change_over_periods = 3;
            private java.util.List<ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriod> sensorChangeOverPeriods_ =
                    java.util.Collections.emptyList();

            private void ensureSensorChangeOverPeriodsIsMutable() {
                if (!((bitField0_ & 0x00000004) == 0x00000004)) {
                    sensorChangeOverPeriods_ = new java.util.ArrayList<ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriod>(sensorChangeOverPeriods_);
                    bitField0_ |= 0x00000004;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<
                    ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriod, ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriod.Builder, ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriodOrBuilder> sensorChangeOverPeriodsBuilder_;

            /**
             * <code>repeated .almaz2.domain_objects.SensorChangeOverPeriod sensor_change_over_periods = 3;</code>
             */
            public java.util.List<ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriod> getSensorChangeOverPeriodsList() {
                if (sensorChangeOverPeriodsBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(sensorChangeOverPeriods_);
                } else {
                    return sensorChangeOverPeriodsBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .almaz2.domain_objects.SensorChangeOverPeriod sensor_change_over_periods = 3;</code>
             */
            public int getSensorChangeOverPeriodsCount() {
                if (sensorChangeOverPeriodsBuilder_ == null) {
                    return sensorChangeOverPeriods_.size();
                } else {
                    return sensorChangeOverPeriodsBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .almaz2.domain_objects.SensorChangeOverPeriod sensor_change_over_periods = 3;</code>
             */
            public ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriod getSensorChangeOverPeriods(int index) {
                if (sensorChangeOverPeriodsBuilder_ == null) {
                    return sensorChangeOverPeriods_.get(index);
                } else {
                    return sensorChangeOverPeriodsBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .almaz2.domain_objects.SensorChangeOverPeriod sensor_change_over_periods = 3;</code>
             */
            public Builder setSensorChangeOverPeriods(
                    int index, ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriod value) {
                if (sensorChangeOverPeriodsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureSensorChangeOverPeriodsIsMutable();
                    sensorChangeOverPeriods_.set(index, value);
                    onChanged();
                } else {
                    sensorChangeOverPeriodsBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .almaz2.domain_objects.SensorChangeOverPeriod sensor_change_over_periods = 3;</code>
             */
            public Builder setSensorChangeOverPeriods(
                    int index, ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriod.Builder builderForValue) {
                if (sensorChangeOverPeriodsBuilder_ == null) {
                    ensureSensorChangeOverPeriodsIsMutable();
                    sensorChangeOverPeriods_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    sensorChangeOverPeriodsBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .almaz2.domain_objects.SensorChangeOverPeriod sensor_change_over_periods = 3;</code>
             */
            public Builder addSensorChangeOverPeriods(ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriod value) {
                if (sensorChangeOverPeriodsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureSensorChangeOverPeriodsIsMutable();
                    sensorChangeOverPeriods_.add(value);
                    onChanged();
                } else {
                    sensorChangeOverPeriodsBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <code>repeated .almaz2.domain_objects.SensorChangeOverPeriod sensor_change_over_periods = 3;</code>
             */
            public Builder addSensorChangeOverPeriods(
                    int index, ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriod value) {
                if (sensorChangeOverPeriodsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureSensorChangeOverPeriodsIsMutable();
                    sensorChangeOverPeriods_.add(index, value);
                    onChanged();
                } else {
                    sensorChangeOverPeriodsBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .almaz2.domain_objects.SensorChangeOverPeriod sensor_change_over_periods = 3;</code>
             */
            public Builder addSensorChangeOverPeriods(
                    ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriod.Builder builderForValue) {
                if (sensorChangeOverPeriodsBuilder_ == null) {
                    ensureSensorChangeOverPeriodsIsMutable();
                    sensorChangeOverPeriods_.add(builderForValue.build());
                    onChanged();
                } else {
                    sensorChangeOverPeriodsBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .almaz2.domain_objects.SensorChangeOverPeriod sensor_change_over_periods = 3;</code>
             */
            public Builder addSensorChangeOverPeriods(
                    int index, ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriod.Builder builderForValue) {
                if (sensorChangeOverPeriodsBuilder_ == null) {
                    ensureSensorChangeOverPeriodsIsMutable();
                    sensorChangeOverPeriods_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    sensorChangeOverPeriodsBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .almaz2.domain_objects.SensorChangeOverPeriod sensor_change_over_periods = 3;</code>
             */
            public Builder addAllSensorChangeOverPeriods(
                    java.lang.Iterable<? extends ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriod> values) {
                if (sensorChangeOverPeriodsBuilder_ == null) {
                    ensureSensorChangeOverPeriodsIsMutable();
                    super.addAll(values, sensorChangeOverPeriods_);
                    onChanged();
                } else {
                    sensorChangeOverPeriodsBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <code>repeated .almaz2.domain_objects.SensorChangeOverPeriod sensor_change_over_periods = 3;</code>
             */
            public Builder clearSensorChangeOverPeriods() {
                if (sensorChangeOverPeriodsBuilder_ == null) {
                    sensorChangeOverPeriods_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000004);
                    onChanged();
                } else {
                    sensorChangeOverPeriodsBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>repeated .almaz2.domain_objects.SensorChangeOverPeriod sensor_change_over_periods = 3;</code>
             */
            public Builder removeSensorChangeOverPeriods(int index) {
                if (sensorChangeOverPeriodsBuilder_ == null) {
                    ensureSensorChangeOverPeriodsIsMutable();
                    sensorChangeOverPeriods_.remove(index);
                    onChanged();
                } else {
                    sensorChangeOverPeriodsBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <code>repeated .almaz2.domain_objects.SensorChangeOverPeriod sensor_change_over_periods = 3;</code>
             */
            public ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriod.Builder getSensorChangeOverPeriodsBuilder(
                    int index) {
                return getSensorChangeOverPeriodsFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .almaz2.domain_objects.SensorChangeOverPeriod sensor_change_over_periods = 3;</code>
             */
            public ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriodOrBuilder getSensorChangeOverPeriodsOrBuilder(
                    int index) {
                if (sensorChangeOverPeriodsBuilder_ == null) {
                    return sensorChangeOverPeriods_.get(index);
                } else {
                    return sensorChangeOverPeriodsBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .almaz2.domain_objects.SensorChangeOverPeriod sensor_change_over_periods = 3;</code>
             */
            public java.util.List<? extends ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriodOrBuilder>
            getSensorChangeOverPeriodsOrBuilderList() {
                if (sensorChangeOverPeriodsBuilder_ != null) {
                    return sensorChangeOverPeriodsBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(sensorChangeOverPeriods_);
                }
            }

            /**
             * <code>repeated .almaz2.domain_objects.SensorChangeOverPeriod sensor_change_over_periods = 3;</code>
             */
            public ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriod.Builder addSensorChangeOverPeriodsBuilder() {
                return getSensorChangeOverPeriodsFieldBuilder().addBuilder(
                        ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriod.getDefaultInstance());
            }

            /**
             * <code>repeated .almaz2.domain_objects.SensorChangeOverPeriod sensor_change_over_periods = 3;</code>
             */
            public ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriod.Builder addSensorChangeOverPeriodsBuilder(
                    int index) {
                return getSensorChangeOverPeriodsFieldBuilder().addBuilder(
                        index, ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriod.getDefaultInstance());
            }

            /**
             * <code>repeated .almaz2.domain_objects.SensorChangeOverPeriod sensor_change_over_periods = 3;</code>
             */
            public java.util.List<ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriod.Builder>
            getSensorChangeOverPeriodsBuilderList() {
                return getSensorChangeOverPeriodsFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilder<
                    ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriod, ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriod.Builder, ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriodOrBuilder>
            getSensorChangeOverPeriodsFieldBuilder() {
                if (sensorChangeOverPeriodsBuilder_ == null) {
                    sensorChangeOverPeriodsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
                            ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriod, ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriod.Builder, ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.SensorChangeOverPeriodOrBuilder>(
                            sensorChangeOverPeriods_,
                            ((bitField0_ & 0x00000004) == 0x00000004),
                            getParentForChildren(),
                            isClean());
                    sensorChangeOverPeriods_ = null;
                }
                return sensorChangeOverPeriodsBuilder_;
            }

            // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.SensorChangeOverPeriodResult)
        }

        static {
            defaultInstance = new SensorChangeOverPeriodResult(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.SensorChangeOverPeriodResult)
    }

    public interface DatabaseQueryContinueOrBuilder
            extends com.google.protobuf.MessageOrBuilder {
    }

    /**
     * Protobuf type {@code almaz2.rpc.commands.DatabaseQueryContinue}
     * <p/>
     * <pre>
     * продолжить выполение запроса
     * </pre>
     */
    public static final class DatabaseQueryContinue extends
            com.google.protobuf.GeneratedMessage
            implements DatabaseQueryContinueOrBuilder {
        // Use DatabaseQueryContinue.newBuilder() to construct.
        private DatabaseQueryContinue(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private DatabaseQueryContinue(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final DatabaseQueryContinue defaultInstance;

        public static DatabaseQueryContinue getDefaultInstance() {
            return defaultInstance;
        }

        public DatabaseQueryContinue getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private DatabaseQueryContinue(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_DatabaseQueryContinue_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_DatabaseQueryContinue_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryContinue.class, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryContinue.Builder.class);
        }

        public static com.google.protobuf.Parser<DatabaseQueryContinue> PARSER =
                new com.google.protobuf.AbstractParser<DatabaseQueryContinue>() {
                    public DatabaseQueryContinue parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new DatabaseQueryContinue(input, extensionRegistry);
                    }
                };

        @java.lang.Override
        public com.google.protobuf.Parser<DatabaseQueryContinue> getParserForType() {
            return PARSER;
        }

        private void initFields() {
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != -1) return isInitialized == 1;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        protected java.lang.Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryContinue parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryContinue parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryContinue parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryContinue parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryContinue parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryContinue parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryContinue parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryContinue parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryContinue parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryContinue parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryContinue prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code almaz2.rpc.commands.DatabaseQueryContinue}
         * <p/>
         * <pre>
         * продолжить выполение запроса
         * </pre>
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder>
                implements ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryContinueOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_DatabaseQueryContinue_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_DatabaseQueryContinue_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryContinue.class, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryContinue.Builder.class);
            }

            // Construct using ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryContinue.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_DatabaseQueryContinue_descriptor;
            }

            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryContinue getDefaultInstanceForType() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryContinue.getDefaultInstance();
            }

            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryContinue build() {
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryContinue result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryContinue buildPartial() {
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryContinue result = new ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryContinue(this);
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryContinue) {
                    return mergeFrom((ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryContinue) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryContinue other) {
                if (other == ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryContinue.getDefaultInstance())
                    return this;
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryContinue parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryContinue) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.DatabaseQueryContinue)
        }

        static {
            defaultInstance = new DatabaseQueryContinue(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.DatabaseQueryContinue)
    }

    public interface DatabaseQueryCancelOrBuilder
            extends com.google.protobuf.MessageOrBuilder {
    }

    /**
     * Protobuf type {@code almaz2.rpc.commands.DatabaseQueryCancel}
     * <p/>
     * <pre>
     * отменить выполение запроса
     * </pre>
     */
    public static final class DatabaseQueryCancel extends
            com.google.protobuf.GeneratedMessage
            implements DatabaseQueryCancelOrBuilder {
        // Use DatabaseQueryCancel.newBuilder() to construct.
        private DatabaseQueryCancel(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private DatabaseQueryCancel(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final DatabaseQueryCancel defaultInstance;

        public static DatabaseQueryCancel getDefaultInstance() {
            return defaultInstance;
        }

        public DatabaseQueryCancel getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private DatabaseQueryCancel(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_DatabaseQueryCancel_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_DatabaseQueryCancel_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryCancel.class, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryCancel.Builder.class);
        }

        public static com.google.protobuf.Parser<DatabaseQueryCancel> PARSER =
                new com.google.protobuf.AbstractParser<DatabaseQueryCancel>() {
                    public DatabaseQueryCancel parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new DatabaseQueryCancel(input, extensionRegistry);
                    }
                };

        @java.lang.Override
        public com.google.protobuf.Parser<DatabaseQueryCancel> getParserForType() {
            return PARSER;
        }

        private void initFields() {
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != -1) return isInitialized == 1;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        protected java.lang.Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryCancel parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryCancel parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryCancel parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryCancel parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryCancel parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryCancel parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryCancel parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryCancel parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryCancel parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryCancel parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryCancel prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code almaz2.rpc.commands.DatabaseQueryCancel}
         * <p/>
         * <pre>
         * отменить выполение запроса
         * </pre>
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder>
                implements ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryCancelOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_DatabaseQueryCancel_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_DatabaseQueryCancel_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryCancel.class, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryCancel.Builder.class);
            }

            // Construct using ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryCancel.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_DatabaseQueryCancel_descriptor;
            }

            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryCancel getDefaultInstanceForType() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryCancel.getDefaultInstance();
            }

            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryCancel build() {
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryCancel result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryCancel buildPartial() {
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryCancel result = new ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryCancel(this);
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryCancel) {
                    return mergeFrom((ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryCancel) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryCancel other) {
                if (other == ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryCancel.getDefaultInstance())
                    return this;
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryCancel parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryCancel) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.DatabaseQueryCancel)
        }

        static {
            defaultInstance = new DatabaseQueryCancel(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.DatabaseQueryCancel)
    }

    public interface DatabaseQueryBaseOrBuilder
            extends com.google.protobuf.MessageOrBuilder {

        // optional uint32 query_id = 1;

        /**
         * <code>optional uint32 query_id = 1;</code>
         * <p/>
         * <pre>
         * &#47;/ продолжить выполение запроса, указанного в query_id
         * optional DatabaseQueryContinue continue_query = 2;
         * // отменить выполение запроса, указанного в query_id
         * optional DatabaseQueryCancel cancel_query = 3;
         * </pre>
         */
        boolean hasQueryId();

        /**
         * <code>optional uint32 query_id = 1;</code>
         * <p/>
         * <pre>
         * &#47;/ продолжить выполение запроса, указанного в query_id
         * optional DatabaseQueryContinue continue_query = 2;
         * // отменить выполение запроса, указанного в query_id
         * optional DatabaseQueryCancel cancel_query = 3;
         * </pre>
         */
        int getQueryId();

        // optional .almaz2.rpc.commands.ControlObjectStateQuery get_control_object_state = 4;

        /**
         * <code>optional .almaz2.rpc.commands.ControlObjectStateQuery get_control_object_state = 4;</code>
         * <p/>
         * <pre>
         * получить список состояний КО за определенный период
         * </pre>
         */
        boolean hasGetControlObjectState();

        /**
         * <code>optional .almaz2.rpc.commands.ControlObjectStateQuery get_control_object_state = 4;</code>
         * <p/>
         * <pre>
         * получить список состояний КО за определенный период
         * </pre>
         */
        ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery getGetControlObjectState();

        /**
         * <code>optional .almaz2.rpc.commands.ControlObjectStateQuery get_control_object_state = 4;</code>
         * <p/>
         * <pre>
         * получить список состояний КО за определенный период
         * </pre>
         */
        ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQueryOrBuilder getGetControlObjectStateOrBuilder();

        // optional .almaz2.rpc.commands.ControlElementChangeOverPeriodQuery get_control_clement_change_over_period = 5;

        /**
         * <code>optional .almaz2.rpc.commands.ControlElementChangeOverPeriodQuery get_control_clement_change_over_period = 5;</code>
         * <p/>
         * <pre>
         * получить список суммарных состояний КЕ за определенный период
         * </pre>
         */
        boolean hasGetControlClementChangeOverPeriod();

        /**
         * <code>optional .almaz2.rpc.commands.ControlElementChangeOverPeriodQuery get_control_clement_change_over_period = 5;</code>
         * <p/>
         * <pre>
         * получить список суммарных состояний КЕ за определенный период
         * </pre>
         */
        ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery getGetControlClementChangeOverPeriod();

        /**
         * <code>optional .almaz2.rpc.commands.ControlElementChangeOverPeriodQuery get_control_clement_change_over_period = 5;</code>
         * <p/>
         * <pre>
         * получить список суммарных состояний КЕ за определенный период
         * </pre>
         */
        ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQueryOrBuilder getGetControlClementChangeOverPeriodOrBuilder();

        // optional .almaz2.rpc.commands.SensorChangeOverPeriodQuery get_sensor_change_over_period = 6;

        /**
         * <code>optional .almaz2.rpc.commands.SensorChangeOverPeriodQuery get_sensor_change_over_period = 6;</code>
         * <p/>
         * <pre>
         * получить список суммарных состояний датчиков за определенный период
         * </pre>
         */
        boolean hasGetSensorChangeOverPeriod();

        /**
         * <code>optional .almaz2.rpc.commands.SensorChangeOverPeriodQuery get_sensor_change_over_period = 6;</code>
         * <p/>
         * <pre>
         * получить список суммарных состояний датчиков за определенный период
         * </pre>
         */
        ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery getGetSensorChangeOverPeriod();

        /**
         * <code>optional .almaz2.rpc.commands.SensorChangeOverPeriodQuery get_sensor_change_over_period = 6;</code>
         * <p/>
         * <pre>
         * получить список суммарных состояний датчиков за определенный период
         * </pre>
         */
        ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQueryOrBuilder getGetSensorChangeOverPeriodOrBuilder();
    }

    /**
     * Protobuf type {@code almaz2.rpc.commands.DatabaseQueryBase}
     * <p/>
     * <pre>
     * *
     * Базовое сообщение с запросом данных из БД.
     * </pre>
     */
    public static final class DatabaseQueryBase extends
            com.google.protobuf.GeneratedMessage
            implements DatabaseQueryBaseOrBuilder {
        // Use DatabaseQueryBase.newBuilder() to construct.
        private DatabaseQueryBase(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private DatabaseQueryBase(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final DatabaseQueryBase defaultInstance;

        public static DatabaseQueryBase getDefaultInstance() {
            return defaultInstance;
        }

        public DatabaseQueryBase getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private DatabaseQueryBase(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            bitField0_ |= 0x00000001;
                            queryId_ = input.readUInt32();
                            break;
                        }
                        case 34: {
                            ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                                subBuilder = getControlObjectState_.toBuilder();
                            }
                            getControlObjectState_ = input.readMessage(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(getControlObjectState_);
                                getControlObjectState_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000002;
                            break;
                        }
                        case 42: {
                            ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                                subBuilder = getControlClementChangeOverPeriod_.toBuilder();
                            }
                            getControlClementChangeOverPeriod_ = input.readMessage(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(getControlClementChangeOverPeriod_);
                                getControlClementChangeOverPeriod_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000004;
                            break;
                        }
                        case 50: {
                            ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                                subBuilder = getSensorChangeOverPeriod_.toBuilder();
                            }
                            getSensorChangeOverPeriod_ = input.readMessage(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(getSensorChangeOverPeriod_);
                                getSensorChangeOverPeriod_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000008;
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_DatabaseQueryBase_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_DatabaseQueryBase_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase.class, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase.Builder.class);
        }

        public static com.google.protobuf.Parser<DatabaseQueryBase> PARSER =
                new com.google.protobuf.AbstractParser<DatabaseQueryBase>() {
                    public DatabaseQueryBase parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new DatabaseQueryBase(input, extensionRegistry);
                    }
                };

        @java.lang.Override
        public com.google.protobuf.Parser<DatabaseQueryBase> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        // optional uint32 query_id = 1;
        public static final int QUERY_ID_FIELD_NUMBER = 1;
        private int queryId_;

        /**
         * <code>optional uint32 query_id = 1;</code>
         * <p/>
         * <pre>
         * &#47;/ продолжить выполение запроса, указанного в query_id
         * optional DatabaseQueryContinue continue_query = 2;
         * // отменить выполение запроса, указанного в query_id
         * optional DatabaseQueryCancel cancel_query = 3;
         * </pre>
         */
        public boolean hasQueryId() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>optional uint32 query_id = 1;</code>
         * <p/>
         * <pre>
         * &#47;/ продолжить выполение запроса, указанного в query_id
         * optional DatabaseQueryContinue continue_query = 2;
         * // отменить выполение запроса, указанного в query_id
         * optional DatabaseQueryCancel cancel_query = 3;
         * </pre>
         */
        public int getQueryId() {
            return queryId_;
        }

        // optional .almaz2.rpc.commands.ControlObjectStateQuery get_control_object_state = 4;
        public static final int GET_CONTROL_OBJECT_STATE_FIELD_NUMBER = 4;
        private ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery getControlObjectState_;

        /**
         * <code>optional .almaz2.rpc.commands.ControlObjectStateQuery get_control_object_state = 4;</code>
         * <p/>
         * <pre>
         * получить список состояний КО за определенный период
         * </pre>
         */
        public boolean hasGetControlObjectState() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional .almaz2.rpc.commands.ControlObjectStateQuery get_control_object_state = 4;</code>
         * <p/>
         * <pre>
         * получить список состояний КО за определенный период
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery getGetControlObjectState() {
            return getControlObjectState_;
        }

        /**
         * <code>optional .almaz2.rpc.commands.ControlObjectStateQuery get_control_object_state = 4;</code>
         * <p/>
         * <pre>
         * получить список состояний КО за определенный период
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQueryOrBuilder getGetControlObjectStateOrBuilder() {
            return getControlObjectState_;
        }

        // optional .almaz2.rpc.commands.ControlElementChangeOverPeriodQuery get_control_clement_change_over_period = 5;
        public static final int GET_CONTROL_CLEMENT_CHANGE_OVER_PERIOD_FIELD_NUMBER = 5;
        private ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery getControlClementChangeOverPeriod_;

        /**
         * <code>optional .almaz2.rpc.commands.ControlElementChangeOverPeriodQuery get_control_clement_change_over_period = 5;</code>
         * <p/>
         * <pre>
         * получить список суммарных состояний КЕ за определенный период
         * </pre>
         */
        public boolean hasGetControlClementChangeOverPeriod() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>optional .almaz2.rpc.commands.ControlElementChangeOverPeriodQuery get_control_clement_change_over_period = 5;</code>
         * <p/>
         * <pre>
         * получить список суммарных состояний КЕ за определенный период
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery getGetControlClementChangeOverPeriod() {
            return getControlClementChangeOverPeriod_;
        }

        /**
         * <code>optional .almaz2.rpc.commands.ControlElementChangeOverPeriodQuery get_control_clement_change_over_period = 5;</code>
         * <p/>
         * <pre>
         * получить список суммарных состояний КЕ за определенный период
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQueryOrBuilder getGetControlClementChangeOverPeriodOrBuilder() {
            return getControlClementChangeOverPeriod_;
        }

        // optional .almaz2.rpc.commands.SensorChangeOverPeriodQuery get_sensor_change_over_period = 6;
        public static final int GET_SENSOR_CHANGE_OVER_PERIOD_FIELD_NUMBER = 6;
        private ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery getSensorChangeOverPeriod_;

        /**
         * <code>optional .almaz2.rpc.commands.SensorChangeOverPeriodQuery get_sensor_change_over_period = 6;</code>
         * <p/>
         * <pre>
         * получить список суммарных состояний датчиков за определенный период
         * </pre>
         */
        public boolean hasGetSensorChangeOverPeriod() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }

        /**
         * <code>optional .almaz2.rpc.commands.SensorChangeOverPeriodQuery get_sensor_change_over_period = 6;</code>
         * <p/>
         * <pre>
         * получить список суммарных состояний датчиков за определенный период
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery getGetSensorChangeOverPeriod() {
            return getSensorChangeOverPeriod_;
        }

        /**
         * <code>optional .almaz2.rpc.commands.SensorChangeOverPeriodQuery get_sensor_change_over_period = 6;</code>
         * <p/>
         * <pre>
         * получить список суммарных состояний датчиков за определенный период
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQueryOrBuilder getGetSensorChangeOverPeriodOrBuilder() {
            return getSensorChangeOverPeriod_;
        }

        private void initFields() {
            queryId_ = 0;
            getControlObjectState_ = ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery.getDefaultInstance();
            getControlClementChangeOverPeriod_ = ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery.getDefaultInstance();
            getSensorChangeOverPeriod_ = ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery.getDefaultInstance();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != -1) return isInitialized == 1;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeUInt32(1, queryId_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeMessage(4, getControlObjectState_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeMessage(5, getControlClementChangeOverPeriod_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                output.writeMessage(6, getSensorChangeOverPeriod_);
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(1, queryId_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(4, getControlObjectState_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(5, getControlClementChangeOverPeriod_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(6, getSensorChangeOverPeriod_);
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        protected java.lang.Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code almaz2.rpc.commands.DatabaseQueryBase}
         * <p/>
         * <pre>
         * *
         * Базовое сообщение с запросом данных из БД.
         * </pre>
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder>
                implements ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBaseOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_DatabaseQueryBase_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_DatabaseQueryBase_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase.class, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase.Builder.class);
            }

            // Construct using ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                    getGetControlObjectStateFieldBuilder();
                    getGetControlClementChangeOverPeriodFieldBuilder();
                    getGetSensorChangeOverPeriodFieldBuilder();
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                queryId_ = 0;
                bitField0_ = (bitField0_ & ~0x00000001);
                if (getControlObjectStateBuilder_ == null) {
                    getControlObjectState_ = ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery.getDefaultInstance();
                } else {
                    getControlObjectStateBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000002);
                if (getControlClementChangeOverPeriodBuilder_ == null) {
                    getControlClementChangeOverPeriod_ = ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery.getDefaultInstance();
                } else {
                    getControlClementChangeOverPeriodBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000004);
                if (getSensorChangeOverPeriodBuilder_ == null) {
                    getSensorChangeOverPeriod_ = ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery.getDefaultInstance();
                } else {
                    getSensorChangeOverPeriodBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000008);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_DatabaseQueryBase_descriptor;
            }

            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase getDefaultInstanceForType() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase.getDefaultInstance();
            }

            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase build() {
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase buildPartial() {
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase result = new ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.queryId_ = queryId_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                if (getControlObjectStateBuilder_ == null) {
                    result.getControlObjectState_ = getControlObjectState_;
                } else {
                    result.getControlObjectState_ = getControlObjectStateBuilder_.build();
                }
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                if (getControlClementChangeOverPeriodBuilder_ == null) {
                    result.getControlClementChangeOverPeriod_ = getControlClementChangeOverPeriod_;
                } else {
                    result.getControlClementChangeOverPeriod_ = getControlClementChangeOverPeriodBuilder_.build();
                }
                if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                    to_bitField0_ |= 0x00000008;
                }
                if (getSensorChangeOverPeriodBuilder_ == null) {
                    result.getSensorChangeOverPeriod_ = getSensorChangeOverPeriod_;
                } else {
                    result.getSensorChangeOverPeriod_ = getSensorChangeOverPeriodBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase) {
                    return mergeFrom((ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase other) {
                if (other == ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase.getDefaultInstance())
                    return this;
                if (other.hasQueryId()) {
                    setQueryId(other.getQueryId());
                }
                if (other.hasGetControlObjectState()) {
                    mergeGetControlObjectState(other.getGetControlObjectState());
                }
                if (other.hasGetControlClementChangeOverPeriod()) {
                    mergeGetControlClementChangeOverPeriod(other.getGetControlClementChangeOverPeriod());
                }
                if (other.hasGetSensorChangeOverPeriod()) {
                    mergeGetSensorChangeOverPeriod(other.getGetSensorChangeOverPeriod());
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            // optional uint32 query_id = 1;
            private int queryId_;

            /**
             * <code>optional uint32 query_id = 1;</code>
             * <p/>
             * <pre>
             * &#47;/ продолжить выполение запроса, указанного в query_id
             * optional DatabaseQueryContinue continue_query = 2;
             * // отменить выполение запроса, указанного в query_id
             * optional DatabaseQueryCancel cancel_query = 3;
             * </pre>
             */
            public boolean hasQueryId() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>optional uint32 query_id = 1;</code>
             * <p/>
             * <pre>
             * &#47;/ продолжить выполение запроса, указанного в query_id
             * optional DatabaseQueryContinue continue_query = 2;
             * // отменить выполение запроса, указанного в query_id
             * optional DatabaseQueryCancel cancel_query = 3;
             * </pre>
             */
            public int getQueryId() {
                return queryId_;
            }

            /**
             * <code>optional uint32 query_id = 1;</code>
             * <p/>
             * <pre>
             * &#47;/ продолжить выполение запроса, указанного в query_id
             * optional DatabaseQueryContinue continue_query = 2;
             * // отменить выполение запроса, указанного в query_id
             * optional DatabaseQueryCancel cancel_query = 3;
             * </pre>
             */
            public Builder setQueryId(int value) {
                bitField0_ |= 0x00000001;
                queryId_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional uint32 query_id = 1;</code>
             * <p/>
             * <pre>
             * &#47;/ продолжить выполение запроса, указанного в query_id
             * optional DatabaseQueryContinue continue_query = 2;
             * // отменить выполение запроса, указанного в query_id
             * optional DatabaseQueryCancel cancel_query = 3;
             * </pre>
             */
            public Builder clearQueryId() {
                bitField0_ = (bitField0_ & ~0x00000001);
                queryId_ = 0;
                onChanged();
                return this;
            }

            // optional .almaz2.rpc.commands.ControlObjectStateQuery get_control_object_state = 4;
            private ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery getControlObjectState_ = ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery.getDefaultInstance();
            private com.google.protobuf.SingleFieldBuilder<
                    ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery.Builder, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQueryOrBuilder> getControlObjectStateBuilder_;

            /**
             * <code>optional .almaz2.rpc.commands.ControlObjectStateQuery get_control_object_state = 4;</code>
             * <p/>
             * <pre>
             * получить список состояний КО за определенный период
             * </pre>
             */
            public boolean hasGetControlObjectState() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>optional .almaz2.rpc.commands.ControlObjectStateQuery get_control_object_state = 4;</code>
             * <p/>
             * <pre>
             * получить список состояний КО за определенный период
             * </pre>
             */
            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery getGetControlObjectState() {
                if (getControlObjectStateBuilder_ == null) {
                    return getControlObjectState_;
                } else {
                    return getControlObjectStateBuilder_.getMessage();
                }
            }

            /**
             * <code>optional .almaz2.rpc.commands.ControlObjectStateQuery get_control_object_state = 4;</code>
             * <p/>
             * <pre>
             * получить список состояний КО за определенный период
             * </pre>
             */
            public Builder setGetControlObjectState(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery value) {
                if (getControlObjectStateBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    getControlObjectState_ = value;
                    onChanged();
                } else {
                    getControlObjectStateBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000002;
                return this;
            }

            /**
             * <code>optional .almaz2.rpc.commands.ControlObjectStateQuery get_control_object_state = 4;</code>
             * <p/>
             * <pre>
             * получить список состояний КО за определенный период
             * </pre>
             */
            public Builder setGetControlObjectState(
                    ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery.Builder builderForValue) {
                if (getControlObjectStateBuilder_ == null) {
                    getControlObjectState_ = builderForValue.build();
                    onChanged();
                } else {
                    getControlObjectStateBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000002;
                return this;
            }

            /**
             * <code>optional .almaz2.rpc.commands.ControlObjectStateQuery get_control_object_state = 4;</code>
             * <p/>
             * <pre>
             * получить список состояний КО за определенный период
             * </pre>
             */
            public Builder mergeGetControlObjectState(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery value) {
                if (getControlObjectStateBuilder_ == null) {
                    if (((bitField0_ & 0x00000002) == 0x00000002) &&
                            getControlObjectState_ != ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery.getDefaultInstance()) {
                        getControlObjectState_ =
                                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery.newBuilder(getControlObjectState_).mergeFrom(value).buildPartial();
                    } else {
                        getControlObjectState_ = value;
                    }
                    onChanged();
                } else {
                    getControlObjectStateBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000002;
                return this;
            }

            /**
             * <code>optional .almaz2.rpc.commands.ControlObjectStateQuery get_control_object_state = 4;</code>
             * <p/>
             * <pre>
             * получить список состояний КО за определенный период
             * </pre>
             */
            public Builder clearGetControlObjectState() {
                if (getControlObjectStateBuilder_ == null) {
                    getControlObjectState_ = ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery.getDefaultInstance();
                    onChanged();
                } else {
                    getControlObjectStateBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000002);
                return this;
            }

            /**
             * <code>optional .almaz2.rpc.commands.ControlObjectStateQuery get_control_object_state = 4;</code>
             * <p/>
             * <pre>
             * получить список состояний КО за определенный период
             * </pre>
             */
            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery.Builder getGetControlObjectStateBuilder() {
                bitField0_ |= 0x00000002;
                onChanged();
                return getGetControlObjectStateFieldBuilder().getBuilder();
            }

            /**
             * <code>optional .almaz2.rpc.commands.ControlObjectStateQuery get_control_object_state = 4;</code>
             * <p/>
             * <pre>
             * получить список состояний КО за определенный период
             * </pre>
             */
            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQueryOrBuilder getGetControlObjectStateOrBuilder() {
                if (getControlObjectStateBuilder_ != null) {
                    return getControlObjectStateBuilder_.getMessageOrBuilder();
                } else {
                    return getControlObjectState_;
                }
            }

            /**
             * <code>optional .almaz2.rpc.commands.ControlObjectStateQuery get_control_object_state = 4;</code>
             * <p/>
             * <pre>
             * получить список состояний КО за определенный период
             * </pre>
             */
            private com.google.protobuf.SingleFieldBuilder<
                    ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery.Builder, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQueryOrBuilder>
            getGetControlObjectStateFieldBuilder() {
                if (getControlObjectStateBuilder_ == null) {
                    getControlObjectStateBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                            ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQuery.Builder, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateQueryOrBuilder>(
                            getControlObjectState_,
                            getParentForChildren(),
                            isClean());
                    getControlObjectState_ = null;
                }
                return getControlObjectStateBuilder_;
            }

            // optional .almaz2.rpc.commands.ControlElementChangeOverPeriodQuery get_control_clement_change_over_period = 5;
            private ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery getControlClementChangeOverPeriod_ = ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery.getDefaultInstance();
            private com.google.protobuf.SingleFieldBuilder<
                    ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery.Builder, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQueryOrBuilder> getControlClementChangeOverPeriodBuilder_;

            /**
             * <code>optional .almaz2.rpc.commands.ControlElementChangeOverPeriodQuery get_control_clement_change_over_period = 5;</code>
             * <p/>
             * <pre>
             * получить список суммарных состояний КЕ за определенный период
             * </pre>
             */
            public boolean hasGetControlClementChangeOverPeriod() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }

            /**
             * <code>optional .almaz2.rpc.commands.ControlElementChangeOverPeriodQuery get_control_clement_change_over_period = 5;</code>
             * <p/>
             * <pre>
             * получить список суммарных состояний КЕ за определенный период
             * </pre>
             */
            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery getGetControlClementChangeOverPeriod() {
                if (getControlClementChangeOverPeriodBuilder_ == null) {
                    return getControlClementChangeOverPeriod_;
                } else {
                    return getControlClementChangeOverPeriodBuilder_.getMessage();
                }
            }

            /**
             * <code>optional .almaz2.rpc.commands.ControlElementChangeOverPeriodQuery get_control_clement_change_over_period = 5;</code>
             * <p/>
             * <pre>
             * получить список суммарных состояний КЕ за определенный период
             * </pre>
             */
            public Builder setGetControlClementChangeOverPeriod(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery value) {
                if (getControlClementChangeOverPeriodBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    getControlClementChangeOverPeriod_ = value;
                    onChanged();
                } else {
                    getControlClementChangeOverPeriodBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000004;
                return this;
            }

            /**
             * <code>optional .almaz2.rpc.commands.ControlElementChangeOverPeriodQuery get_control_clement_change_over_period = 5;</code>
             * <p/>
             * <pre>
             * получить список суммарных состояний КЕ за определенный период
             * </pre>
             */
            public Builder setGetControlClementChangeOverPeriod(
                    ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery.Builder builderForValue) {
                if (getControlClementChangeOverPeriodBuilder_ == null) {
                    getControlClementChangeOverPeriod_ = builderForValue.build();
                    onChanged();
                } else {
                    getControlClementChangeOverPeriodBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000004;
                return this;
            }

            /**
             * <code>optional .almaz2.rpc.commands.ControlElementChangeOverPeriodQuery get_control_clement_change_over_period = 5;</code>
             * <p/>
             * <pre>
             * получить список суммарных состояний КЕ за определенный период
             * </pre>
             */
            public Builder mergeGetControlClementChangeOverPeriod(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery value) {
                if (getControlClementChangeOverPeriodBuilder_ == null) {
                    if (((bitField0_ & 0x00000004) == 0x00000004) &&
                            getControlClementChangeOverPeriod_ != ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery.getDefaultInstance()) {
                        getControlClementChangeOverPeriod_ =
                                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery.newBuilder(getControlClementChangeOverPeriod_).mergeFrom(value).buildPartial();
                    } else {
                        getControlClementChangeOverPeriod_ = value;
                    }
                    onChanged();
                } else {
                    getControlClementChangeOverPeriodBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000004;
                return this;
            }

            /**
             * <code>optional .almaz2.rpc.commands.ControlElementChangeOverPeriodQuery get_control_clement_change_over_period = 5;</code>
             * <p/>
             * <pre>
             * получить список суммарных состояний КЕ за определенный период
             * </pre>
             */
            public Builder clearGetControlClementChangeOverPeriod() {
                if (getControlClementChangeOverPeriodBuilder_ == null) {
                    getControlClementChangeOverPeriod_ = ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery.getDefaultInstance();
                    onChanged();
                } else {
                    getControlClementChangeOverPeriodBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000004);
                return this;
            }

            /**
             * <code>optional .almaz2.rpc.commands.ControlElementChangeOverPeriodQuery get_control_clement_change_over_period = 5;</code>
             * <p/>
             * <pre>
             * получить список суммарных состояний КЕ за определенный период
             * </pre>
             */
            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery.Builder getGetControlClementChangeOverPeriodBuilder() {
                bitField0_ |= 0x00000004;
                onChanged();
                return getGetControlClementChangeOverPeriodFieldBuilder().getBuilder();
            }

            /**
             * <code>optional .almaz2.rpc.commands.ControlElementChangeOverPeriodQuery get_control_clement_change_over_period = 5;</code>
             * <p/>
             * <pre>
             * получить список суммарных состояний КЕ за определенный период
             * </pre>
             */
            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQueryOrBuilder getGetControlClementChangeOverPeriodOrBuilder() {
                if (getControlClementChangeOverPeriodBuilder_ != null) {
                    return getControlClementChangeOverPeriodBuilder_.getMessageOrBuilder();
                } else {
                    return getControlClementChangeOverPeriod_;
                }
            }

            /**
             * <code>optional .almaz2.rpc.commands.ControlElementChangeOverPeriodQuery get_control_clement_change_over_period = 5;</code>
             * <p/>
             * <pre>
             * получить список суммарных состояний КЕ за определенный период
             * </pre>
             */
            private com.google.protobuf.SingleFieldBuilder<
                    ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery.Builder, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQueryOrBuilder>
            getGetControlClementChangeOverPeriodFieldBuilder() {
                if (getControlClementChangeOverPeriodBuilder_ == null) {
                    getControlClementChangeOverPeriodBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                            ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQuery.Builder, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodQueryOrBuilder>(
                            getControlClementChangeOverPeriod_,
                            getParentForChildren(),
                            isClean());
                    getControlClementChangeOverPeriod_ = null;
                }
                return getControlClementChangeOverPeriodBuilder_;
            }

            // optional .almaz2.rpc.commands.SensorChangeOverPeriodQuery get_sensor_change_over_period = 6;
            private ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery getSensorChangeOverPeriod_ = ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery.getDefaultInstance();
            private com.google.protobuf.SingleFieldBuilder<
                    ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery.Builder, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQueryOrBuilder> getSensorChangeOverPeriodBuilder_;

            /**
             * <code>optional .almaz2.rpc.commands.SensorChangeOverPeriodQuery get_sensor_change_over_period = 6;</code>
             * <p/>
             * <pre>
             * получить список суммарных состояний датчиков за определенный период
             * </pre>
             */
            public boolean hasGetSensorChangeOverPeriod() {
                return ((bitField0_ & 0x00000008) == 0x00000008);
            }

            /**
             * <code>optional .almaz2.rpc.commands.SensorChangeOverPeriodQuery get_sensor_change_over_period = 6;</code>
             * <p/>
             * <pre>
             * получить список суммарных состояний датчиков за определенный период
             * </pre>
             */
            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery getGetSensorChangeOverPeriod() {
                if (getSensorChangeOverPeriodBuilder_ == null) {
                    return getSensorChangeOverPeriod_;
                } else {
                    return getSensorChangeOverPeriodBuilder_.getMessage();
                }
            }

            /**
             * <code>optional .almaz2.rpc.commands.SensorChangeOverPeriodQuery get_sensor_change_over_period = 6;</code>
             * <p/>
             * <pre>
             * получить список суммарных состояний датчиков за определенный период
             * </pre>
             */
            public Builder setGetSensorChangeOverPeriod(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery value) {
                if (getSensorChangeOverPeriodBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    getSensorChangeOverPeriod_ = value;
                    onChanged();
                } else {
                    getSensorChangeOverPeriodBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000008;
                return this;
            }

            /**
             * <code>optional .almaz2.rpc.commands.SensorChangeOverPeriodQuery get_sensor_change_over_period = 6;</code>
             * <p/>
             * <pre>
             * получить список суммарных состояний датчиков за определенный период
             * </pre>
             */
            public Builder setGetSensorChangeOverPeriod(
                    ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery.Builder builderForValue) {
                if (getSensorChangeOverPeriodBuilder_ == null) {
                    getSensorChangeOverPeriod_ = builderForValue.build();
                    onChanged();
                } else {
                    getSensorChangeOverPeriodBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000008;
                return this;
            }

            /**
             * <code>optional .almaz2.rpc.commands.SensorChangeOverPeriodQuery get_sensor_change_over_period = 6;</code>
             * <p/>
             * <pre>
             * получить список суммарных состояний датчиков за определенный период
             * </pre>
             */
            public Builder mergeGetSensorChangeOverPeriod(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery value) {
                if (getSensorChangeOverPeriodBuilder_ == null) {
                    if (((bitField0_ & 0x00000008) == 0x00000008) &&
                            getSensorChangeOverPeriod_ != ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery.getDefaultInstance()) {
                        getSensorChangeOverPeriod_ =
                                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery.newBuilder(getSensorChangeOverPeriod_).mergeFrom(value).buildPartial();
                    } else {
                        getSensorChangeOverPeriod_ = value;
                    }
                    onChanged();
                } else {
                    getSensorChangeOverPeriodBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000008;
                return this;
            }

            /**
             * <code>optional .almaz2.rpc.commands.SensorChangeOverPeriodQuery get_sensor_change_over_period = 6;</code>
             * <p/>
             * <pre>
             * получить список суммарных состояний датчиков за определенный период
             * </pre>
             */
            public Builder clearGetSensorChangeOverPeriod() {
                if (getSensorChangeOverPeriodBuilder_ == null) {
                    getSensorChangeOverPeriod_ = ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery.getDefaultInstance();
                    onChanged();
                } else {
                    getSensorChangeOverPeriodBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000008);
                return this;
            }

            /**
             * <code>optional .almaz2.rpc.commands.SensorChangeOverPeriodQuery get_sensor_change_over_period = 6;</code>
             * <p/>
             * <pre>
             * получить список суммарных состояний датчиков за определенный период
             * </pre>
             */
            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery.Builder getGetSensorChangeOverPeriodBuilder() {
                bitField0_ |= 0x00000008;
                onChanged();
                return getGetSensorChangeOverPeriodFieldBuilder().getBuilder();
            }

            /**
             * <code>optional .almaz2.rpc.commands.SensorChangeOverPeriodQuery get_sensor_change_over_period = 6;</code>
             * <p/>
             * <pre>
             * получить список суммарных состояний датчиков за определенный период
             * </pre>
             */
            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQueryOrBuilder getGetSensorChangeOverPeriodOrBuilder() {
                if (getSensorChangeOverPeriodBuilder_ != null) {
                    return getSensorChangeOverPeriodBuilder_.getMessageOrBuilder();
                } else {
                    return getSensorChangeOverPeriod_;
                }
            }

            /**
             * <code>optional .almaz2.rpc.commands.SensorChangeOverPeriodQuery get_sensor_change_over_period = 6;</code>
             * <p/>
             * <pre>
             * получить список суммарных состояний датчиков за определенный период
             * </pre>
             */
            private com.google.protobuf.SingleFieldBuilder<
                    ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery.Builder, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQueryOrBuilder>
            getGetSensorChangeOverPeriodFieldBuilder() {
                if (getSensorChangeOverPeriodBuilder_ == null) {
                    getSensorChangeOverPeriodBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                            ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQuery.Builder, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodQueryOrBuilder>(
                            getSensorChangeOverPeriod_,
                            getParentForChildren(),
                            isClean());
                    getSensorChangeOverPeriod_ = null;
                }
                return getSensorChangeOverPeriodBuilder_;
            }

            // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.DatabaseQueryBase)
        }

        static {
            defaultInstance = new DatabaseQueryBase(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.DatabaseQueryBase)
    }

    public interface DatabaseResultBaseOrBuilder
            extends com.google.protobuf.MessageOrBuilder {

        // optional uint32 query_id = 1;

        /**
         * <code>optional uint32 query_id = 1;</code>
         */
        boolean hasQueryId();

        /**
         * <code>optional uint32 query_id = 1;</code>
         */
        int getQueryId();

        // optional .almaz2.rpc.commands.ControlObjectStateResult get_control_object_state_result = 2;

        /**
         * <code>optional .almaz2.rpc.commands.ControlObjectStateResult get_control_object_state_result = 2;</code>
         */
        boolean hasGetControlObjectStateResult();

        /**
         * <code>optional .almaz2.rpc.commands.ControlObjectStateResult get_control_object_state_result = 2;</code>
         */
        ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult getGetControlObjectStateResult();

        /**
         * <code>optional .almaz2.rpc.commands.ControlObjectStateResult get_control_object_state_result = 2;</code>
         */
        ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResultOrBuilder getGetControlObjectStateResultOrBuilder();

        // optional .almaz2.rpc.commands.ControlElementChangeOverPeriodResult get_control_clement_change_over_period_result = 5;

        /**
         * <code>optional .almaz2.rpc.commands.ControlElementChangeOverPeriodResult get_control_clement_change_over_period_result = 5;</code>
         */
        boolean hasGetControlClementChangeOverPeriodResult();

        /**
         * <code>optional .almaz2.rpc.commands.ControlElementChangeOverPeriodResult get_control_clement_change_over_period_result = 5;</code>
         */
        ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult getGetControlClementChangeOverPeriodResult();

        /**
         * <code>optional .almaz2.rpc.commands.ControlElementChangeOverPeriodResult get_control_clement_change_over_period_result = 5;</code>
         */
        ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResultOrBuilder getGetControlClementChangeOverPeriodResultOrBuilder();

        // optional .almaz2.rpc.commands.SensorChangeOverPeriodResult get_sensor_change_over_period_result = 6;

        /**
         * <code>optional .almaz2.rpc.commands.SensorChangeOverPeriodResult get_sensor_change_over_period_result = 6;</code>
         */
        boolean hasGetSensorChangeOverPeriodResult();

        /**
         * <code>optional .almaz2.rpc.commands.SensorChangeOverPeriodResult get_sensor_change_over_period_result = 6;</code>
         */
        ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult getGetSensorChangeOverPeriodResult();

        /**
         * <code>optional .almaz2.rpc.commands.SensorChangeOverPeriodResult get_sensor_change_over_period_result = 6;</code>
         */
        ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResultOrBuilder getGetSensorChangeOverPeriodResultOrBuilder();
    }

    /**
     * Protobuf type {@code almaz2.rpc.commands.DatabaseResultBase}
     * <p/>
     * <pre>
     * *
     * Базовое сообщение с результатом запроса из БД.
     * </pre>
     */
    public static final class DatabaseResultBase extends
            com.google.protobuf.GeneratedMessage
            implements DatabaseResultBaseOrBuilder {
        // Use DatabaseResultBase.newBuilder() to construct.
        private DatabaseResultBase(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private DatabaseResultBase(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final DatabaseResultBase defaultInstance;

        public static DatabaseResultBase getDefaultInstance() {
            return defaultInstance;
        }

        public DatabaseResultBase getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private DatabaseResultBase(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            bitField0_ |= 0x00000001;
                            queryId_ = input.readUInt32();
                            break;
                        }
                        case 18: {
                            ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                                subBuilder = getControlObjectStateResult_.toBuilder();
                            }
                            getControlObjectStateResult_ = input.readMessage(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(getControlObjectStateResult_);
                                getControlObjectStateResult_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000002;
                            break;
                        }
                        case 42: {
                            ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                                subBuilder = getControlClementChangeOverPeriodResult_.toBuilder();
                            }
                            getControlClementChangeOverPeriodResult_ = input.readMessage(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(getControlClementChangeOverPeriodResult_);
                                getControlClementChangeOverPeriodResult_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000004;
                            break;
                        }
                        case 50: {
                            ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                                subBuilder = getSensorChangeOverPeriodResult_.toBuilder();
                            }
                            getSensorChangeOverPeriodResult_ = input.readMessage(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(getSensorChangeOverPeriodResult_);
                                getSensorChangeOverPeriodResult_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000008;
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_DatabaseResultBase_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_DatabaseResultBase_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase.class, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase.Builder.class);
        }

        public static com.google.protobuf.Parser<DatabaseResultBase> PARSER =
                new com.google.protobuf.AbstractParser<DatabaseResultBase>() {
                    public DatabaseResultBase parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new DatabaseResultBase(input, extensionRegistry);
                    }
                };

        @java.lang.Override
        public com.google.protobuf.Parser<DatabaseResultBase> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        // optional uint32 query_id = 1;
        public static final int QUERY_ID_FIELD_NUMBER = 1;
        private int queryId_;

        /**
         * <code>optional uint32 query_id = 1;</code>
         */
        public boolean hasQueryId() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>optional uint32 query_id = 1;</code>
         */
        public int getQueryId() {
            return queryId_;
        }

        // optional .almaz2.rpc.commands.ControlObjectStateResult get_control_object_state_result = 2;
        public static final int GET_CONTROL_OBJECT_STATE_RESULT_FIELD_NUMBER = 2;
        private ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult getControlObjectStateResult_;

        /**
         * <code>optional .almaz2.rpc.commands.ControlObjectStateResult get_control_object_state_result = 2;</code>
         */
        public boolean hasGetControlObjectStateResult() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional .almaz2.rpc.commands.ControlObjectStateResult get_control_object_state_result = 2;</code>
         */
        public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult getGetControlObjectStateResult() {
            return getControlObjectStateResult_;
        }

        /**
         * <code>optional .almaz2.rpc.commands.ControlObjectStateResult get_control_object_state_result = 2;</code>
         */
        public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResultOrBuilder getGetControlObjectStateResultOrBuilder() {
            return getControlObjectStateResult_;
        }

        // optional .almaz2.rpc.commands.ControlElementChangeOverPeriodResult get_control_clement_change_over_period_result = 5;
        public static final int GET_CONTROL_CLEMENT_CHANGE_OVER_PERIOD_RESULT_FIELD_NUMBER = 5;
        private ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult getControlClementChangeOverPeriodResult_;

        /**
         * <code>optional .almaz2.rpc.commands.ControlElementChangeOverPeriodResult get_control_clement_change_over_period_result = 5;</code>
         */
        public boolean hasGetControlClementChangeOverPeriodResult() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>optional .almaz2.rpc.commands.ControlElementChangeOverPeriodResult get_control_clement_change_over_period_result = 5;</code>
         */
        public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult getGetControlClementChangeOverPeriodResult() {
            return getControlClementChangeOverPeriodResult_;
        }

        /**
         * <code>optional .almaz2.rpc.commands.ControlElementChangeOverPeriodResult get_control_clement_change_over_period_result = 5;</code>
         */
        public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResultOrBuilder getGetControlClementChangeOverPeriodResultOrBuilder() {
            return getControlClementChangeOverPeriodResult_;
        }

        // optional .almaz2.rpc.commands.SensorChangeOverPeriodResult get_sensor_change_over_period_result = 6;
        public static final int GET_SENSOR_CHANGE_OVER_PERIOD_RESULT_FIELD_NUMBER = 6;
        private ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult getSensorChangeOverPeriodResult_;

        /**
         * <code>optional .almaz2.rpc.commands.SensorChangeOverPeriodResult get_sensor_change_over_period_result = 6;</code>
         */
        public boolean hasGetSensorChangeOverPeriodResult() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }

        /**
         * <code>optional .almaz2.rpc.commands.SensorChangeOverPeriodResult get_sensor_change_over_period_result = 6;</code>
         */
        public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult getGetSensorChangeOverPeriodResult() {
            return getSensorChangeOverPeriodResult_;
        }

        /**
         * <code>optional .almaz2.rpc.commands.SensorChangeOverPeriodResult get_sensor_change_over_period_result = 6;</code>
         */
        public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResultOrBuilder getGetSensorChangeOverPeriodResultOrBuilder() {
            return getSensorChangeOverPeriodResult_;
        }

        private void initFields() {
            queryId_ = 0;
            getControlObjectStateResult_ = ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult.getDefaultInstance();
            getControlClementChangeOverPeriodResult_ = ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult.getDefaultInstance();
            getSensorChangeOverPeriodResult_ = ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult.getDefaultInstance();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != -1) return isInitialized == 1;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeUInt32(1, queryId_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeMessage(2, getControlObjectStateResult_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeMessage(5, getControlClementChangeOverPeriodResult_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                output.writeMessage(6, getSensorChangeOverPeriodResult_);
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(1, queryId_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(2, getControlObjectStateResult_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(5, getControlClementChangeOverPeriodResult_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(6, getSensorChangeOverPeriodResult_);
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        protected java.lang.Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code almaz2.rpc.commands.DatabaseResultBase}
         * <p/>
         * <pre>
         * *
         * Базовое сообщение с результатом запроса из БД.
         * </pre>
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder>
                implements ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBaseOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_DatabaseResultBase_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_DatabaseResultBase_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase.class, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase.Builder.class);
            }

            // Construct using ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                    getGetControlObjectStateResultFieldBuilder();
                    getGetControlClementChangeOverPeriodResultFieldBuilder();
                    getGetSensorChangeOverPeriodResultFieldBuilder();
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                queryId_ = 0;
                bitField0_ = (bitField0_ & ~0x00000001);
                if (getControlObjectStateResultBuilder_ == null) {
                    getControlObjectStateResult_ = ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult.getDefaultInstance();
                } else {
                    getControlObjectStateResultBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000002);
                if (getControlClementChangeOverPeriodResultBuilder_ == null) {
                    getControlClementChangeOverPeriodResult_ = ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult.getDefaultInstance();
                } else {
                    getControlClementChangeOverPeriodResultBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000004);
                if (getSensorChangeOverPeriodResultBuilder_ == null) {
                    getSensorChangeOverPeriodResult_ = ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult.getDefaultInstance();
                } else {
                    getSensorChangeOverPeriodResultBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000008);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.internal_static_almaz2_rpc_commands_DatabaseResultBase_descriptor;
            }

            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase getDefaultInstanceForType() {
                return ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase.getDefaultInstance();
            }

            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase build() {
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase buildPartial() {
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase result = new ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.queryId_ = queryId_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                if (getControlObjectStateResultBuilder_ == null) {
                    result.getControlObjectStateResult_ = getControlObjectStateResult_;
                } else {
                    result.getControlObjectStateResult_ = getControlObjectStateResultBuilder_.build();
                }
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                if (getControlClementChangeOverPeriodResultBuilder_ == null) {
                    result.getControlClementChangeOverPeriodResult_ = getControlClementChangeOverPeriodResult_;
                } else {
                    result.getControlClementChangeOverPeriodResult_ = getControlClementChangeOverPeriodResultBuilder_.build();
                }
                if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                    to_bitField0_ |= 0x00000008;
                }
                if (getSensorChangeOverPeriodResultBuilder_ == null) {
                    result.getSensorChangeOverPeriodResult_ = getSensorChangeOverPeriodResult_;
                } else {
                    result.getSensorChangeOverPeriodResult_ = getSensorChangeOverPeriodResultBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase) {
                    return mergeFrom((ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase other) {
                if (other == ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase.getDefaultInstance())
                    return this;
                if (other.hasQueryId()) {
                    setQueryId(other.getQueryId());
                }
                if (other.hasGetControlObjectStateResult()) {
                    mergeGetControlObjectStateResult(other.getGetControlObjectStateResult());
                }
                if (other.hasGetControlClementChangeOverPeriodResult()) {
                    mergeGetControlClementChangeOverPeriodResult(other.getGetControlClementChangeOverPeriodResult());
                }
                if (other.hasGetSensorChangeOverPeriodResult()) {
                    mergeGetSensorChangeOverPeriodResult(other.getGetSensorChangeOverPeriodResult());
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            // optional uint32 query_id = 1;
            private int queryId_;

            /**
             * <code>optional uint32 query_id = 1;</code>
             */
            public boolean hasQueryId() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>optional uint32 query_id = 1;</code>
             */
            public int getQueryId() {
                return queryId_;
            }

            /**
             * <code>optional uint32 query_id = 1;</code>
             */
            public Builder setQueryId(int value) {
                bitField0_ |= 0x00000001;
                queryId_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional uint32 query_id = 1;</code>
             */
            public Builder clearQueryId() {
                bitField0_ = (bitField0_ & ~0x00000001);
                queryId_ = 0;
                onChanged();
                return this;
            }

            // optional .almaz2.rpc.commands.ControlObjectStateResult get_control_object_state_result = 2;
            private ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult getControlObjectStateResult_ = ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult.getDefaultInstance();
            private com.google.protobuf.SingleFieldBuilder<
                    ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult.Builder, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResultOrBuilder> getControlObjectStateResultBuilder_;

            /**
             * <code>optional .almaz2.rpc.commands.ControlObjectStateResult get_control_object_state_result = 2;</code>
             */
            public boolean hasGetControlObjectStateResult() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>optional .almaz2.rpc.commands.ControlObjectStateResult get_control_object_state_result = 2;</code>
             */
            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult getGetControlObjectStateResult() {
                if (getControlObjectStateResultBuilder_ == null) {
                    return getControlObjectStateResult_;
                } else {
                    return getControlObjectStateResultBuilder_.getMessage();
                }
            }

            /**
             * <code>optional .almaz2.rpc.commands.ControlObjectStateResult get_control_object_state_result = 2;</code>
             */
            public Builder setGetControlObjectStateResult(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult value) {
                if (getControlObjectStateResultBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    getControlObjectStateResult_ = value;
                    onChanged();
                } else {
                    getControlObjectStateResultBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000002;
                return this;
            }

            /**
             * <code>optional .almaz2.rpc.commands.ControlObjectStateResult get_control_object_state_result = 2;</code>
             */
            public Builder setGetControlObjectStateResult(
                    ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult.Builder builderForValue) {
                if (getControlObjectStateResultBuilder_ == null) {
                    getControlObjectStateResult_ = builderForValue.build();
                    onChanged();
                } else {
                    getControlObjectStateResultBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000002;
                return this;
            }

            /**
             * <code>optional .almaz2.rpc.commands.ControlObjectStateResult get_control_object_state_result = 2;</code>
             */
            public Builder mergeGetControlObjectStateResult(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult value) {
                if (getControlObjectStateResultBuilder_ == null) {
                    if (((bitField0_ & 0x00000002) == 0x00000002) &&
                            getControlObjectStateResult_ != ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult.getDefaultInstance()) {
                        getControlObjectStateResult_ =
                                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult.newBuilder(getControlObjectStateResult_).mergeFrom(value).buildPartial();
                    } else {
                        getControlObjectStateResult_ = value;
                    }
                    onChanged();
                } else {
                    getControlObjectStateResultBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000002;
                return this;
            }

            /**
             * <code>optional .almaz2.rpc.commands.ControlObjectStateResult get_control_object_state_result = 2;</code>
             */
            public Builder clearGetControlObjectStateResult() {
                if (getControlObjectStateResultBuilder_ == null) {
                    getControlObjectStateResult_ = ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult.getDefaultInstance();
                    onChanged();
                } else {
                    getControlObjectStateResultBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000002);
                return this;
            }

            /**
             * <code>optional .almaz2.rpc.commands.ControlObjectStateResult get_control_object_state_result = 2;</code>
             */
            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult.Builder getGetControlObjectStateResultBuilder() {
                bitField0_ |= 0x00000002;
                onChanged();
                return getGetControlObjectStateResultFieldBuilder().getBuilder();
            }

            /**
             * <code>optional .almaz2.rpc.commands.ControlObjectStateResult get_control_object_state_result = 2;</code>
             */
            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResultOrBuilder getGetControlObjectStateResultOrBuilder() {
                if (getControlObjectStateResultBuilder_ != null) {
                    return getControlObjectStateResultBuilder_.getMessageOrBuilder();
                } else {
                    return getControlObjectStateResult_;
                }
            }

            /**
             * <code>optional .almaz2.rpc.commands.ControlObjectStateResult get_control_object_state_result = 2;</code>
             */
            private com.google.protobuf.SingleFieldBuilder<
                    ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult.Builder, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResultOrBuilder>
            getGetControlObjectStateResultFieldBuilder() {
                if (getControlObjectStateResultBuilder_ == null) {
                    getControlObjectStateResultBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                            ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResult.Builder, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlObjectStateResultOrBuilder>(
                            getControlObjectStateResult_,
                            getParentForChildren(),
                            isClean());
                    getControlObjectStateResult_ = null;
                }
                return getControlObjectStateResultBuilder_;
            }

            // optional .almaz2.rpc.commands.ControlElementChangeOverPeriodResult get_control_clement_change_over_period_result = 5;
            private ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult getControlClementChangeOverPeriodResult_ = ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult.getDefaultInstance();
            private com.google.protobuf.SingleFieldBuilder<
                    ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult.Builder, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResultOrBuilder> getControlClementChangeOverPeriodResultBuilder_;

            /**
             * <code>optional .almaz2.rpc.commands.ControlElementChangeOverPeriodResult get_control_clement_change_over_period_result = 5;</code>
             */
            public boolean hasGetControlClementChangeOverPeriodResult() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }

            /**
             * <code>optional .almaz2.rpc.commands.ControlElementChangeOverPeriodResult get_control_clement_change_over_period_result = 5;</code>
             */
            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult getGetControlClementChangeOverPeriodResult() {
                if (getControlClementChangeOverPeriodResultBuilder_ == null) {
                    return getControlClementChangeOverPeriodResult_;
                } else {
                    return getControlClementChangeOverPeriodResultBuilder_.getMessage();
                }
            }

            /**
             * <code>optional .almaz2.rpc.commands.ControlElementChangeOverPeriodResult get_control_clement_change_over_period_result = 5;</code>
             */
            public Builder setGetControlClementChangeOverPeriodResult(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult value) {
                if (getControlClementChangeOverPeriodResultBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    getControlClementChangeOverPeriodResult_ = value;
                    onChanged();
                } else {
                    getControlClementChangeOverPeriodResultBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000004;
                return this;
            }

            /**
             * <code>optional .almaz2.rpc.commands.ControlElementChangeOverPeriodResult get_control_clement_change_over_period_result = 5;</code>
             */
            public Builder setGetControlClementChangeOverPeriodResult(
                    ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult.Builder builderForValue) {
                if (getControlClementChangeOverPeriodResultBuilder_ == null) {
                    getControlClementChangeOverPeriodResult_ = builderForValue.build();
                    onChanged();
                } else {
                    getControlClementChangeOverPeriodResultBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000004;
                return this;
            }

            /**
             * <code>optional .almaz2.rpc.commands.ControlElementChangeOverPeriodResult get_control_clement_change_over_period_result = 5;</code>
             */
            public Builder mergeGetControlClementChangeOverPeriodResult(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult value) {
                if (getControlClementChangeOverPeriodResultBuilder_ == null) {
                    if (((bitField0_ & 0x00000004) == 0x00000004) &&
                            getControlClementChangeOverPeriodResult_ != ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult.getDefaultInstance()) {
                        getControlClementChangeOverPeriodResult_ =
                                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult.newBuilder(getControlClementChangeOverPeriodResult_).mergeFrom(value).buildPartial();
                    } else {
                        getControlClementChangeOverPeriodResult_ = value;
                    }
                    onChanged();
                } else {
                    getControlClementChangeOverPeriodResultBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000004;
                return this;
            }

            /**
             * <code>optional .almaz2.rpc.commands.ControlElementChangeOverPeriodResult get_control_clement_change_over_period_result = 5;</code>
             */
            public Builder clearGetControlClementChangeOverPeriodResult() {
                if (getControlClementChangeOverPeriodResultBuilder_ == null) {
                    getControlClementChangeOverPeriodResult_ = ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult.getDefaultInstance();
                    onChanged();
                } else {
                    getControlClementChangeOverPeriodResultBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000004);
                return this;
            }

            /**
             * <code>optional .almaz2.rpc.commands.ControlElementChangeOverPeriodResult get_control_clement_change_over_period_result = 5;</code>
             */
            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult.Builder getGetControlClementChangeOverPeriodResultBuilder() {
                bitField0_ |= 0x00000004;
                onChanged();
                return getGetControlClementChangeOverPeriodResultFieldBuilder().getBuilder();
            }

            /**
             * <code>optional .almaz2.rpc.commands.ControlElementChangeOverPeriodResult get_control_clement_change_over_period_result = 5;</code>
             */
            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResultOrBuilder getGetControlClementChangeOverPeriodResultOrBuilder() {
                if (getControlClementChangeOverPeriodResultBuilder_ != null) {
                    return getControlClementChangeOverPeriodResultBuilder_.getMessageOrBuilder();
                } else {
                    return getControlClementChangeOverPeriodResult_;
                }
            }

            /**
             * <code>optional .almaz2.rpc.commands.ControlElementChangeOverPeriodResult get_control_clement_change_over_period_result = 5;</code>
             */
            private com.google.protobuf.SingleFieldBuilder<
                    ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult.Builder, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResultOrBuilder>
            getGetControlClementChangeOverPeriodResultFieldBuilder() {
                if (getControlClementChangeOverPeriodResultBuilder_ == null) {
                    getControlClementChangeOverPeriodResultBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                            ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResult.Builder, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.ControlElementChangeOverPeriodResultOrBuilder>(
                            getControlClementChangeOverPeriodResult_,
                            getParentForChildren(),
                            isClean());
                    getControlClementChangeOverPeriodResult_ = null;
                }
                return getControlClementChangeOverPeriodResultBuilder_;
            }

            // optional .almaz2.rpc.commands.SensorChangeOverPeriodResult get_sensor_change_over_period_result = 6;
            private ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult getSensorChangeOverPeriodResult_ = ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult.getDefaultInstance();
            private com.google.protobuf.SingleFieldBuilder<
                    ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult.Builder, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResultOrBuilder> getSensorChangeOverPeriodResultBuilder_;

            /**
             * <code>optional .almaz2.rpc.commands.SensorChangeOverPeriodResult get_sensor_change_over_period_result = 6;</code>
             */
            public boolean hasGetSensorChangeOverPeriodResult() {
                return ((bitField0_ & 0x00000008) == 0x00000008);
            }

            /**
             * <code>optional .almaz2.rpc.commands.SensorChangeOverPeriodResult get_sensor_change_over_period_result = 6;</code>
             */
            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult getGetSensorChangeOverPeriodResult() {
                if (getSensorChangeOverPeriodResultBuilder_ == null) {
                    return getSensorChangeOverPeriodResult_;
                } else {
                    return getSensorChangeOverPeriodResultBuilder_.getMessage();
                }
            }

            /**
             * <code>optional .almaz2.rpc.commands.SensorChangeOverPeriodResult get_sensor_change_over_period_result = 6;</code>
             */
            public Builder setGetSensorChangeOverPeriodResult(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult value) {
                if (getSensorChangeOverPeriodResultBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    getSensorChangeOverPeriodResult_ = value;
                    onChanged();
                } else {
                    getSensorChangeOverPeriodResultBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000008;
                return this;
            }

            /**
             * <code>optional .almaz2.rpc.commands.SensorChangeOverPeriodResult get_sensor_change_over_period_result = 6;</code>
             */
            public Builder setGetSensorChangeOverPeriodResult(
                    ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult.Builder builderForValue) {
                if (getSensorChangeOverPeriodResultBuilder_ == null) {
                    getSensorChangeOverPeriodResult_ = builderForValue.build();
                    onChanged();
                } else {
                    getSensorChangeOverPeriodResultBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000008;
                return this;
            }

            /**
             * <code>optional .almaz2.rpc.commands.SensorChangeOverPeriodResult get_sensor_change_over_period_result = 6;</code>
             */
            public Builder mergeGetSensorChangeOverPeriodResult(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult value) {
                if (getSensorChangeOverPeriodResultBuilder_ == null) {
                    if (((bitField0_ & 0x00000008) == 0x00000008) &&
                            getSensorChangeOverPeriodResult_ != ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult.getDefaultInstance()) {
                        getSensorChangeOverPeriodResult_ =
                                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult.newBuilder(getSensorChangeOverPeriodResult_).mergeFrom(value).buildPartial();
                    } else {
                        getSensorChangeOverPeriodResult_ = value;
                    }
                    onChanged();
                } else {
                    getSensorChangeOverPeriodResultBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000008;
                return this;
            }

            /**
             * <code>optional .almaz2.rpc.commands.SensorChangeOverPeriodResult get_sensor_change_over_period_result = 6;</code>
             */
            public Builder clearGetSensorChangeOverPeriodResult() {
                if (getSensorChangeOverPeriodResultBuilder_ == null) {
                    getSensorChangeOverPeriodResult_ = ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult.getDefaultInstance();
                    onChanged();
                } else {
                    getSensorChangeOverPeriodResultBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000008);
                return this;
            }

            /**
             * <code>optional .almaz2.rpc.commands.SensorChangeOverPeriodResult get_sensor_change_over_period_result = 6;</code>
             */
            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult.Builder getGetSensorChangeOverPeriodResultBuilder() {
                bitField0_ |= 0x00000008;
                onChanged();
                return getGetSensorChangeOverPeriodResultFieldBuilder().getBuilder();
            }

            /**
             * <code>optional .almaz2.rpc.commands.SensorChangeOverPeriodResult get_sensor_change_over_period_result = 6;</code>
             */
            public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResultOrBuilder getGetSensorChangeOverPeriodResultOrBuilder() {
                if (getSensorChangeOverPeriodResultBuilder_ != null) {
                    return getSensorChangeOverPeriodResultBuilder_.getMessageOrBuilder();
                } else {
                    return getSensorChangeOverPeriodResult_;
                }
            }

            /**
             * <code>optional .almaz2.rpc.commands.SensorChangeOverPeriodResult get_sensor_change_over_period_result = 6;</code>
             */
            private com.google.protobuf.SingleFieldBuilder<
                    ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult.Builder, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResultOrBuilder>
            getGetSensorChangeOverPeriodResultFieldBuilder() {
                if (getSensorChangeOverPeriodResultBuilder_ == null) {
                    getSensorChangeOverPeriodResultBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                            ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResult.Builder, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.SensorChangeOverPeriodResultOrBuilder>(
                            getSensorChangeOverPeriodResult_,
                            getParentForChildren(),
                            isClean());
                    getSensorChangeOverPeriodResult_ = null;
                }
                return getSensorChangeOverPeriodResultBuilder_;
            }

            // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.DatabaseResultBase)
        }

        static {
            defaultInstance = new DatabaseResultBase(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.DatabaseResultBase)
    }

    private static com.google.protobuf.Descriptors.Descriptor
            internal_static_almaz2_rpc_commands_ControlObjectStateQuery_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_almaz2_rpc_commands_ControlObjectStateQuery_fieldAccessorTable;
    private static com.google.protobuf.Descriptors.Descriptor
            internal_static_almaz2_rpc_commands_ControlObjectStateResult_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_almaz2_rpc_commands_ControlObjectStateResult_fieldAccessorTable;
    private static com.google.protobuf.Descriptors.Descriptor
            internal_static_almaz2_rpc_commands_ControlElementChangeOverPeriodQuery_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_almaz2_rpc_commands_ControlElementChangeOverPeriodQuery_fieldAccessorTable;
    private static com.google.protobuf.Descriptors.Descriptor
            internal_static_almaz2_rpc_commands_ControlElementChangeOverPeriodResult_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_almaz2_rpc_commands_ControlElementChangeOverPeriodResult_fieldAccessorTable;
    private static com.google.protobuf.Descriptors.Descriptor
            internal_static_almaz2_rpc_commands_SensorChangeOverPeriodQuery_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_almaz2_rpc_commands_SensorChangeOverPeriodQuery_fieldAccessorTable;
    private static com.google.protobuf.Descriptors.Descriptor
            internal_static_almaz2_rpc_commands_SensorChangeOverPeriodResult_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_almaz2_rpc_commands_SensorChangeOverPeriodResult_fieldAccessorTable;
    private static com.google.protobuf.Descriptors.Descriptor
            internal_static_almaz2_rpc_commands_DatabaseQueryContinue_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_almaz2_rpc_commands_DatabaseQueryContinue_fieldAccessorTable;
    private static com.google.protobuf.Descriptors.Descriptor
            internal_static_almaz2_rpc_commands_DatabaseQueryCancel_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_almaz2_rpc_commands_DatabaseQueryCancel_fieldAccessorTable;
    private static com.google.protobuf.Descriptors.Descriptor
            internal_static_almaz2_rpc_commands_DatabaseQueryBase_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_almaz2_rpc_commands_DatabaseQueryBase_fieldAccessorTable;
    private static com.google.protobuf.Descriptors.Descriptor
            internal_static_almaz2_rpc_commands_DatabaseResultBase_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_almaz2_rpc_commands_DatabaseResultBase_fieldAccessorTable;

    public static com.google.protobuf.Descriptors.FileDescriptor
    getDescriptor() {
        return descriptor;
    }

    private static com.google.protobuf.Descriptors.FileDescriptor
            descriptor;

    static {
        java.lang.String[] descriptorData = {
                "\n\027database_commands.proto\022\023almaz2.rpc.co" +
                        "mmands\032\032control_object_state.proto\032\'cont" +
                        "rol_object_change_over_period.proto\"X\n\027C" +
                        "ontrolObjectStateQuery\022\031\n\021control_object" +
                        "_id\030\001 \001(\r\022\021\n\tfrom_time\030\002 \001(\r\022\017\n\007to_time\030" +
                        "\003 \001(\r\"\221\001\n\030ControlObjectStateResult\022\025\n\rcu" +
                        "rrent_block\030\001 \001(\r\022\024\n\014total_blocks\030\002 \001(\r\022" +
                        "H\n\025control_object_states\030\003 \003(\0132).almaz2." +
                        "domain_objects.ControlObjectState\"\200\001\n#Co" +
                        "ntrolElementChangeOverPeriodQuery\022\031\n\021con",
                "trol_object_id\030\001 \001(\r\022\032\n\022control_element_" +
                        "id\030\002 \001(\r\022\021\n\tfrom_time\030\003 \001(\r\022\017\n\007to_time\030\004" +
                        " \001(\r\"\267\001\n$ControlElementChangeOverPeriodR" +
                        "esult\022\025\n\rcurrent_block\030\001 \001(\r\022\024\n\014total_bl" +
                        "ocks\030\002 \001(\r\022b\n#control_clement_change_ove" +
                        "r_periods\030\003 \003(\01325.almaz2.domain_objects." +
                        "ControlElementChangeOverPeriod\"\213\001\n\033Senso" +
                        "rChangeOverPeriodQuery\022\031\n\021control_object" +
                        "_id\030\001 \001(\r\022\032\n\022control_element_id\030\002 \001(\r\022\021\n" +
                        "\tsensor_id\030\003 \001(\r\022\021\n\tfrom_time\030\004 \001(\r\022\017\n\007t",
                "o_time\030\005 \001(\r\"\236\001\n\034SensorChangeOverPeriodR" +
                        "esult\022\025\n\rcurrent_block\030\001 \001(\r\022\024\n\014total_bl" +
                        "ocks\030\002 \001(\r\022Q\n\032sensor_change_over_periods" +
                        "\030\003 \003(\0132-.almaz2.domain_objects.SensorCha" +
                        "ngeOverPeriod\"\027\n\025DatabaseQueryContinue\"\025" +
                        "\n\023DatabaseQueryCancel\"\270\002\n\021DatabaseQueryB" +
                        "ase\022\020\n\010query_id\030\001 \001(\r\022N\n\030get_control_obj" +
                        "ect_state\030\004 \001(\0132,.almaz2.rpc.commands.Co" +
                        "ntrolObjectStateQuery\022h\n&get_control_cle" +
                        "ment_change_over_period\030\005 \001(\01328.almaz2.r",
                "pc.commands.ControlElementChangeOverPeri" +
                        "odQuery\022W\n\035get_sensor_change_over_period" +
                        "\030\006 \001(\01320.almaz2.rpc.commands.SensorChang" +
                        "eOverPeriodQuery\"\321\002\n\022DatabaseResultBase\022" +
                        "\020\n\010query_id\030\001 \001(\r\022V\n\037get_control_object_" +
                        "state_result\030\002 \001(\0132-.almaz2.rpc.commands" +
                        ".ControlObjectStateResult\022p\n-get_control" +
                        "_clement_change_over_period_result\030\005 \001(\013" +
                        "29.almaz2.rpc.commands.ControlElementCha" +
                        "ngeOverPeriodResult\022_\n$get_sensor_change",
                "_over_period_result\030\006 \001(\01321.almaz2.rpc.c" +
                        "ommands.SensorChangeOverPeriodResultB5\n\034" +
                        "ru.kodos.almaz2.rpc.commandsB\025DatabaseCo" +
                        "mmandsClass"
        };
        com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
                new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
                    public com.google.protobuf.ExtensionRegistry assignDescriptors(
                            com.google.protobuf.Descriptors.FileDescriptor root) {
                        descriptor = root;
                        internal_static_almaz2_rpc_commands_ControlObjectStateQuery_descriptor =
                                getDescriptor().getMessageTypes().get(0);
                        internal_static_almaz2_rpc_commands_ControlObjectStateQuery_fieldAccessorTable = new
                                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                                internal_static_almaz2_rpc_commands_ControlObjectStateQuery_descriptor,
                                new java.lang.String[]{"ControlObjectId", "FromTime", "ToTime",});
                        internal_static_almaz2_rpc_commands_ControlObjectStateResult_descriptor =
                                getDescriptor().getMessageTypes().get(1);
                        internal_static_almaz2_rpc_commands_ControlObjectStateResult_fieldAccessorTable = new
                                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                                internal_static_almaz2_rpc_commands_ControlObjectStateResult_descriptor,
                                new java.lang.String[]{"CurrentBlock", "TotalBlocks", "ControlObjectStates",});
                        internal_static_almaz2_rpc_commands_ControlElementChangeOverPeriodQuery_descriptor =
                                getDescriptor().getMessageTypes().get(2);
                        internal_static_almaz2_rpc_commands_ControlElementChangeOverPeriodQuery_fieldAccessorTable = new
                                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                                internal_static_almaz2_rpc_commands_ControlElementChangeOverPeriodQuery_descriptor,
                                new java.lang.String[]{"ControlObjectId", "ControlElementId", "FromTime", "ToTime",});
                        internal_static_almaz2_rpc_commands_ControlElementChangeOverPeriodResult_descriptor =
                                getDescriptor().getMessageTypes().get(3);
                        internal_static_almaz2_rpc_commands_ControlElementChangeOverPeriodResult_fieldAccessorTable = new
                                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                                internal_static_almaz2_rpc_commands_ControlElementChangeOverPeriodResult_descriptor,
                                new java.lang.String[]{"CurrentBlock", "TotalBlocks", "ControlClementChangeOverPeriods",});
                        internal_static_almaz2_rpc_commands_SensorChangeOverPeriodQuery_descriptor =
                                getDescriptor().getMessageTypes().get(4);
                        internal_static_almaz2_rpc_commands_SensorChangeOverPeriodQuery_fieldAccessorTable = new
                                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                                internal_static_almaz2_rpc_commands_SensorChangeOverPeriodQuery_descriptor,
                                new java.lang.String[]{"ControlObjectId", "ControlElementId", "SensorId", "FromTime", "ToTime",});
                        internal_static_almaz2_rpc_commands_SensorChangeOverPeriodResult_descriptor =
                                getDescriptor().getMessageTypes().get(5);
                        internal_static_almaz2_rpc_commands_SensorChangeOverPeriodResult_fieldAccessorTable = new
                                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                                internal_static_almaz2_rpc_commands_SensorChangeOverPeriodResult_descriptor,
                                new java.lang.String[]{"CurrentBlock", "TotalBlocks", "SensorChangeOverPeriods",});
                        internal_static_almaz2_rpc_commands_DatabaseQueryContinue_descriptor =
                                getDescriptor().getMessageTypes().get(6);
                        internal_static_almaz2_rpc_commands_DatabaseQueryContinue_fieldAccessorTable = new
                                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                                internal_static_almaz2_rpc_commands_DatabaseQueryContinue_descriptor,
                                new java.lang.String[]{});
                        internal_static_almaz2_rpc_commands_DatabaseQueryCancel_descriptor =
                                getDescriptor().getMessageTypes().get(7);
                        internal_static_almaz2_rpc_commands_DatabaseQueryCancel_fieldAccessorTable = new
                                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                                internal_static_almaz2_rpc_commands_DatabaseQueryCancel_descriptor,
                                new java.lang.String[]{});
                        internal_static_almaz2_rpc_commands_DatabaseQueryBase_descriptor =
                                getDescriptor().getMessageTypes().get(8);
                        internal_static_almaz2_rpc_commands_DatabaseQueryBase_fieldAccessorTable = new
                                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                                internal_static_almaz2_rpc_commands_DatabaseQueryBase_descriptor,
                                new java.lang.String[]{"QueryId", "GetControlObjectState", "GetControlClementChangeOverPeriod", "GetSensorChangeOverPeriod",});
                        internal_static_almaz2_rpc_commands_DatabaseResultBase_descriptor =
                                getDescriptor().getMessageTypes().get(9);
                        internal_static_almaz2_rpc_commands_DatabaseResultBase_fieldAccessorTable = new
                                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                                internal_static_almaz2_rpc_commands_DatabaseResultBase_descriptor,
                                new java.lang.String[]{"QueryId", "GetControlObjectStateResult", "GetControlClementChangeOverPeriodResult", "GetSensorChangeOverPeriodResult",});
                        return null;
                    }
                };
        com.google.protobuf.Descriptors.FileDescriptor
                .internalBuildGeneratedFileFrom(descriptorData,
                        new com.google.protobuf.Descriptors.FileDescriptor[]{
                                ru.kodos.almaz2.domain_objects.ControlObjectStateClass.getDescriptor(),
                                ru.kodos.almaz2.domain_objects.ControlObjectChangeOverPeriodClass.getDescriptor(),
                        }, assigner
                );
    }

    // @@protoc_insertion_point(outer_class_scope)
}
