// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

package ru.kodos.almaz2.rpc.commands;

public final class RpcMessageClass {
  private RpcMessageClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code almaz2.rpc.commands.Priority}
   *
   * <pre>
   **
   * Приоритеты очередей (команд).
   * </pre>
   */
  public enum Priority
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>LOW_PRIORITY = 99;</code>
     */
    LOW_PRIORITY(0, 99),
    /**
     * <code>NORMAL_PRIORITY = 66;</code>
     */
    NORMAL_PRIORITY(1, 66),
    /**
     * <code>HIGHT_PRIORITY = 33;</code>
     */
    HIGHT_PRIORITY(2, 33),
    /**
     * <code>URGENT_PRIORITY = 1;</code>
     */
    URGENT_PRIORITY(3, 1),
    ;

    /**
     * <code>LOW_PRIORITY = 99;</code>
     */
    public static final int LOW_PRIORITY_VALUE = 99;
    /**
     * <code>NORMAL_PRIORITY = 66;</code>
     */
    public static final int NORMAL_PRIORITY_VALUE = 66;
    /**
     * <code>HIGHT_PRIORITY = 33;</code>
     */
    public static final int HIGHT_PRIORITY_VALUE = 33;
    /**
     * <code>URGENT_PRIORITY = 1;</code>
     */
    public static final int URGENT_PRIORITY_VALUE = 1;


    public final int getNumber() { return value; }

    public static Priority valueOf(int value) {
      switch (value) {
        case 99: return LOW_PRIORITY;
        case 66: return NORMAL_PRIORITY;
        case 33: return HIGHT_PRIORITY;
        case 1: return URGENT_PRIORITY;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Priority>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<Priority>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Priority>() {
            public Priority findValueByNumber(int number) {
              return Priority.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return ru.kodos.almaz2.rpc.commands.RpcMessageClass.getDescriptor().getEnumTypes().get(0);
    }

    private static final Priority[] VALUES = values();

    public static Priority valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private Priority(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:almaz2.rpc.commands.Priority)
  }

  public interface RpcProtocolOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .almaz2.rpc.commands.RpcProtocol.RequestBase request = 100;
    /**
     * <code>optional .almaz2.rpc.commands.RpcProtocol.RequestBase request = 100;</code>
     */
    boolean hasRequest();
    /**
     * <code>optional .almaz2.rpc.commands.RpcProtocol.RequestBase request = 100;</code>
     */
    ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase getRequest();
    /**
     * <code>optional .almaz2.rpc.commands.RpcProtocol.RequestBase request = 100;</code>
     */
    ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBaseOrBuilder getRequestOrBuilder();

    // optional .almaz2.rpc.commands.RpcProtocol.ReplyBase reply = 101;
    /**
     * <code>optional .almaz2.rpc.commands.RpcProtocol.ReplyBase reply = 101;</code>
     */
    boolean hasReply();
    /**
     * <code>optional .almaz2.rpc.commands.RpcProtocol.ReplyBase reply = 101;</code>
     */
    ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase getReply();
    /**
     * <code>optional .almaz2.rpc.commands.RpcProtocol.ReplyBase reply = 101;</code>
     */
    ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBaseOrBuilder getReplyOrBuilder();
  }
  /**
   * Protobuf type {@code almaz2.rpc.commands.RpcProtocol}
   *
   * <pre>
   ** 
   * Описание структур протокола RPC.
   * </pre>
   */
  public static final class RpcProtocol extends
      com.google.protobuf.GeneratedMessage
      implements RpcProtocolOrBuilder {
    // Use RpcProtocol.newBuilder() to construct.
    private RpcProtocol(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RpcProtocol(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RpcProtocol defaultInstance;
    public static RpcProtocol getDefaultInstance() {
      return defaultInstance;
    }

    public RpcProtocol getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RpcProtocol(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 802: {
              ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = request_.toBuilder();
              }
              request_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(request_);
                request_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 810: {
              ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = reply_.toBuilder();
              }
              reply_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(reply_);
                reply_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Builder.class);
    }

    public static com.google.protobuf.Parser<RpcProtocol> PARSER =
        new com.google.protobuf.AbstractParser<RpcProtocol>() {
      public RpcProtocol parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RpcProtocol(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RpcProtocol> getParserForType() {
      return PARSER;
    }

    public interface HeaderOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional uint32 client_id = 1;
      /**
       * <code>optional uint32 client_id = 1;</code>
       */
      boolean hasClientId();
      /**
       * <code>optional uint32 client_id = 1;</code>
       */
      int getClientId();

      // optional uint32 packet_num = 2;
      /**
       * <code>optional uint32 packet_num = 2;</code>
       */
      boolean hasPacketNum();
      /**
       * <code>optional uint32 packet_num = 2;</code>
       */
      int getPacketNum();

      // optional int64 time = 3;
      /**
       * <code>optional int64 time = 3;</code>
       */
      boolean hasTime();
      /**
       * <code>optional int64 time = 3;</code>
       */
      long getTime();

      // optional .almaz2.rpc.commands.Priority priority = 4;
      /**
       * <code>optional .almaz2.rpc.commands.Priority priority = 4;</code>
       */
      boolean hasPriority();
      /**
       * <code>optional .almaz2.rpc.commands.Priority priority = 4;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.Priority getPriority();

      // optional uint32 connection_id = 5;
      /**
       * <code>optional uint32 connection_id = 5;</code>
       */
      boolean hasConnectionId();
      /**
       * <code>optional uint32 connection_id = 5;</code>
       */
      int getConnectionId();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.Header}
     */
    public static final class Header extends
        com.google.protobuf.GeneratedMessage
        implements HeaderOrBuilder {
      // Use Header.newBuilder() to construct.
      private Header(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Header(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Header defaultInstance;
      public static Header getDefaultInstance() {
        return defaultInstance;
      }

      public Header getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Header(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                clientId_ = input.readUInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                packetNum_ = input.readUInt32();
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                time_ = input.readInt64();
                break;
              }
              case 32: {
                int rawValue = input.readEnum();
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.Priority value = ru.kodos.almaz2.rpc.commands.RpcMessageClass.Priority.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(4, rawValue);
                } else {
                  bitField0_ |= 0x00000008;
                  priority_ = value;
                }
                break;
              }
              case 40: {
                bitField0_ |= 0x00000010;
                connectionId_ = input.readUInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_Header_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_Header_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header.Builder.class);
      }

      public static com.google.protobuf.Parser<Header> PARSER =
          new com.google.protobuf.AbstractParser<Header>() {
        public Header parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Header(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Header> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional uint32 client_id = 1;
      public static final int CLIENT_ID_FIELD_NUMBER = 1;
      private int clientId_;
      /**
       * <code>optional uint32 client_id = 1;</code>
       */
      public boolean hasClientId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 client_id = 1;</code>
       */
      public int getClientId() {
        return clientId_;
      }

      // optional uint32 packet_num = 2;
      public static final int PACKET_NUM_FIELD_NUMBER = 2;
      private int packetNum_;
      /**
       * <code>optional uint32 packet_num = 2;</code>
       */
      public boolean hasPacketNum() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 packet_num = 2;</code>
       */
      public int getPacketNum() {
        return packetNum_;
      }

      // optional int64 time = 3;
      public static final int TIME_FIELD_NUMBER = 3;
      private long time_;
      /**
       * <code>optional int64 time = 3;</code>
       */
      public boolean hasTime() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int64 time = 3;</code>
       */
      public long getTime() {
        return time_;
      }

      // optional .almaz2.rpc.commands.Priority priority = 4;
      public static final int PRIORITY_FIELD_NUMBER = 4;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.Priority priority_;
      /**
       * <code>optional .almaz2.rpc.commands.Priority priority = 4;</code>
       */
      public boolean hasPriority() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .almaz2.rpc.commands.Priority priority = 4;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.Priority getPriority() {
        return priority_;
      }

      // optional uint32 connection_id = 5;
      public static final int CONNECTION_ID_FIELD_NUMBER = 5;
      private int connectionId_;
      /**
       * <code>optional uint32 connection_id = 5;</code>
       */
      public boolean hasConnectionId() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 connection_id = 5;</code>
       */
      public int getConnectionId() {
        return connectionId_;
      }

      private void initFields() {
        clientId_ = 0;
        packetNum_ = 0;
        time_ = 0L;
        priority_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.Priority.LOW_PRIORITY;
        connectionId_ = 0;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, clientId_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeUInt32(2, packetNum_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeInt64(3, time_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeEnum(4, priority_.getNumber());
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          output.writeUInt32(5, connectionId_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, clientId_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(2, packetNum_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(3, time_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(4, priority_.getNumber());
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(5, connectionId_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.Header}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.HeaderOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_Header_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_Header_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          clientId_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          packetNum_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          time_ = 0L;
          bitField0_ = (bitField0_ & ~0x00000004);
          priority_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.Priority.LOW_PRIORITY;
          bitField0_ = (bitField0_ & ~0x00000008);
          connectionId_ = 0;
          bitField0_ = (bitField0_ & ~0x00000010);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_Header_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.clientId_ = clientId_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.packetNum_ = packetNum_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.time_ = time_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          result.priority_ = priority_;
          if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
            to_bitField0_ |= 0x00000010;
          }
          result.connectionId_ = connectionId_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header.getDefaultInstance()) return this;
          if (other.hasClientId()) {
            setClientId(other.getClientId());
          }
          if (other.hasPacketNum()) {
            setPacketNum(other.getPacketNum());
          }
          if (other.hasTime()) {
            setTime(other.getTime());
          }
          if (other.hasPriority()) {
            setPriority(other.getPriority());
          }
          if (other.hasConnectionId()) {
            setConnectionId(other.getConnectionId());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional uint32 client_id = 1;
        private int clientId_ ;
        /**
         * <code>optional uint32 client_id = 1;</code>
         */
        public boolean hasClientId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint32 client_id = 1;</code>
         */
        public int getClientId() {
          return clientId_;
        }
        /**
         * <code>optional uint32 client_id = 1;</code>
         */
        public Builder setClientId(int value) {
          bitField0_ |= 0x00000001;
          clientId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 client_id = 1;</code>
         */
        public Builder clearClientId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          clientId_ = 0;
          onChanged();
          return this;
        }

        // optional uint32 packet_num = 2;
        private int packetNum_ ;
        /**
         * <code>optional uint32 packet_num = 2;</code>
         */
        public boolean hasPacketNum() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional uint32 packet_num = 2;</code>
         */
        public int getPacketNum() {
          return packetNum_;
        }
        /**
         * <code>optional uint32 packet_num = 2;</code>
         */
        public Builder setPacketNum(int value) {
          bitField0_ |= 0x00000002;
          packetNum_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 packet_num = 2;</code>
         */
        public Builder clearPacketNum() {
          bitField0_ = (bitField0_ & ~0x00000002);
          packetNum_ = 0;
          onChanged();
          return this;
        }

        // optional int64 time = 3;
        private long time_ ;
        /**
         * <code>optional int64 time = 3;</code>
         */
        public boolean hasTime() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional int64 time = 3;</code>
         */
        public long getTime() {
          return time_;
        }
        /**
         * <code>optional int64 time = 3;</code>
         */
        public Builder setTime(long value) {
          bitField0_ |= 0x00000004;
          time_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int64 time = 3;</code>
         */
        public Builder clearTime() {
          bitField0_ = (bitField0_ & ~0x00000004);
          time_ = 0L;
          onChanged();
          return this;
        }

        // optional .almaz2.rpc.commands.Priority priority = 4;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.Priority priority_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.Priority.LOW_PRIORITY;
        /**
         * <code>optional .almaz2.rpc.commands.Priority priority = 4;</code>
         */
        public boolean hasPriority() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional .almaz2.rpc.commands.Priority priority = 4;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.Priority getPriority() {
          return priority_;
        }
        /**
         * <code>optional .almaz2.rpc.commands.Priority priority = 4;</code>
         */
        public Builder setPriority(ru.kodos.almaz2.rpc.commands.RpcMessageClass.Priority value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000008;
          priority_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.Priority priority = 4;</code>
         */
        public Builder clearPriority() {
          bitField0_ = (bitField0_ & ~0x00000008);
          priority_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.Priority.LOW_PRIORITY;
          onChanged();
          return this;
        }

        // optional uint32 connection_id = 5;
        private int connectionId_ ;
        /**
         * <code>optional uint32 connection_id = 5;</code>
         */
        public boolean hasConnectionId() {
          return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        /**
         * <code>optional uint32 connection_id = 5;</code>
         */
        public int getConnectionId() {
          return connectionId_;
        }
        /**
         * <code>optional uint32 connection_id = 5;</code>
         */
        public Builder setConnectionId(int value) {
          bitField0_ |= 0x00000010;
          connectionId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 connection_id = 5;</code>
         */
        public Builder clearConnectionId() {
          bitField0_ = (bitField0_ & ~0x00000010);
          connectionId_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.Header)
      }

      static {
        defaultInstance = new Header(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.Header)
    }

    public interface PrimaryAuthRequestOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional uint32 client_id = 1;
      /**
       * <code>optional uint32 client_id = 1;</code>
       */
      boolean hasClientId();
      /**
       * <code>optional uint32 client_id = 1;</code>
       */
      int getClientId();

      // optional string primary_key = 2;
      /**
       * <code>optional string primary_key = 2;</code>
       */
      boolean hasPrimaryKey();
      /**
       * <code>optional string primary_key = 2;</code>
       */
      java.lang.String getPrimaryKey();
      /**
       * <code>optional string primary_key = 2;</code>
       */
      com.google.protobuf.ByteString
          getPrimaryKeyBytes();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.PrimaryAuthRequest}
     */
    public static final class PrimaryAuthRequest extends
        com.google.protobuf.GeneratedMessage
        implements PrimaryAuthRequestOrBuilder {
      // Use PrimaryAuthRequest.newBuilder() to construct.
      private PrimaryAuthRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private PrimaryAuthRequest(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final PrimaryAuthRequest defaultInstance;
      public static PrimaryAuthRequest getDefaultInstance() {
        return defaultInstance;
      }

      public PrimaryAuthRequest getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private PrimaryAuthRequest(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                clientId_ = input.readUInt32();
                break;
              }
              case 18: {
                bitField0_ |= 0x00000002;
                primaryKey_ = input.readBytes();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_PrimaryAuthRequest_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_PrimaryAuthRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest.Builder.class);
      }

      public static com.google.protobuf.Parser<PrimaryAuthRequest> PARSER =
          new com.google.protobuf.AbstractParser<PrimaryAuthRequest>() {
        public PrimaryAuthRequest parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new PrimaryAuthRequest(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<PrimaryAuthRequest> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional uint32 client_id = 1;
      public static final int CLIENT_ID_FIELD_NUMBER = 1;
      private int clientId_;
      /**
       * <code>optional uint32 client_id = 1;</code>
       */
      public boolean hasClientId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 client_id = 1;</code>
       */
      public int getClientId() {
        return clientId_;
      }

      // optional string primary_key = 2;
      public static final int PRIMARY_KEY_FIELD_NUMBER = 2;
      private java.lang.Object primaryKey_;
      /**
       * <code>optional string primary_key = 2;</code>
       */
      public boolean hasPrimaryKey() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string primary_key = 2;</code>
       */
      public java.lang.String getPrimaryKey() {
        java.lang.Object ref = primaryKey_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            primaryKey_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string primary_key = 2;</code>
       */
      public com.google.protobuf.ByteString
          getPrimaryKeyBytes() {
        java.lang.Object ref = primaryKey_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          primaryKey_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private void initFields() {
        clientId_ = 0;
        primaryKey_ = "";
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, clientId_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeBytes(2, getPrimaryKeyBytes());
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, clientId_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(2, getPrimaryKeyBytes());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.PrimaryAuthRequest}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequestOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_PrimaryAuthRequest_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_PrimaryAuthRequest_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          clientId_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          primaryKey_ = "";
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_PrimaryAuthRequest_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.clientId_ = clientId_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.primaryKey_ = primaryKey_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest.getDefaultInstance()) return this;
          if (other.hasClientId()) {
            setClientId(other.getClientId());
          }
          if (other.hasPrimaryKey()) {
            bitField0_ |= 0x00000002;
            primaryKey_ = other.primaryKey_;
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional uint32 client_id = 1;
        private int clientId_ ;
        /**
         * <code>optional uint32 client_id = 1;</code>
         */
        public boolean hasClientId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint32 client_id = 1;</code>
         */
        public int getClientId() {
          return clientId_;
        }
        /**
         * <code>optional uint32 client_id = 1;</code>
         */
        public Builder setClientId(int value) {
          bitField0_ |= 0x00000001;
          clientId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 client_id = 1;</code>
         */
        public Builder clearClientId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          clientId_ = 0;
          onChanged();
          return this;
        }

        // optional string primary_key = 2;
        private java.lang.Object primaryKey_ = "";
        /**
         * <code>optional string primary_key = 2;</code>
         */
        public boolean hasPrimaryKey() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional string primary_key = 2;</code>
         */
        public java.lang.String getPrimaryKey() {
          java.lang.Object ref = primaryKey_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            primaryKey_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string primary_key = 2;</code>
         */
        public com.google.protobuf.ByteString
            getPrimaryKeyBytes() {
          java.lang.Object ref = primaryKey_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            primaryKey_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string primary_key = 2;</code>
         */
        public Builder setPrimaryKey(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          primaryKey_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string primary_key = 2;</code>
         */
        public Builder clearPrimaryKey() {
          bitField0_ = (bitField0_ & ~0x00000002);
          primaryKey_ = getDefaultInstance().getPrimaryKey();
          onChanged();
          return this;
        }
        /**
         * <code>optional string primary_key = 2;</code>
         */
        public Builder setPrimaryKeyBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          primaryKey_ = value;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.PrimaryAuthRequest)
      }

      static {
        defaultInstance = new PrimaryAuthRequest(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.PrimaryAuthRequest)
    }

    public interface PrimaryAuthReplyOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional uint32 error_code = 1;
      /**
       * <code>optional uint32 error_code = 1;</code>
       */
      boolean hasErrorCode();
      /**
       * <code>optional uint32 error_code = 1;</code>
       */
      int getErrorCode();

      // optional string error_message = 2;
      /**
       * <code>optional string error_message = 2;</code>
       */
      boolean hasErrorMessage();
      /**
       * <code>optional string error_message = 2;</code>
       */
      java.lang.String getErrorMessage();
      /**
       * <code>optional string error_message = 2;</code>
       */
      com.google.protobuf.ByteString
          getErrorMessageBytes();

      // optional uint32 client_id = 3;
      /**
       * <code>optional uint32 client_id = 3;</code>
       */
      boolean hasClientId();
      /**
       * <code>optional uint32 client_id = 3;</code>
       */
      int getClientId();

      // optional string public_key = 4;
      /**
       * <code>optional string public_key = 4;</code>
       */
      boolean hasPublicKey();
      /**
       * <code>optional string public_key = 4;</code>
       */
      java.lang.String getPublicKey();
      /**
       * <code>optional string public_key = 4;</code>
       */
      com.google.protobuf.ByteString
          getPublicKeyBytes();

      // optional string private_key = 5;
      /**
       * <code>optional string private_key = 5;</code>
       */
      boolean hasPrivateKey();
      /**
       * <code>optional string private_key = 5;</code>
       */
      java.lang.String getPrivateKey();
      /**
       * <code>optional string private_key = 5;</code>
       */
      com.google.protobuf.ByteString
          getPrivateKeyBytes();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.PrimaryAuthReply}
     */
    public static final class PrimaryAuthReply extends
        com.google.protobuf.GeneratedMessage
        implements PrimaryAuthReplyOrBuilder {
      // Use PrimaryAuthReply.newBuilder() to construct.
      private PrimaryAuthReply(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private PrimaryAuthReply(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final PrimaryAuthReply defaultInstance;
      public static PrimaryAuthReply getDefaultInstance() {
        return defaultInstance;
      }

      public PrimaryAuthReply getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private PrimaryAuthReply(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                errorCode_ = input.readUInt32();
                break;
              }
              case 18: {
                bitField0_ |= 0x00000002;
                errorMessage_ = input.readBytes();
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                clientId_ = input.readUInt32();
                break;
              }
              case 34: {
                bitField0_ |= 0x00000008;
                publicKey_ = input.readBytes();
                break;
              }
              case 42: {
                bitField0_ |= 0x00000010;
                privateKey_ = input.readBytes();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_PrimaryAuthReply_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_PrimaryAuthReply_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply.Builder.class);
      }

      public static com.google.protobuf.Parser<PrimaryAuthReply> PARSER =
          new com.google.protobuf.AbstractParser<PrimaryAuthReply>() {
        public PrimaryAuthReply parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new PrimaryAuthReply(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<PrimaryAuthReply> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional uint32 error_code = 1;
      public static final int ERROR_CODE_FIELD_NUMBER = 1;
      private int errorCode_;
      /**
       * <code>optional uint32 error_code = 1;</code>
       */
      public boolean hasErrorCode() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 error_code = 1;</code>
       */
      public int getErrorCode() {
        return errorCode_;
      }

      // optional string error_message = 2;
      public static final int ERROR_MESSAGE_FIELD_NUMBER = 2;
      private java.lang.Object errorMessage_;
      /**
       * <code>optional string error_message = 2;</code>
       */
      public boolean hasErrorMessage() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string error_message = 2;</code>
       */
      public java.lang.String getErrorMessage() {
        java.lang.Object ref = errorMessage_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            errorMessage_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string error_message = 2;</code>
       */
      public com.google.protobuf.ByteString
          getErrorMessageBytes() {
        java.lang.Object ref = errorMessage_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          errorMessage_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      // optional uint32 client_id = 3;
      public static final int CLIENT_ID_FIELD_NUMBER = 3;
      private int clientId_;
      /**
       * <code>optional uint32 client_id = 3;</code>
       */
      public boolean hasClientId() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 client_id = 3;</code>
       */
      public int getClientId() {
        return clientId_;
      }

      // optional string public_key = 4;
      public static final int PUBLIC_KEY_FIELD_NUMBER = 4;
      private java.lang.Object publicKey_;
      /**
       * <code>optional string public_key = 4;</code>
       */
      public boolean hasPublicKey() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string public_key = 4;</code>
       */
      public java.lang.String getPublicKey() {
        java.lang.Object ref = publicKey_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            publicKey_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string public_key = 4;</code>
       */
      public com.google.protobuf.ByteString
          getPublicKeyBytes() {
        java.lang.Object ref = publicKey_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          publicKey_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      // optional string private_key = 5;
      public static final int PRIVATE_KEY_FIELD_NUMBER = 5;
      private java.lang.Object privateKey_;
      /**
       * <code>optional string private_key = 5;</code>
       */
      public boolean hasPrivateKey() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional string private_key = 5;</code>
       */
      public java.lang.String getPrivateKey() {
        java.lang.Object ref = privateKey_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            privateKey_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string private_key = 5;</code>
       */
      public com.google.protobuf.ByteString
          getPrivateKeyBytes() {
        java.lang.Object ref = privateKey_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          privateKey_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private void initFields() {
        errorCode_ = 0;
        errorMessage_ = "";
        clientId_ = 0;
        publicKey_ = "";
        privateKey_ = "";
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, errorCode_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeBytes(2, getErrorMessageBytes());
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeUInt32(3, clientId_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeBytes(4, getPublicKeyBytes());
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          output.writeBytes(5, getPrivateKeyBytes());
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, errorCode_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(2, getErrorMessageBytes());
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(3, clientId_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(4, getPublicKeyBytes());
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(5, getPrivateKeyBytes());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.PrimaryAuthReply}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReplyOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_PrimaryAuthReply_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_PrimaryAuthReply_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          errorCode_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          errorMessage_ = "";
          bitField0_ = (bitField0_ & ~0x00000002);
          clientId_ = 0;
          bitField0_ = (bitField0_ & ~0x00000004);
          publicKey_ = "";
          bitField0_ = (bitField0_ & ~0x00000008);
          privateKey_ = "";
          bitField0_ = (bitField0_ & ~0x00000010);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_PrimaryAuthReply_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.errorCode_ = errorCode_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.errorMessage_ = errorMessage_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.clientId_ = clientId_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          result.publicKey_ = publicKey_;
          if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
            to_bitField0_ |= 0x00000010;
          }
          result.privateKey_ = privateKey_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply.getDefaultInstance()) return this;
          if (other.hasErrorCode()) {
            setErrorCode(other.getErrorCode());
          }
          if (other.hasErrorMessage()) {
            bitField0_ |= 0x00000002;
            errorMessage_ = other.errorMessage_;
            onChanged();
          }
          if (other.hasClientId()) {
            setClientId(other.getClientId());
          }
          if (other.hasPublicKey()) {
            bitField0_ |= 0x00000008;
            publicKey_ = other.publicKey_;
            onChanged();
          }
          if (other.hasPrivateKey()) {
            bitField0_ |= 0x00000010;
            privateKey_ = other.privateKey_;
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional uint32 error_code = 1;
        private int errorCode_ ;
        /**
         * <code>optional uint32 error_code = 1;</code>
         */
        public boolean hasErrorCode() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint32 error_code = 1;</code>
         */
        public int getErrorCode() {
          return errorCode_;
        }
        /**
         * <code>optional uint32 error_code = 1;</code>
         */
        public Builder setErrorCode(int value) {
          bitField0_ |= 0x00000001;
          errorCode_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 error_code = 1;</code>
         */
        public Builder clearErrorCode() {
          bitField0_ = (bitField0_ & ~0x00000001);
          errorCode_ = 0;
          onChanged();
          return this;
        }

        // optional string error_message = 2;
        private java.lang.Object errorMessage_ = "";
        /**
         * <code>optional string error_message = 2;</code>
         */
        public boolean hasErrorMessage() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional string error_message = 2;</code>
         */
        public java.lang.String getErrorMessage() {
          java.lang.Object ref = errorMessage_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            errorMessage_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string error_message = 2;</code>
         */
        public com.google.protobuf.ByteString
            getErrorMessageBytes() {
          java.lang.Object ref = errorMessage_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            errorMessage_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string error_message = 2;</code>
         */
        public Builder setErrorMessage(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          errorMessage_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string error_message = 2;</code>
         */
        public Builder clearErrorMessage() {
          bitField0_ = (bitField0_ & ~0x00000002);
          errorMessage_ = getDefaultInstance().getErrorMessage();
          onChanged();
          return this;
        }
        /**
         * <code>optional string error_message = 2;</code>
         */
        public Builder setErrorMessageBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          errorMessage_ = value;
          onChanged();
          return this;
        }

        // optional uint32 client_id = 3;
        private int clientId_ ;
        /**
         * <code>optional uint32 client_id = 3;</code>
         */
        public boolean hasClientId() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional uint32 client_id = 3;</code>
         */
        public int getClientId() {
          return clientId_;
        }
        /**
         * <code>optional uint32 client_id = 3;</code>
         */
        public Builder setClientId(int value) {
          bitField0_ |= 0x00000004;
          clientId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 client_id = 3;</code>
         */
        public Builder clearClientId() {
          bitField0_ = (bitField0_ & ~0x00000004);
          clientId_ = 0;
          onChanged();
          return this;
        }

        // optional string public_key = 4;
        private java.lang.Object publicKey_ = "";
        /**
         * <code>optional string public_key = 4;</code>
         */
        public boolean hasPublicKey() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional string public_key = 4;</code>
         */
        public java.lang.String getPublicKey() {
          java.lang.Object ref = publicKey_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            publicKey_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string public_key = 4;</code>
         */
        public com.google.protobuf.ByteString
            getPublicKeyBytes() {
          java.lang.Object ref = publicKey_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            publicKey_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string public_key = 4;</code>
         */
        public Builder setPublicKey(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
          publicKey_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string public_key = 4;</code>
         */
        public Builder clearPublicKey() {
          bitField0_ = (bitField0_ & ~0x00000008);
          publicKey_ = getDefaultInstance().getPublicKey();
          onChanged();
          return this;
        }
        /**
         * <code>optional string public_key = 4;</code>
         */
        public Builder setPublicKeyBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
          publicKey_ = value;
          onChanged();
          return this;
        }

        // optional string private_key = 5;
        private java.lang.Object privateKey_ = "";
        /**
         * <code>optional string private_key = 5;</code>
         */
        public boolean hasPrivateKey() {
          return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        /**
         * <code>optional string private_key = 5;</code>
         */
        public java.lang.String getPrivateKey() {
          java.lang.Object ref = privateKey_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            privateKey_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string private_key = 5;</code>
         */
        public com.google.protobuf.ByteString
            getPrivateKeyBytes() {
          java.lang.Object ref = privateKey_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            privateKey_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string private_key = 5;</code>
         */
        public Builder setPrivateKey(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
          privateKey_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string private_key = 5;</code>
         */
        public Builder clearPrivateKey() {
          bitField0_ = (bitField0_ & ~0x00000010);
          privateKey_ = getDefaultInstance().getPrivateKey();
          onChanged();
          return this;
        }
        /**
         * <code>optional string private_key = 5;</code>
         */
        public Builder setPrivateKeyBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
          privateKey_ = value;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.PrimaryAuthReply)
      }

      static {
        defaultInstance = new PrimaryAuthReply(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.PrimaryAuthReply)
    }

    public interface AuthRequestOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional uint32 client_id = 1;
      /**
       * <code>optional uint32 client_id = 1;</code>
       */
      boolean hasClientId();
      /**
       * <code>optional uint32 client_id = 1;</code>
       */
      int getClientId();

      // optional uint32 connection_id = 2;
      /**
       * <code>optional uint32 connection_id = 2;</code>
       */
      boolean hasConnectionId();
      /**
       * <code>optional uint32 connection_id = 2;</code>
       */
      int getConnectionId();

      // optional string session = 3;
      /**
       * <code>optional string session = 3;</code>
       */
      boolean hasSession();
      /**
       * <code>optional string session = 3;</code>
       */
      java.lang.String getSession();
      /**
       * <code>optional string session = 3;</code>
       */
      com.google.protobuf.ByteString
          getSessionBytes();

      // optional string auth_key = 4;
      /**
       * <code>optional string auth_key = 4;</code>
       */
      boolean hasAuthKey();
      /**
       * <code>optional string auth_key = 4;</code>
       */
      java.lang.String getAuthKey();
      /**
       * <code>optional string auth_key = 4;</code>
       */
      com.google.protobuf.ByteString
          getAuthKeyBytes();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AuthRequest}
     */
    public static final class AuthRequest extends
        com.google.protobuf.GeneratedMessage
        implements AuthRequestOrBuilder {
      // Use AuthRequest.newBuilder() to construct.
      private AuthRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private AuthRequest(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final AuthRequest defaultInstance;
      public static AuthRequest getDefaultInstance() {
        return defaultInstance;
      }

      public AuthRequest getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private AuthRequest(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                clientId_ = input.readUInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                connectionId_ = input.readUInt32();
                break;
              }
              case 26: {
                bitField0_ |= 0x00000004;
                session_ = input.readBytes();
                break;
              }
              case 34: {
                bitField0_ |= 0x00000008;
                authKey_ = input.readBytes();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AuthRequest_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AuthRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest.Builder.class);
      }

      public static com.google.protobuf.Parser<AuthRequest> PARSER =
          new com.google.protobuf.AbstractParser<AuthRequest>() {
        public AuthRequest parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new AuthRequest(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<AuthRequest> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional uint32 client_id = 1;
      public static final int CLIENT_ID_FIELD_NUMBER = 1;
      private int clientId_;
      /**
       * <code>optional uint32 client_id = 1;</code>
       */
      public boolean hasClientId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 client_id = 1;</code>
       */
      public int getClientId() {
        return clientId_;
      }

      // optional uint32 connection_id = 2;
      public static final int CONNECTION_ID_FIELD_NUMBER = 2;
      private int connectionId_;
      /**
       * <code>optional uint32 connection_id = 2;</code>
       */
      public boolean hasConnectionId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 connection_id = 2;</code>
       */
      public int getConnectionId() {
        return connectionId_;
      }

      // optional string session = 3;
      public static final int SESSION_FIELD_NUMBER = 3;
      private java.lang.Object session_;
      /**
       * <code>optional string session = 3;</code>
       */
      public boolean hasSession() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string session = 3;</code>
       */
      public java.lang.String getSession() {
        java.lang.Object ref = session_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            session_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string session = 3;</code>
       */
      public com.google.protobuf.ByteString
          getSessionBytes() {
        java.lang.Object ref = session_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          session_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      // optional string auth_key = 4;
      public static final int AUTH_KEY_FIELD_NUMBER = 4;
      private java.lang.Object authKey_;
      /**
       * <code>optional string auth_key = 4;</code>
       */
      public boolean hasAuthKey() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string auth_key = 4;</code>
       */
      public java.lang.String getAuthKey() {
        java.lang.Object ref = authKey_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            authKey_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string auth_key = 4;</code>
       */
      public com.google.protobuf.ByteString
          getAuthKeyBytes() {
        java.lang.Object ref = authKey_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          authKey_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private void initFields() {
        clientId_ = 0;
        connectionId_ = 0;
        session_ = "";
        authKey_ = "";
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, clientId_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeUInt32(2, connectionId_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeBytes(3, getSessionBytes());
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeBytes(4, getAuthKeyBytes());
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, clientId_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(2, connectionId_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(3, getSessionBytes());
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(4, getAuthKeyBytes());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AuthRequest}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequestOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AuthRequest_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AuthRequest_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          clientId_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          connectionId_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          session_ = "";
          bitField0_ = (bitField0_ & ~0x00000004);
          authKey_ = "";
          bitField0_ = (bitField0_ & ~0x00000008);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AuthRequest_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.clientId_ = clientId_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.connectionId_ = connectionId_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.session_ = session_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          result.authKey_ = authKey_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest.getDefaultInstance()) return this;
          if (other.hasClientId()) {
            setClientId(other.getClientId());
          }
          if (other.hasConnectionId()) {
            setConnectionId(other.getConnectionId());
          }
          if (other.hasSession()) {
            bitField0_ |= 0x00000004;
            session_ = other.session_;
            onChanged();
          }
          if (other.hasAuthKey()) {
            bitField0_ |= 0x00000008;
            authKey_ = other.authKey_;
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional uint32 client_id = 1;
        private int clientId_ ;
        /**
         * <code>optional uint32 client_id = 1;</code>
         */
        public boolean hasClientId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint32 client_id = 1;</code>
         */
        public int getClientId() {
          return clientId_;
        }
        /**
         * <code>optional uint32 client_id = 1;</code>
         */
        public Builder setClientId(int value) {
          bitField0_ |= 0x00000001;
          clientId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 client_id = 1;</code>
         */
        public Builder clearClientId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          clientId_ = 0;
          onChanged();
          return this;
        }

        // optional uint32 connection_id = 2;
        private int connectionId_ ;
        /**
         * <code>optional uint32 connection_id = 2;</code>
         */
        public boolean hasConnectionId() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional uint32 connection_id = 2;</code>
         */
        public int getConnectionId() {
          return connectionId_;
        }
        /**
         * <code>optional uint32 connection_id = 2;</code>
         */
        public Builder setConnectionId(int value) {
          bitField0_ |= 0x00000002;
          connectionId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 connection_id = 2;</code>
         */
        public Builder clearConnectionId() {
          bitField0_ = (bitField0_ & ~0x00000002);
          connectionId_ = 0;
          onChanged();
          return this;
        }

        // optional string session = 3;
        private java.lang.Object session_ = "";
        /**
         * <code>optional string session = 3;</code>
         */
        public boolean hasSession() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional string session = 3;</code>
         */
        public java.lang.String getSession() {
          java.lang.Object ref = session_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            session_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string session = 3;</code>
         */
        public com.google.protobuf.ByteString
            getSessionBytes() {
          java.lang.Object ref = session_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            session_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string session = 3;</code>
         */
        public Builder setSession(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
          session_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string session = 3;</code>
         */
        public Builder clearSession() {
          bitField0_ = (bitField0_ & ~0x00000004);
          session_ = getDefaultInstance().getSession();
          onChanged();
          return this;
        }
        /**
         * <code>optional string session = 3;</code>
         */
        public Builder setSessionBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
          session_ = value;
          onChanged();
          return this;
        }

        // optional string auth_key = 4;
        private java.lang.Object authKey_ = "";
        /**
         * <code>optional string auth_key = 4;</code>
         */
        public boolean hasAuthKey() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional string auth_key = 4;</code>
         */
        public java.lang.String getAuthKey() {
          java.lang.Object ref = authKey_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            authKey_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string auth_key = 4;</code>
         */
        public com.google.protobuf.ByteString
            getAuthKeyBytes() {
          java.lang.Object ref = authKey_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            authKey_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string auth_key = 4;</code>
         */
        public Builder setAuthKey(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
          authKey_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string auth_key = 4;</code>
         */
        public Builder clearAuthKey() {
          bitField0_ = (bitField0_ & ~0x00000008);
          authKey_ = getDefaultInstance().getAuthKey();
          onChanged();
          return this;
        }
        /**
         * <code>optional string auth_key = 4;</code>
         */
        public Builder setAuthKeyBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
          authKey_ = value;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.AuthRequest)
      }

      static {
        defaultInstance = new AuthRequest(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.AuthRequest)
    }

    public interface AuthReplyOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional uint32 error_code = 1;
      /**
       * <code>optional uint32 error_code = 1;</code>
       */
      boolean hasErrorCode();
      /**
       * <code>optional uint32 error_code = 1;</code>
       */
      int getErrorCode();

      // optional string error_message = 2;
      /**
       * <code>optional string error_message = 2;</code>
       */
      boolean hasErrorMessage();
      /**
       * <code>optional string error_message = 2;</code>
       */
      java.lang.String getErrorMessage();
      /**
       * <code>optional string error_message = 2;</code>
       */
      com.google.protobuf.ByteString
          getErrorMessageBytes();

      // optional string session = 3;
      /**
       * <code>optional string session = 3;</code>
       */
      boolean hasSession();
      /**
       * <code>optional string session = 3;</code>
       */
      java.lang.String getSession();
      /**
       * <code>optional string session = 3;</code>
       */
      com.google.protobuf.ByteString
          getSessionBytes();

      // optional string auth_key = 4;
      /**
       * <code>optional string auth_key = 4;</code>
       */
      boolean hasAuthKey();
      /**
       * <code>optional string auth_key = 4;</code>
       */
      java.lang.String getAuthKey();
      /**
       * <code>optional string auth_key = 4;</code>
       */
      com.google.protobuf.ByteString
          getAuthKeyBytes();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AuthReply}
     */
    public static final class AuthReply extends
        com.google.protobuf.GeneratedMessage
        implements AuthReplyOrBuilder {
      // Use AuthReply.newBuilder() to construct.
      private AuthReply(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private AuthReply(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final AuthReply defaultInstance;
      public static AuthReply getDefaultInstance() {
        return defaultInstance;
      }

      public AuthReply getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private AuthReply(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                errorCode_ = input.readUInt32();
                break;
              }
              case 18: {
                bitField0_ |= 0x00000002;
                errorMessage_ = input.readBytes();
                break;
              }
              case 26: {
                bitField0_ |= 0x00000004;
                session_ = input.readBytes();
                break;
              }
              case 34: {
                bitField0_ |= 0x00000008;
                authKey_ = input.readBytes();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AuthReply_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AuthReply_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply.Builder.class);
      }

      public static com.google.protobuf.Parser<AuthReply> PARSER =
          new com.google.protobuf.AbstractParser<AuthReply>() {
        public AuthReply parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new AuthReply(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<AuthReply> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional uint32 error_code = 1;
      public static final int ERROR_CODE_FIELD_NUMBER = 1;
      private int errorCode_;
      /**
       * <code>optional uint32 error_code = 1;</code>
       */
      public boolean hasErrorCode() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 error_code = 1;</code>
       */
      public int getErrorCode() {
        return errorCode_;
      }

      // optional string error_message = 2;
      public static final int ERROR_MESSAGE_FIELD_NUMBER = 2;
      private java.lang.Object errorMessage_;
      /**
       * <code>optional string error_message = 2;</code>
       */
      public boolean hasErrorMessage() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string error_message = 2;</code>
       */
      public java.lang.String getErrorMessage() {
        java.lang.Object ref = errorMessage_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            errorMessage_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string error_message = 2;</code>
       */
      public com.google.protobuf.ByteString
          getErrorMessageBytes() {
        java.lang.Object ref = errorMessage_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          errorMessage_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      // optional string session = 3;
      public static final int SESSION_FIELD_NUMBER = 3;
      private java.lang.Object session_;
      /**
       * <code>optional string session = 3;</code>
       */
      public boolean hasSession() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string session = 3;</code>
       */
      public java.lang.String getSession() {
        java.lang.Object ref = session_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            session_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string session = 3;</code>
       */
      public com.google.protobuf.ByteString
          getSessionBytes() {
        java.lang.Object ref = session_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          session_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      // optional string auth_key = 4;
      public static final int AUTH_KEY_FIELD_NUMBER = 4;
      private java.lang.Object authKey_;
      /**
       * <code>optional string auth_key = 4;</code>
       */
      public boolean hasAuthKey() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string auth_key = 4;</code>
       */
      public java.lang.String getAuthKey() {
        java.lang.Object ref = authKey_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            authKey_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string auth_key = 4;</code>
       */
      public com.google.protobuf.ByteString
          getAuthKeyBytes() {
        java.lang.Object ref = authKey_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          authKey_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private void initFields() {
        errorCode_ = 0;
        errorMessage_ = "";
        session_ = "";
        authKey_ = "";
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, errorCode_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeBytes(2, getErrorMessageBytes());
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeBytes(3, getSessionBytes());
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeBytes(4, getAuthKeyBytes());
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, errorCode_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(2, getErrorMessageBytes());
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(3, getSessionBytes());
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(4, getAuthKeyBytes());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AuthReply}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReplyOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AuthReply_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AuthReply_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          errorCode_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          errorMessage_ = "";
          bitField0_ = (bitField0_ & ~0x00000002);
          session_ = "";
          bitField0_ = (bitField0_ & ~0x00000004);
          authKey_ = "";
          bitField0_ = (bitField0_ & ~0x00000008);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AuthReply_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.errorCode_ = errorCode_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.errorMessage_ = errorMessage_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.session_ = session_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          result.authKey_ = authKey_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply.getDefaultInstance()) return this;
          if (other.hasErrorCode()) {
            setErrorCode(other.getErrorCode());
          }
          if (other.hasErrorMessage()) {
            bitField0_ |= 0x00000002;
            errorMessage_ = other.errorMessage_;
            onChanged();
          }
          if (other.hasSession()) {
            bitField0_ |= 0x00000004;
            session_ = other.session_;
            onChanged();
          }
          if (other.hasAuthKey()) {
            bitField0_ |= 0x00000008;
            authKey_ = other.authKey_;
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional uint32 error_code = 1;
        private int errorCode_ ;
        /**
         * <code>optional uint32 error_code = 1;</code>
         */
        public boolean hasErrorCode() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint32 error_code = 1;</code>
         */
        public int getErrorCode() {
          return errorCode_;
        }
        /**
         * <code>optional uint32 error_code = 1;</code>
         */
        public Builder setErrorCode(int value) {
          bitField0_ |= 0x00000001;
          errorCode_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 error_code = 1;</code>
         */
        public Builder clearErrorCode() {
          bitField0_ = (bitField0_ & ~0x00000001);
          errorCode_ = 0;
          onChanged();
          return this;
        }

        // optional string error_message = 2;
        private java.lang.Object errorMessage_ = "";
        /**
         * <code>optional string error_message = 2;</code>
         */
        public boolean hasErrorMessage() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional string error_message = 2;</code>
         */
        public java.lang.String getErrorMessage() {
          java.lang.Object ref = errorMessage_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            errorMessage_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string error_message = 2;</code>
         */
        public com.google.protobuf.ByteString
            getErrorMessageBytes() {
          java.lang.Object ref = errorMessage_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            errorMessage_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string error_message = 2;</code>
         */
        public Builder setErrorMessage(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          errorMessage_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string error_message = 2;</code>
         */
        public Builder clearErrorMessage() {
          bitField0_ = (bitField0_ & ~0x00000002);
          errorMessage_ = getDefaultInstance().getErrorMessage();
          onChanged();
          return this;
        }
        /**
         * <code>optional string error_message = 2;</code>
         */
        public Builder setErrorMessageBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          errorMessage_ = value;
          onChanged();
          return this;
        }

        // optional string session = 3;
        private java.lang.Object session_ = "";
        /**
         * <code>optional string session = 3;</code>
         */
        public boolean hasSession() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional string session = 3;</code>
         */
        public java.lang.String getSession() {
          java.lang.Object ref = session_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            session_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string session = 3;</code>
         */
        public com.google.protobuf.ByteString
            getSessionBytes() {
          java.lang.Object ref = session_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            session_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string session = 3;</code>
         */
        public Builder setSession(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
          session_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string session = 3;</code>
         */
        public Builder clearSession() {
          bitField0_ = (bitField0_ & ~0x00000004);
          session_ = getDefaultInstance().getSession();
          onChanged();
          return this;
        }
        /**
         * <code>optional string session = 3;</code>
         */
        public Builder setSessionBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
          session_ = value;
          onChanged();
          return this;
        }

        // optional string auth_key = 4;
        private java.lang.Object authKey_ = "";
        /**
         * <code>optional string auth_key = 4;</code>
         */
        public boolean hasAuthKey() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional string auth_key = 4;</code>
         */
        public java.lang.String getAuthKey() {
          java.lang.Object ref = authKey_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            authKey_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string auth_key = 4;</code>
         */
        public com.google.protobuf.ByteString
            getAuthKeyBytes() {
          java.lang.Object ref = authKey_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            authKey_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string auth_key = 4;</code>
         */
        public Builder setAuthKey(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
          authKey_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string auth_key = 4;</code>
         */
        public Builder clearAuthKey() {
          bitField0_ = (bitField0_ & ~0x00000008);
          authKey_ = getDefaultInstance().getAuthKey();
          onChanged();
          return this;
        }
        /**
         * <code>optional string auth_key = 4;</code>
         */
        public Builder setAuthKeyBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
          authKey_ = value;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.AuthReply)
      }

      static {
        defaultInstance = new AuthReply(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.AuthReply)
    }

    public interface UserLoginRequestOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional string login = 1;
      /**
       * <code>optional string login = 1;</code>
       */
      boolean hasLogin();
      /**
       * <code>optional string login = 1;</code>
       */
      java.lang.String getLogin();
      /**
       * <code>optional string login = 1;</code>
       */
      com.google.protobuf.ByteString
          getLoginBytes();

      // optional string password = 2;
      /**
       * <code>optional string password = 2;</code>
       */
      boolean hasPassword();
      /**
       * <code>optional string password = 2;</code>
       */
      java.lang.String getPassword();
      /**
       * <code>optional string password = 2;</code>
       */
      com.google.protobuf.ByteString
          getPasswordBytes();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UserLoginRequest}
     */
    public static final class UserLoginRequest extends
        com.google.protobuf.GeneratedMessage
        implements UserLoginRequestOrBuilder {
      // Use UserLoginRequest.newBuilder() to construct.
      private UserLoginRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private UserLoginRequest(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final UserLoginRequest defaultInstance;
      public static UserLoginRequest getDefaultInstance() {
        return defaultInstance;
      }

      public UserLoginRequest getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private UserLoginRequest(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                bitField0_ |= 0x00000001;
                login_ = input.readBytes();
                break;
              }
              case 18: {
                bitField0_ |= 0x00000002;
                password_ = input.readBytes();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UserLoginRequest_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UserLoginRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest.Builder.class);
      }

      public static com.google.protobuf.Parser<UserLoginRequest> PARSER =
          new com.google.protobuf.AbstractParser<UserLoginRequest>() {
        public UserLoginRequest parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new UserLoginRequest(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<UserLoginRequest> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional string login = 1;
      public static final int LOGIN_FIELD_NUMBER = 1;
      private java.lang.Object login_;
      /**
       * <code>optional string login = 1;</code>
       */
      public boolean hasLogin() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string login = 1;</code>
       */
      public java.lang.String getLogin() {
        java.lang.Object ref = login_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            login_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string login = 1;</code>
       */
      public com.google.protobuf.ByteString
          getLoginBytes() {
        java.lang.Object ref = login_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          login_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      // optional string password = 2;
      public static final int PASSWORD_FIELD_NUMBER = 2;
      private java.lang.Object password_;
      /**
       * <code>optional string password = 2;</code>
       */
      public boolean hasPassword() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string password = 2;</code>
       */
      public java.lang.String getPassword() {
        java.lang.Object ref = password_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            password_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string password = 2;</code>
       */
      public com.google.protobuf.ByteString
          getPasswordBytes() {
        java.lang.Object ref = password_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          password_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private void initFields() {
        login_ = "";
        password_ = "";
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeBytes(1, getLoginBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeBytes(2, getPasswordBytes());
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(1, getLoginBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(2, getPasswordBytes());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UserLoginRequest}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequestOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UserLoginRequest_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UserLoginRequest_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          login_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          password_ = "";
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UserLoginRequest_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.login_ = login_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.password_ = password_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest.getDefaultInstance()) return this;
          if (other.hasLogin()) {
            bitField0_ |= 0x00000001;
            login_ = other.login_;
            onChanged();
          }
          if (other.hasPassword()) {
            bitField0_ |= 0x00000002;
            password_ = other.password_;
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional string login = 1;
        private java.lang.Object login_ = "";
        /**
         * <code>optional string login = 1;</code>
         */
        public boolean hasLogin() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional string login = 1;</code>
         */
        public java.lang.String getLogin() {
          java.lang.Object ref = login_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            login_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string login = 1;</code>
         */
        public com.google.protobuf.ByteString
            getLoginBytes() {
          java.lang.Object ref = login_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            login_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string login = 1;</code>
         */
        public Builder setLogin(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          login_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string login = 1;</code>
         */
        public Builder clearLogin() {
          bitField0_ = (bitField0_ & ~0x00000001);
          login_ = getDefaultInstance().getLogin();
          onChanged();
          return this;
        }
        /**
         * <code>optional string login = 1;</code>
         */
        public Builder setLoginBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          login_ = value;
          onChanged();
          return this;
        }

        // optional string password = 2;
        private java.lang.Object password_ = "";
        /**
         * <code>optional string password = 2;</code>
         */
        public boolean hasPassword() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional string password = 2;</code>
         */
        public java.lang.String getPassword() {
          java.lang.Object ref = password_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            password_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string password = 2;</code>
         */
        public com.google.protobuf.ByteString
            getPasswordBytes() {
          java.lang.Object ref = password_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            password_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string password = 2;</code>
         */
        public Builder setPassword(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          password_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string password = 2;</code>
         */
        public Builder clearPassword() {
          bitField0_ = (bitField0_ & ~0x00000002);
          password_ = getDefaultInstance().getPassword();
          onChanged();
          return this;
        }
        /**
         * <code>optional string password = 2;</code>
         */
        public Builder setPasswordBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          password_ = value;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.UserLoginRequest)
      }

      static {
        defaultInstance = new UserLoginRequest(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.UserLoginRequest)
    }

    public interface SendConfigurationRequestOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional uint32 client_id = 1;
      /**
       * <code>optional uint32 client_id = 1;</code>
       */
      boolean hasClientId();
      /**
       * <code>optional uint32 client_id = 1;</code>
       */
      int getClientId();

      // optional uint32 user_id = 2;
      /**
       * <code>optional uint32 user_id = 2;</code>
       */
      boolean hasUserId();
      /**
       * <code>optional uint32 user_id = 2;</code>
       */
      int getUserId();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.SendConfigurationRequest}
     */
    public static final class SendConfigurationRequest extends
        com.google.protobuf.GeneratedMessage
        implements SendConfigurationRequestOrBuilder {
      // Use SendConfigurationRequest.newBuilder() to construct.
      private SendConfigurationRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private SendConfigurationRequest(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final SendConfigurationRequest defaultInstance;
      public static SendConfigurationRequest getDefaultInstance() {
        return defaultInstance;
      }

      public SendConfigurationRequest getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private SendConfigurationRequest(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                clientId_ = input.readUInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                userId_ = input.readUInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_SendConfigurationRequest_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_SendConfigurationRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest.Builder.class);
      }

      public static com.google.protobuf.Parser<SendConfigurationRequest> PARSER =
          new com.google.protobuf.AbstractParser<SendConfigurationRequest>() {
        public SendConfigurationRequest parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new SendConfigurationRequest(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<SendConfigurationRequest> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional uint32 client_id = 1;
      public static final int CLIENT_ID_FIELD_NUMBER = 1;
      private int clientId_;
      /**
       * <code>optional uint32 client_id = 1;</code>
       */
      public boolean hasClientId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 client_id = 1;</code>
       */
      public int getClientId() {
        return clientId_;
      }

      // optional uint32 user_id = 2;
      public static final int USER_ID_FIELD_NUMBER = 2;
      private int userId_;
      /**
       * <code>optional uint32 user_id = 2;</code>
       */
      public boolean hasUserId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 user_id = 2;</code>
       */
      public int getUserId() {
        return userId_;
      }

      private void initFields() {
        clientId_ = 0;
        userId_ = 0;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, clientId_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeUInt32(2, userId_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, clientId_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(2, userId_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.SendConfigurationRequest}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequestOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_SendConfigurationRequest_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_SendConfigurationRequest_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          clientId_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          userId_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_SendConfigurationRequest_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.clientId_ = clientId_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.userId_ = userId_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest.getDefaultInstance()) return this;
          if (other.hasClientId()) {
            setClientId(other.getClientId());
          }
          if (other.hasUserId()) {
            setUserId(other.getUserId());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional uint32 client_id = 1;
        private int clientId_ ;
        /**
         * <code>optional uint32 client_id = 1;</code>
         */
        public boolean hasClientId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint32 client_id = 1;</code>
         */
        public int getClientId() {
          return clientId_;
        }
        /**
         * <code>optional uint32 client_id = 1;</code>
         */
        public Builder setClientId(int value) {
          bitField0_ |= 0x00000001;
          clientId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 client_id = 1;</code>
         */
        public Builder clearClientId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          clientId_ = 0;
          onChanged();
          return this;
        }

        // optional uint32 user_id = 2;
        private int userId_ ;
        /**
         * <code>optional uint32 user_id = 2;</code>
         */
        public boolean hasUserId() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional uint32 user_id = 2;</code>
         */
        public int getUserId() {
          return userId_;
        }
        /**
         * <code>optional uint32 user_id = 2;</code>
         */
        public Builder setUserId(int value) {
          bitField0_ |= 0x00000002;
          userId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 user_id = 2;</code>
         */
        public Builder clearUserId() {
          bitField0_ = (bitField0_ & ~0x00000002);
          userId_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.SendConfigurationRequest)
      }

      static {
        defaultInstance = new SendConfigurationRequest(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.SendConfigurationRequest)
    }

    public interface UserLoginReplyOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional uint32 error_code = 1;
      /**
       * <code>optional uint32 error_code = 1;</code>
       */
      boolean hasErrorCode();
      /**
       * <code>optional uint32 error_code = 1;</code>
       */
      int getErrorCode();

      // optional string error_message = 2;
      /**
       * <code>optional string error_message = 2;</code>
       */
      boolean hasErrorMessage();
      /**
       * <code>optional string error_message = 2;</code>
       */
      java.lang.String getErrorMessage();
      /**
       * <code>optional string error_message = 2;</code>
       */
      com.google.protobuf.ByteString
          getErrorMessageBytes();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UserLoginReply}
     */
    public static final class UserLoginReply extends
        com.google.protobuf.GeneratedMessage
        implements UserLoginReplyOrBuilder {
      // Use UserLoginReply.newBuilder() to construct.
      private UserLoginReply(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private UserLoginReply(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final UserLoginReply defaultInstance;
      public static UserLoginReply getDefaultInstance() {
        return defaultInstance;
      }

      public UserLoginReply getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private UserLoginReply(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                errorCode_ = input.readUInt32();
                break;
              }
              case 18: {
                bitField0_ |= 0x00000002;
                errorMessage_ = input.readBytes();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UserLoginReply_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UserLoginReply_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply.Builder.class);
      }

      public static com.google.protobuf.Parser<UserLoginReply> PARSER =
          new com.google.protobuf.AbstractParser<UserLoginReply>() {
        public UserLoginReply parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new UserLoginReply(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<UserLoginReply> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional uint32 error_code = 1;
      public static final int ERROR_CODE_FIELD_NUMBER = 1;
      private int errorCode_;
      /**
       * <code>optional uint32 error_code = 1;</code>
       */
      public boolean hasErrorCode() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 error_code = 1;</code>
       */
      public int getErrorCode() {
        return errorCode_;
      }

      // optional string error_message = 2;
      public static final int ERROR_MESSAGE_FIELD_NUMBER = 2;
      private java.lang.Object errorMessage_;
      /**
       * <code>optional string error_message = 2;</code>
       */
      public boolean hasErrorMessage() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string error_message = 2;</code>
       */
      public java.lang.String getErrorMessage() {
        java.lang.Object ref = errorMessage_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            errorMessage_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string error_message = 2;</code>
       */
      public com.google.protobuf.ByteString
          getErrorMessageBytes() {
        java.lang.Object ref = errorMessage_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          errorMessage_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private void initFields() {
        errorCode_ = 0;
        errorMessage_ = "";
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, errorCode_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeBytes(2, getErrorMessageBytes());
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, errorCode_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(2, getErrorMessageBytes());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UserLoginReply}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReplyOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UserLoginReply_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UserLoginReply_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          errorCode_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          errorMessage_ = "";
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UserLoginReply_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.errorCode_ = errorCode_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.errorMessage_ = errorMessage_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply.getDefaultInstance()) return this;
          if (other.hasErrorCode()) {
            setErrorCode(other.getErrorCode());
          }
          if (other.hasErrorMessage()) {
            bitField0_ |= 0x00000002;
            errorMessage_ = other.errorMessage_;
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional uint32 error_code = 1;
        private int errorCode_ ;
        /**
         * <code>optional uint32 error_code = 1;</code>
         */
        public boolean hasErrorCode() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint32 error_code = 1;</code>
         */
        public int getErrorCode() {
          return errorCode_;
        }
        /**
         * <code>optional uint32 error_code = 1;</code>
         */
        public Builder setErrorCode(int value) {
          bitField0_ |= 0x00000001;
          errorCode_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 error_code = 1;</code>
         */
        public Builder clearErrorCode() {
          bitField0_ = (bitField0_ & ~0x00000001);
          errorCode_ = 0;
          onChanged();
          return this;
        }

        // optional string error_message = 2;
        private java.lang.Object errorMessage_ = "";
        /**
         * <code>optional string error_message = 2;</code>
         */
        public boolean hasErrorMessage() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional string error_message = 2;</code>
         */
        public java.lang.String getErrorMessage() {
          java.lang.Object ref = errorMessage_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            errorMessage_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string error_message = 2;</code>
         */
        public com.google.protobuf.ByteString
            getErrorMessageBytes() {
          java.lang.Object ref = errorMessage_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            errorMessage_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string error_message = 2;</code>
         */
        public Builder setErrorMessage(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          errorMessage_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string error_message = 2;</code>
         */
        public Builder clearErrorMessage() {
          bitField0_ = (bitField0_ & ~0x00000002);
          errorMessage_ = getDefaultInstance().getErrorMessage();
          onChanged();
          return this;
        }
        /**
         * <code>optional string error_message = 2;</code>
         */
        public Builder setErrorMessageBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          errorMessage_ = value;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.UserLoginReply)
      }

      static {
        defaultInstance = new UserLoginReply(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.UserLoginReply)
    }

    public interface UserLogoutRequestOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional string login = 1;
      /**
       * <code>optional string login = 1;</code>
       */
      boolean hasLogin();
      /**
       * <code>optional string login = 1;</code>
       */
      java.lang.String getLogin();
      /**
       * <code>optional string login = 1;</code>
       */
      com.google.protobuf.ByteString
          getLoginBytes();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UserLogoutRequest}
     */
    public static final class UserLogoutRequest extends
        com.google.protobuf.GeneratedMessage
        implements UserLogoutRequestOrBuilder {
      // Use UserLogoutRequest.newBuilder() to construct.
      private UserLogoutRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private UserLogoutRequest(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final UserLogoutRequest defaultInstance;
      public static UserLogoutRequest getDefaultInstance() {
        return defaultInstance;
      }

      public UserLogoutRequest getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private UserLogoutRequest(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                bitField0_ |= 0x00000001;
                login_ = input.readBytes();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UserLogoutRequest_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UserLogoutRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest.Builder.class);
      }

      public static com.google.protobuf.Parser<UserLogoutRequest> PARSER =
          new com.google.protobuf.AbstractParser<UserLogoutRequest>() {
        public UserLogoutRequest parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new UserLogoutRequest(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<UserLogoutRequest> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional string login = 1;
      public static final int LOGIN_FIELD_NUMBER = 1;
      private java.lang.Object login_;
      /**
       * <code>optional string login = 1;</code>
       */
      public boolean hasLogin() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string login = 1;</code>
       */
      public java.lang.String getLogin() {
        java.lang.Object ref = login_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            login_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string login = 1;</code>
       */
      public com.google.protobuf.ByteString
          getLoginBytes() {
        java.lang.Object ref = login_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          login_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private void initFields() {
        login_ = "";
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeBytes(1, getLoginBytes());
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(1, getLoginBytes());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UserLogoutRequest}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequestOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UserLogoutRequest_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UserLogoutRequest_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          login_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UserLogoutRequest_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.login_ = login_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest.getDefaultInstance()) return this;
          if (other.hasLogin()) {
            bitField0_ |= 0x00000001;
            login_ = other.login_;
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional string login = 1;
        private java.lang.Object login_ = "";
        /**
         * <code>optional string login = 1;</code>
         */
        public boolean hasLogin() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional string login = 1;</code>
         */
        public java.lang.String getLogin() {
          java.lang.Object ref = login_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            login_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string login = 1;</code>
         */
        public com.google.protobuf.ByteString
            getLoginBytes() {
          java.lang.Object ref = login_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            login_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string login = 1;</code>
         */
        public Builder setLogin(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          login_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string login = 1;</code>
         */
        public Builder clearLogin() {
          bitField0_ = (bitField0_ & ~0x00000001);
          login_ = getDefaultInstance().getLogin();
          onChanged();
          return this;
        }
        /**
         * <code>optional string login = 1;</code>
         */
        public Builder setLoginBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          login_ = value;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.UserLogoutRequest)
      }

      static {
        defaultInstance = new UserLogoutRequest(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.UserLogoutRequest)
    }

    public interface UserLogoutReplyOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional uint32 error_code = 1;
      /**
       * <code>optional uint32 error_code = 1;</code>
       */
      boolean hasErrorCode();
      /**
       * <code>optional uint32 error_code = 1;</code>
       */
      int getErrorCode();

      // optional string error_message = 2;
      /**
       * <code>optional string error_message = 2;</code>
       */
      boolean hasErrorMessage();
      /**
       * <code>optional string error_message = 2;</code>
       */
      java.lang.String getErrorMessage();
      /**
       * <code>optional string error_message = 2;</code>
       */
      com.google.protobuf.ByteString
          getErrorMessageBytes();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UserLogoutReply}
     */
    public static final class UserLogoutReply extends
        com.google.protobuf.GeneratedMessage
        implements UserLogoutReplyOrBuilder {
      // Use UserLogoutReply.newBuilder() to construct.
      private UserLogoutReply(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private UserLogoutReply(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final UserLogoutReply defaultInstance;
      public static UserLogoutReply getDefaultInstance() {
        return defaultInstance;
      }

      public UserLogoutReply getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private UserLogoutReply(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                errorCode_ = input.readUInt32();
                break;
              }
              case 18: {
                bitField0_ |= 0x00000002;
                errorMessage_ = input.readBytes();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UserLogoutReply_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UserLogoutReply_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutReply.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutReply.Builder.class);
      }

      public static com.google.protobuf.Parser<UserLogoutReply> PARSER =
          new com.google.protobuf.AbstractParser<UserLogoutReply>() {
        public UserLogoutReply parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new UserLogoutReply(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<UserLogoutReply> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional uint32 error_code = 1;
      public static final int ERROR_CODE_FIELD_NUMBER = 1;
      private int errorCode_;
      /**
       * <code>optional uint32 error_code = 1;</code>
       */
      public boolean hasErrorCode() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 error_code = 1;</code>
       */
      public int getErrorCode() {
        return errorCode_;
      }

      // optional string error_message = 2;
      public static final int ERROR_MESSAGE_FIELD_NUMBER = 2;
      private java.lang.Object errorMessage_;
      /**
       * <code>optional string error_message = 2;</code>
       */
      public boolean hasErrorMessage() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string error_message = 2;</code>
       */
      public java.lang.String getErrorMessage() {
        java.lang.Object ref = errorMessage_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            errorMessage_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string error_message = 2;</code>
       */
      public com.google.protobuf.ByteString
          getErrorMessageBytes() {
        java.lang.Object ref = errorMessage_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          errorMessage_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private void initFields() {
        errorCode_ = 0;
        errorMessage_ = "";
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, errorCode_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeBytes(2, getErrorMessageBytes());
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, errorCode_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(2, getErrorMessageBytes());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutReply parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutReply parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutReply parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutReply parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutReply parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutReply parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutReply parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutReply parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutReply parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutReply parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutReply prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UserLogoutReply}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutReplyOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UserLogoutReply_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UserLogoutReply_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutReply.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutReply.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutReply.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          errorCode_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          errorMessage_ = "";
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UserLogoutReply_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutReply getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutReply.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutReply build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutReply result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutReply buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutReply result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutReply(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.errorCode_ = errorCode_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.errorMessage_ = errorMessage_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutReply) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutReply)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutReply other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutReply.getDefaultInstance()) return this;
          if (other.hasErrorCode()) {
            setErrorCode(other.getErrorCode());
          }
          if (other.hasErrorMessage()) {
            bitField0_ |= 0x00000002;
            errorMessage_ = other.errorMessage_;
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutReply parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutReply) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional uint32 error_code = 1;
        private int errorCode_ ;
        /**
         * <code>optional uint32 error_code = 1;</code>
         */
        public boolean hasErrorCode() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint32 error_code = 1;</code>
         */
        public int getErrorCode() {
          return errorCode_;
        }
        /**
         * <code>optional uint32 error_code = 1;</code>
         */
        public Builder setErrorCode(int value) {
          bitField0_ |= 0x00000001;
          errorCode_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 error_code = 1;</code>
         */
        public Builder clearErrorCode() {
          bitField0_ = (bitField0_ & ~0x00000001);
          errorCode_ = 0;
          onChanged();
          return this;
        }

        // optional string error_message = 2;
        private java.lang.Object errorMessage_ = "";
        /**
         * <code>optional string error_message = 2;</code>
         */
        public boolean hasErrorMessage() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional string error_message = 2;</code>
         */
        public java.lang.String getErrorMessage() {
          java.lang.Object ref = errorMessage_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            errorMessage_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string error_message = 2;</code>
         */
        public com.google.protobuf.ByteString
            getErrorMessageBytes() {
          java.lang.Object ref = errorMessage_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            errorMessage_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string error_message = 2;</code>
         */
        public Builder setErrorMessage(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          errorMessage_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string error_message = 2;</code>
         */
        public Builder clearErrorMessage() {
          bitField0_ = (bitField0_ & ~0x00000002);
          errorMessage_ = getDefaultInstance().getErrorMessage();
          onChanged();
          return this;
        }
        /**
         * <code>optional string error_message = 2;</code>
         */
        public Builder setErrorMessageBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          errorMessage_ = value;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.UserLogoutReply)
      }

      static {
        defaultInstance = new UserLogoutReply(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.UserLogoutReply)
    }

    public interface AddControlObjectPassportOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.ControlObjectPassport passport = 1;
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectPassport passport = 1;</code>
       */
      boolean hasPassport();
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectPassport passport = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport getPassport();
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectPassport passport = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassportOrBuilder getPassportOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport}
     *
     * <pre>
     * Добавление/удаление/обновление паспортов КО.
     * </pre>
     */
    public static final class AddControlObjectPassport extends
        com.google.protobuf.GeneratedMessage
        implements AddControlObjectPassportOrBuilder {
      // Use AddControlObjectPassport.newBuilder() to construct.
      private AddControlObjectPassport(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private AddControlObjectPassport(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final AddControlObjectPassport defaultInstance;
      public static AddControlObjectPassport getDefaultInstance() {
        return defaultInstance;
      }

      public AddControlObjectPassport getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private AddControlObjectPassport(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = passport_.toBuilder();
                }
                passport_ = input.readMessage(ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(passport_);
                  passport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectPassport_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectPassport_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport.Builder.class);
      }

      public static com.google.protobuf.Parser<AddControlObjectPassport> PARSER =
          new com.google.protobuf.AbstractParser<AddControlObjectPassport>() {
        public AddControlObjectPassport parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new AddControlObjectPassport(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<AddControlObjectPassport> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.ControlObjectPassport passport = 1;
      public static final int PASSPORT_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport passport_;
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectPassport passport = 1;</code>
       */
      public boolean hasPassport() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectPassport passport = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport getPassport() {
        return passport_;
      }
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectPassport passport = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassportOrBuilder getPassportOrBuilder() {
        return passport_;
      }

      private void initFields() {
        passport_ = ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasPassport()) {
          if (!getPassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, passport_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, passport_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport}
       *
       * <pre>
       * Добавление/удаление/обновление паспортов КО.
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectPassport_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectPassport_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getPassportFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (passportBuilder_ == null) {
            passport_ = ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport.getDefaultInstance();
          } else {
            passportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectPassport_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (passportBuilder_ == null) {
            result.passport_ = passport_;
          } else {
            result.passport_ = passportBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport.getDefaultInstance()) return this;
          if (other.hasPassport()) {
            mergePassport(other.getPassport());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasPassport()) {
            if (!getPassport().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.ControlObjectPassport passport = 1;
        private ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport passport_ = ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport, ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport.Builder, ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassportOrBuilder> passportBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassport passport = 1;</code>
         */
        public boolean hasPassport() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport getPassport() {
          if (passportBuilder_ == null) {
            return passport_;
          } else {
            return passportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassport passport = 1;</code>
         */
        public Builder setPassport(ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport value) {
          if (passportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            passport_ = value;
            onChanged();
          } else {
            passportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassport passport = 1;</code>
         */
        public Builder setPassport(
            ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport.Builder builderForValue) {
          if (passportBuilder_ == null) {
            passport_ = builderForValue.build();
            onChanged();
          } else {
            passportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassport passport = 1;</code>
         */
        public Builder mergePassport(ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport value) {
          if (passportBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                passport_ != ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport.getDefaultInstance()) {
              passport_ =
                ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport.newBuilder(passport_).mergeFrom(value).buildPartial();
            } else {
              passport_ = value;
            }
            onChanged();
          } else {
            passportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassport passport = 1;</code>
         */
        public Builder clearPassport() {
          if (passportBuilder_ == null) {
            passport_ = ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport.getDefaultInstance();
            onChanged();
          } else {
            passportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport.Builder getPassportBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassportOrBuilder getPassportOrBuilder() {
          if (passportBuilder_ != null) {
            return passportBuilder_.getMessageOrBuilder();
          } else {
            return passport_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassport passport = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport, ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport.Builder, ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassportOrBuilder> 
            getPassportFieldBuilder() {
          if (passportBuilder_ == null) {
            passportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport, ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport.Builder, ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassportOrBuilder>(
                    passport_,
                    getParentForChildren(),
                    isClean());
            passport_ = null;
          }
          return passportBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport)
      }

      static {
        defaultInstance = new AddControlObjectPassport(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport)
    }

    public interface UpdControlObjectPassportOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.ControlObjectPassport passport = 1;
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectPassport passport = 1;</code>
       */
      boolean hasPassport();
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectPassport passport = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport getPassport();
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectPassport passport = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassportOrBuilder getPassportOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport}
     */
    public static final class UpdControlObjectPassport extends
        com.google.protobuf.GeneratedMessage
        implements UpdControlObjectPassportOrBuilder {
      // Use UpdControlObjectPassport.newBuilder() to construct.
      private UpdControlObjectPassport(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private UpdControlObjectPassport(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final UpdControlObjectPassport defaultInstance;
      public static UpdControlObjectPassport getDefaultInstance() {
        return defaultInstance;
      }

      public UpdControlObjectPassport getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private UpdControlObjectPassport(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = passport_.toBuilder();
                }
                passport_ = input.readMessage(ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(passport_);
                  passport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectPassport_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectPassport_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport.Builder.class);
      }

      public static com.google.protobuf.Parser<UpdControlObjectPassport> PARSER =
          new com.google.protobuf.AbstractParser<UpdControlObjectPassport>() {
        public UpdControlObjectPassport parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new UpdControlObjectPassport(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<UpdControlObjectPassport> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.ControlObjectPassport passport = 1;
      public static final int PASSPORT_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport passport_;
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectPassport passport = 1;</code>
       */
      public boolean hasPassport() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectPassport passport = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport getPassport() {
        return passport_;
      }
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectPassport passport = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassportOrBuilder getPassportOrBuilder() {
        return passport_;
      }

      private void initFields() {
        passport_ = ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasPassport()) {
          if (!getPassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, passport_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, passport_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectPassport_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectPassport_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getPassportFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (passportBuilder_ == null) {
            passport_ = ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport.getDefaultInstance();
          } else {
            passportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectPassport_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (passportBuilder_ == null) {
            result.passport_ = passport_;
          } else {
            result.passport_ = passportBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport.getDefaultInstance()) return this;
          if (other.hasPassport()) {
            mergePassport(other.getPassport());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasPassport()) {
            if (!getPassport().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.ControlObjectPassport passport = 1;
        private ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport passport_ = ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport, ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport.Builder, ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassportOrBuilder> passportBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassport passport = 1;</code>
         */
        public boolean hasPassport() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport getPassport() {
          if (passportBuilder_ == null) {
            return passport_;
          } else {
            return passportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassport passport = 1;</code>
         */
        public Builder setPassport(ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport value) {
          if (passportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            passport_ = value;
            onChanged();
          } else {
            passportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassport passport = 1;</code>
         */
        public Builder setPassport(
            ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport.Builder builderForValue) {
          if (passportBuilder_ == null) {
            passport_ = builderForValue.build();
            onChanged();
          } else {
            passportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassport passport = 1;</code>
         */
        public Builder mergePassport(ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport value) {
          if (passportBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                passport_ != ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport.getDefaultInstance()) {
              passport_ =
                ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport.newBuilder(passport_).mergeFrom(value).buildPartial();
            } else {
              passport_ = value;
            }
            onChanged();
          } else {
            passportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassport passport = 1;</code>
         */
        public Builder clearPassport() {
          if (passportBuilder_ == null) {
            passport_ = ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport.getDefaultInstance();
            onChanged();
          } else {
            passportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport.Builder getPassportBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassportOrBuilder getPassportOrBuilder() {
          if (passportBuilder_ != null) {
            return passportBuilder_.getMessageOrBuilder();
          } else {
            return passport_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassport passport = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport, ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport.Builder, ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassportOrBuilder> 
            getPassportFieldBuilder() {
          if (passportBuilder_ == null) {
            passportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport, ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassport.Builder, ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.ControlObjectPassportOrBuilder>(
                    passport_,
                    getParentForChildren(),
                    isClean());
            passport_ = null;
          }
          return passportBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport)
      }

      static {
        defaultInstance = new UpdControlObjectPassport(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport)
    }

    public interface DelControlObjectPassportOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional uint32 passport_id = 1;
      /**
       * <code>optional uint32 passport_id = 1;</code>
       */
      boolean hasPassportId();
      /**
       * <code>optional uint32 passport_id = 1;</code>
       */
      int getPassportId();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport}
     */
    public static final class DelControlObjectPassport extends
        com.google.protobuf.GeneratedMessage
        implements DelControlObjectPassportOrBuilder {
      // Use DelControlObjectPassport.newBuilder() to construct.
      private DelControlObjectPassport(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private DelControlObjectPassport(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final DelControlObjectPassport defaultInstance;
      public static DelControlObjectPassport getDefaultInstance() {
        return defaultInstance;
      }

      public DelControlObjectPassport getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private DelControlObjectPassport(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                passportId_ = input.readUInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelControlObjectPassport_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelControlObjectPassport_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport.Builder.class);
      }

      public static com.google.protobuf.Parser<DelControlObjectPassport> PARSER =
          new com.google.protobuf.AbstractParser<DelControlObjectPassport>() {
        public DelControlObjectPassport parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new DelControlObjectPassport(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<DelControlObjectPassport> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional uint32 passport_id = 1;
      public static final int PASSPORT_ID_FIELD_NUMBER = 1;
      private int passportId_;
      /**
       * <code>optional uint32 passport_id = 1;</code>
       */
      public boolean hasPassportId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 passport_id = 1;</code>
       */
      public int getPassportId() {
        return passportId_;
      }

      private void initFields() {
        passportId_ = 0;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, passportId_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, passportId_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelControlObjectPassport_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelControlObjectPassport_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          passportId_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelControlObjectPassport_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.passportId_ = passportId_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport.getDefaultInstance()) return this;
          if (other.hasPassportId()) {
            setPassportId(other.getPassportId());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional uint32 passport_id = 1;
        private int passportId_ ;
        /**
         * <code>optional uint32 passport_id = 1;</code>
         */
        public boolean hasPassportId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint32 passport_id = 1;</code>
         */
        public int getPassportId() {
          return passportId_;
        }
        /**
         * <code>optional uint32 passport_id = 1;</code>
         */
        public Builder setPassportId(int value) {
          bitField0_ |= 0x00000001;
          passportId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 passport_id = 1;</code>
         */
        public Builder clearPassportId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          passportId_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport)
      }

      static {
        defaultInstance = new DelControlObjectPassport(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport)
    }

    public interface AddControlObjectStatusOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.ControlObjectStatus status = 1;
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectStatus status = 1;</code>
       */
      boolean hasStatus();
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectStatus status = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus getStatus();
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectStatus status = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatusOrBuilder getStatusOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddControlObjectStatus}
     */
    public static final class AddControlObjectStatus extends
        com.google.protobuf.GeneratedMessage
        implements AddControlObjectStatusOrBuilder {
      // Use AddControlObjectStatus.newBuilder() to construct.
      private AddControlObjectStatus(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private AddControlObjectStatus(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final AddControlObjectStatus defaultInstance;
      public static AddControlObjectStatus getDefaultInstance() {
        return defaultInstance;
      }

      public AddControlObjectStatus getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private AddControlObjectStatus(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = status_.toBuilder();
                }
                status_ = input.readMessage(ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(status_);
                  status_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectStatus_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectStatus_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus.Builder.class);
      }

      public static com.google.protobuf.Parser<AddControlObjectStatus> PARSER =
          new com.google.protobuf.AbstractParser<AddControlObjectStatus>() {
        public AddControlObjectStatus parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new AddControlObjectStatus(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<AddControlObjectStatus> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.ControlObjectStatus status = 1;
      public static final int STATUS_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus status_;
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectStatus status = 1;</code>
       */
      public boolean hasStatus() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectStatus status = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus getStatus() {
        return status_;
      }
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectStatus status = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatusOrBuilder getStatusOrBuilder() {
        return status_;
      }

      private void initFields() {
        status_ = ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, status_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, status_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddControlObjectStatus}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatusOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectStatus_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectStatus_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getStatusFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (statusBuilder_ == null) {
            status_ = ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus.getDefaultInstance();
          } else {
            statusBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectStatus_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (statusBuilder_ == null) {
            result.status_ = status_;
          } else {
            result.status_ = statusBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus.getDefaultInstance()) return this;
          if (other.hasStatus()) {
            mergeStatus(other.getStatus());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.ControlObjectStatus status = 1;
        private ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus status_ = ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus, ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus.Builder, ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatusOrBuilder> statusBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectStatus status = 1;</code>
         */
        public boolean hasStatus() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectStatus status = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus getStatus() {
          if (statusBuilder_ == null) {
            return status_;
          } else {
            return statusBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectStatus status = 1;</code>
         */
        public Builder setStatus(ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus value) {
          if (statusBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            status_ = value;
            onChanged();
          } else {
            statusBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectStatus status = 1;</code>
         */
        public Builder setStatus(
            ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus.Builder builderForValue) {
          if (statusBuilder_ == null) {
            status_ = builderForValue.build();
            onChanged();
          } else {
            statusBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectStatus status = 1;</code>
         */
        public Builder mergeStatus(ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus value) {
          if (statusBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                status_ != ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus.getDefaultInstance()) {
              status_ =
                ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus.newBuilder(status_).mergeFrom(value).buildPartial();
            } else {
              status_ = value;
            }
            onChanged();
          } else {
            statusBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectStatus status = 1;</code>
         */
        public Builder clearStatus() {
          if (statusBuilder_ == null) {
            status_ = ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus.getDefaultInstance();
            onChanged();
          } else {
            statusBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectStatus status = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus.Builder getStatusBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getStatusFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectStatus status = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatusOrBuilder getStatusOrBuilder() {
          if (statusBuilder_ != null) {
            return statusBuilder_.getMessageOrBuilder();
          } else {
            return status_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectStatus status = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus, ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus.Builder, ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatusOrBuilder> 
            getStatusFieldBuilder() {
          if (statusBuilder_ == null) {
            statusBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus, ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus.Builder, ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatusOrBuilder>(
                    status_,
                    getParentForChildren(),
                    isClean());
            status_ = null;
          }
          return statusBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.AddControlObjectStatus)
      }

      static {
        defaultInstance = new AddControlObjectStatus(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.AddControlObjectStatus)
    }

    public interface UpdControlObjectStatusOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.ControlObjectStatus status = 1;
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectStatus status = 1;</code>
       */
      boolean hasStatus();
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectStatus status = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus getStatus();
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectStatus status = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatusOrBuilder getStatusOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdControlObjectStatus}
     */
    public static final class UpdControlObjectStatus extends
        com.google.protobuf.GeneratedMessage
        implements UpdControlObjectStatusOrBuilder {
      // Use UpdControlObjectStatus.newBuilder() to construct.
      private UpdControlObjectStatus(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private UpdControlObjectStatus(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final UpdControlObjectStatus defaultInstance;
      public static UpdControlObjectStatus getDefaultInstance() {
        return defaultInstance;
      }

      public UpdControlObjectStatus getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private UpdControlObjectStatus(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = status_.toBuilder();
                }
                status_ = input.readMessage(ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(status_);
                  status_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectStatus_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectStatus_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus.Builder.class);
      }

      public static com.google.protobuf.Parser<UpdControlObjectStatus> PARSER =
          new com.google.protobuf.AbstractParser<UpdControlObjectStatus>() {
        public UpdControlObjectStatus parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new UpdControlObjectStatus(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<UpdControlObjectStatus> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.ControlObjectStatus status = 1;
      public static final int STATUS_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus status_;
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectStatus status = 1;</code>
       */
      public boolean hasStatus() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectStatus status = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus getStatus() {
        return status_;
      }
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectStatus status = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatusOrBuilder getStatusOrBuilder() {
        return status_;
      }

      private void initFields() {
        status_ = ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, status_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, status_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdControlObjectStatus}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatusOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectStatus_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectStatus_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getStatusFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (statusBuilder_ == null) {
            status_ = ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus.getDefaultInstance();
          } else {
            statusBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectStatus_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (statusBuilder_ == null) {
            result.status_ = status_;
          } else {
            result.status_ = statusBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus.getDefaultInstance()) return this;
          if (other.hasStatus()) {
            mergeStatus(other.getStatus());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.ControlObjectStatus status = 1;
        private ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus status_ = ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus, ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus.Builder, ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatusOrBuilder> statusBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectStatus status = 1;</code>
         */
        public boolean hasStatus() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectStatus status = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus getStatus() {
          if (statusBuilder_ == null) {
            return status_;
          } else {
            return statusBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectStatus status = 1;</code>
         */
        public Builder setStatus(ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus value) {
          if (statusBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            status_ = value;
            onChanged();
          } else {
            statusBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectStatus status = 1;</code>
         */
        public Builder setStatus(
            ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus.Builder builderForValue) {
          if (statusBuilder_ == null) {
            status_ = builderForValue.build();
            onChanged();
          } else {
            statusBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectStatus status = 1;</code>
         */
        public Builder mergeStatus(ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus value) {
          if (statusBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                status_ != ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus.getDefaultInstance()) {
              status_ =
                ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus.newBuilder(status_).mergeFrom(value).buildPartial();
            } else {
              status_ = value;
            }
            onChanged();
          } else {
            statusBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectStatus status = 1;</code>
         */
        public Builder clearStatus() {
          if (statusBuilder_ == null) {
            status_ = ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus.getDefaultInstance();
            onChanged();
          } else {
            statusBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectStatus status = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus.Builder getStatusBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getStatusFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectStatus status = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatusOrBuilder getStatusOrBuilder() {
          if (statusBuilder_ != null) {
            return statusBuilder_.getMessageOrBuilder();
          } else {
            return status_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectStatus status = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus, ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus.Builder, ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatusOrBuilder> 
            getStatusFieldBuilder() {
          if (statusBuilder_ == null) {
            statusBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus, ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatus.Builder, ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectStatusOrBuilder>(
                    status_,
                    getParentForChildren(),
                    isClean());
            status_ = null;
          }
          return statusBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.UpdControlObjectStatus)
      }

      static {
        defaultInstance = new UpdControlObjectStatus(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.UpdControlObjectStatus)
    }

    public interface UpdControlObjectStateOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.ControlObjectState state = 1;
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectState state = 1;</code>
       */
      boolean hasState();
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectState state = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState getState();
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectState state = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectStateOrBuilder getStateOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdControlObjectState}
     */
    public static final class UpdControlObjectState extends
        com.google.protobuf.GeneratedMessage
        implements UpdControlObjectStateOrBuilder {
      // Use UpdControlObjectState.newBuilder() to construct.
      private UpdControlObjectState(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private UpdControlObjectState(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final UpdControlObjectState defaultInstance;
      public static UpdControlObjectState getDefaultInstance() {
        return defaultInstance;
      }

      public UpdControlObjectState getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private UpdControlObjectState(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = state_.toBuilder();
                }
                state_ = input.readMessage(ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(state_);
                  state_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectState_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectState_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState.Builder.class);
      }

      public static com.google.protobuf.Parser<UpdControlObjectState> PARSER =
          new com.google.protobuf.AbstractParser<UpdControlObjectState>() {
        public UpdControlObjectState parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new UpdControlObjectState(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<UpdControlObjectState> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.ControlObjectState state = 1;
      public static final int STATE_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState state_;
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectState state = 1;</code>
       */
      public boolean hasState() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectState state = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState getState() {
        return state_;
      }
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectState state = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectStateOrBuilder getStateOrBuilder() {
        return state_;
      }

      private void initFields() {
        state_ = ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, state_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, state_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdControlObjectState}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStateOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectState_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectState_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getStateFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (stateBuilder_ == null) {
            state_ = ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState.getDefaultInstance();
          } else {
            stateBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectState_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (stateBuilder_ == null) {
            result.state_ = state_;
          } else {
            result.state_ = stateBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState.getDefaultInstance()) return this;
          if (other.hasState()) {
            mergeState(other.getState());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.ControlObjectState state = 1;
        private ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState state_ = ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState, ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState.Builder, ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectStateOrBuilder> stateBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectState state = 1;</code>
         */
        public boolean hasState() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectState state = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState getState() {
          if (stateBuilder_ == null) {
            return state_;
          } else {
            return stateBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectState state = 1;</code>
         */
        public Builder setState(ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState value) {
          if (stateBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            state_ = value;
            onChanged();
          } else {
            stateBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectState state = 1;</code>
         */
        public Builder setState(
            ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState.Builder builderForValue) {
          if (stateBuilder_ == null) {
            state_ = builderForValue.build();
            onChanged();
          } else {
            stateBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectState state = 1;</code>
         */
        public Builder mergeState(ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState value) {
          if (stateBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                state_ != ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState.getDefaultInstance()) {
              state_ =
                ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState.newBuilder(state_).mergeFrom(value).buildPartial();
            } else {
              state_ = value;
            }
            onChanged();
          } else {
            stateBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectState state = 1;</code>
         */
        public Builder clearState() {
          if (stateBuilder_ == null) {
            state_ = ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState.getDefaultInstance();
            onChanged();
          } else {
            stateBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectState state = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState.Builder getStateBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getStateFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectState state = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectStateOrBuilder getStateOrBuilder() {
          if (stateBuilder_ != null) {
            return stateBuilder_.getMessageOrBuilder();
          } else {
            return state_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectState state = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState, ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState.Builder, ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectStateOrBuilder> 
            getStateFieldBuilder() {
          if (stateBuilder_ == null) {
            stateBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState, ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectState.Builder, ru.kodos.almaz2.domain_objects.ControlObjectStateClass.ControlObjectStateOrBuilder>(
                    state_,
                    getParentForChildren(),
                    isClean());
            state_ = null;
          }
          return stateBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.UpdControlObjectState)
      }

      static {
        defaultInstance = new UpdControlObjectState(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.UpdControlObjectState)
    }

    public interface AddControlObjectAlarmOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;</code>
       */
      boolean hasAlarm();
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm getAlarm();
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarmOrBuilder getAlarmOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddControlObjectAlarm}
     */
    public static final class AddControlObjectAlarm extends
        com.google.protobuf.GeneratedMessage
        implements AddControlObjectAlarmOrBuilder {
      // Use AddControlObjectAlarm.newBuilder() to construct.
      private AddControlObjectAlarm(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private AddControlObjectAlarm(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final AddControlObjectAlarm defaultInstance;
      public static AddControlObjectAlarm getDefaultInstance() {
        return defaultInstance;
      }

      public AddControlObjectAlarm getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private AddControlObjectAlarm(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = alarm_.toBuilder();
                }
                alarm_ = input.readMessage(ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(alarm_);
                  alarm_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectAlarm_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectAlarm_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm.Builder.class);
      }

      public static com.google.protobuf.Parser<AddControlObjectAlarm> PARSER =
          new com.google.protobuf.AbstractParser<AddControlObjectAlarm>() {
        public AddControlObjectAlarm parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new AddControlObjectAlarm(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<AddControlObjectAlarm> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;
      public static final int ALARM_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm alarm_;
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;</code>
       */
      public boolean hasAlarm() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm getAlarm() {
        return alarm_;
      }
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarmOrBuilder getAlarmOrBuilder() {
        return alarm_;
      }

      private void initFields() {
        alarm_ = ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, alarm_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, alarm_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddControlObjectAlarm}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarmOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectAlarm_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectAlarm_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getAlarmFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (alarmBuilder_ == null) {
            alarm_ = ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm.getDefaultInstance();
          } else {
            alarmBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectAlarm_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (alarmBuilder_ == null) {
            result.alarm_ = alarm_;
          } else {
            result.alarm_ = alarmBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm.getDefaultInstance()) return this;
          if (other.hasAlarm()) {
            mergeAlarm(other.getAlarm());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;
        private ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm alarm_ = ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm, ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm.Builder, ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarmOrBuilder> alarmBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;</code>
         */
        public boolean hasAlarm() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm getAlarm() {
          if (alarmBuilder_ == null) {
            return alarm_;
          } else {
            return alarmBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;</code>
         */
        public Builder setAlarm(ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm value) {
          if (alarmBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            alarm_ = value;
            onChanged();
          } else {
            alarmBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;</code>
         */
        public Builder setAlarm(
            ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm.Builder builderForValue) {
          if (alarmBuilder_ == null) {
            alarm_ = builderForValue.build();
            onChanged();
          } else {
            alarmBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;</code>
         */
        public Builder mergeAlarm(ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm value) {
          if (alarmBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                alarm_ != ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm.getDefaultInstance()) {
              alarm_ =
                ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm.newBuilder(alarm_).mergeFrom(value).buildPartial();
            } else {
              alarm_ = value;
            }
            onChanged();
          } else {
            alarmBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;</code>
         */
        public Builder clearAlarm() {
          if (alarmBuilder_ == null) {
            alarm_ = ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm.getDefaultInstance();
            onChanged();
          } else {
            alarmBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm.Builder getAlarmBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getAlarmFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarmOrBuilder getAlarmOrBuilder() {
          if (alarmBuilder_ != null) {
            return alarmBuilder_.getMessageOrBuilder();
          } else {
            return alarm_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm, ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm.Builder, ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarmOrBuilder> 
            getAlarmFieldBuilder() {
          if (alarmBuilder_ == null) {
            alarmBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm, ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm.Builder, ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarmOrBuilder>(
                    alarm_,
                    getParentForChildren(),
                    isClean());
            alarm_ = null;
          }
          return alarmBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.AddControlObjectAlarm)
      }

      static {
        defaultInstance = new AddControlObjectAlarm(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.AddControlObjectAlarm)
    }

    public interface UpdControlObjectAlarmOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;</code>
       */
      boolean hasAlarm();
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm getAlarm();
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarmOrBuilder getAlarmOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdControlObjectAlarm}
     */
    public static final class UpdControlObjectAlarm extends
        com.google.protobuf.GeneratedMessage
        implements UpdControlObjectAlarmOrBuilder {
      // Use UpdControlObjectAlarm.newBuilder() to construct.
      private UpdControlObjectAlarm(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private UpdControlObjectAlarm(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final UpdControlObjectAlarm defaultInstance;
      public static UpdControlObjectAlarm getDefaultInstance() {
        return defaultInstance;
      }

      public UpdControlObjectAlarm getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private UpdControlObjectAlarm(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = alarm_.toBuilder();
                }
                alarm_ = input.readMessage(ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(alarm_);
                  alarm_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectAlarm_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectAlarm_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm.Builder.class);
      }

      public static com.google.protobuf.Parser<UpdControlObjectAlarm> PARSER =
          new com.google.protobuf.AbstractParser<UpdControlObjectAlarm>() {
        public UpdControlObjectAlarm parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new UpdControlObjectAlarm(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<UpdControlObjectAlarm> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;
      public static final int ALARM_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm alarm_;
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;</code>
       */
      public boolean hasAlarm() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm getAlarm() {
        return alarm_;
      }
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarmOrBuilder getAlarmOrBuilder() {
        return alarm_;
      }

      private void initFields() {
        alarm_ = ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, alarm_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, alarm_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdControlObjectAlarm}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarmOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectAlarm_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectAlarm_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getAlarmFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (alarmBuilder_ == null) {
            alarm_ = ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm.getDefaultInstance();
          } else {
            alarmBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectAlarm_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (alarmBuilder_ == null) {
            result.alarm_ = alarm_;
          } else {
            result.alarm_ = alarmBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm.getDefaultInstance()) return this;
          if (other.hasAlarm()) {
            mergeAlarm(other.getAlarm());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;
        private ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm alarm_ = ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm, ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm.Builder, ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarmOrBuilder> alarmBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;</code>
         */
        public boolean hasAlarm() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm getAlarm() {
          if (alarmBuilder_ == null) {
            return alarm_;
          } else {
            return alarmBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;</code>
         */
        public Builder setAlarm(ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm value) {
          if (alarmBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            alarm_ = value;
            onChanged();
          } else {
            alarmBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;</code>
         */
        public Builder setAlarm(
            ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm.Builder builderForValue) {
          if (alarmBuilder_ == null) {
            alarm_ = builderForValue.build();
            onChanged();
          } else {
            alarmBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;</code>
         */
        public Builder mergeAlarm(ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm value) {
          if (alarmBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                alarm_ != ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm.getDefaultInstance()) {
              alarm_ =
                ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm.newBuilder(alarm_).mergeFrom(value).buildPartial();
            } else {
              alarm_ = value;
            }
            onChanged();
          } else {
            alarmBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;</code>
         */
        public Builder clearAlarm() {
          if (alarmBuilder_ == null) {
            alarm_ = ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm.getDefaultInstance();
            onChanged();
          } else {
            alarmBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm.Builder getAlarmBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getAlarmFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarmOrBuilder getAlarmOrBuilder() {
          if (alarmBuilder_ != null) {
            return alarmBuilder_.getMessageOrBuilder();
          } else {
            return alarm_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectAlarm alarm = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm, ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm.Builder, ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarmOrBuilder> 
            getAlarmFieldBuilder() {
          if (alarmBuilder_ == null) {
            alarmBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm, ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarm.Builder, ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.ControlObjectAlarmOrBuilder>(
                    alarm_,
                    getParentForChildren(),
                    isClean());
            alarm_ = null;
          }
          return alarmBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.UpdControlObjectAlarm)
      }

      static {
        defaultInstance = new UpdControlObjectAlarm(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.UpdControlObjectAlarm)
    }

    public interface AddEquipmentPassportOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.EquipmentPassport passport = 1;
      /**
       * <code>optional .almaz2.domain_objects.EquipmentPassport passport = 1;</code>
       */
      boolean hasPassport();
      /**
       * <code>optional .almaz2.domain_objects.EquipmentPassport passport = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport getPassport();
      /**
       * <code>optional .almaz2.domain_objects.EquipmentPassport passport = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassportOrBuilder getPassportOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport}
     *
     * <pre>
     * Добавление/удаление/обновление паспортов оборудования.
     * </pre>
     */
    public static final class AddEquipmentPassport extends
        com.google.protobuf.GeneratedMessage
        implements AddEquipmentPassportOrBuilder {
      // Use AddEquipmentPassport.newBuilder() to construct.
      private AddEquipmentPassport(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private AddEquipmentPassport(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final AddEquipmentPassport defaultInstance;
      public static AddEquipmentPassport getDefaultInstance() {
        return defaultInstance;
      }

      public AddEquipmentPassport getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private AddEquipmentPassport(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = passport_.toBuilder();
                }
                passport_ = input.readMessage(ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(passport_);
                  passport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentPassport_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentPassport_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport.Builder.class);
      }

      public static com.google.protobuf.Parser<AddEquipmentPassport> PARSER =
          new com.google.protobuf.AbstractParser<AddEquipmentPassport>() {
        public AddEquipmentPassport parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new AddEquipmentPassport(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<AddEquipmentPassport> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.EquipmentPassport passport = 1;
      public static final int PASSPORT_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport passport_;
      /**
       * <code>optional .almaz2.domain_objects.EquipmentPassport passport = 1;</code>
       */
      public boolean hasPassport() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.EquipmentPassport passport = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport getPassport() {
        return passport_;
      }
      /**
       * <code>optional .almaz2.domain_objects.EquipmentPassport passport = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassportOrBuilder getPassportOrBuilder() {
        return passport_;
      }

      private void initFields() {
        passport_ = ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasPassport()) {
          if (!getPassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, passport_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, passport_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport}
       *
       * <pre>
       * Добавление/удаление/обновление паспортов оборудования.
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentPassport_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentPassport_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getPassportFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (passportBuilder_ == null) {
            passport_ = ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport.getDefaultInstance();
          } else {
            passportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentPassport_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (passportBuilder_ == null) {
            result.passport_ = passport_;
          } else {
            result.passport_ = passportBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport.getDefaultInstance()) return this;
          if (other.hasPassport()) {
            mergePassport(other.getPassport());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasPassport()) {
            if (!getPassport().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.EquipmentPassport passport = 1;
        private ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport passport_ = ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport, ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport.Builder, ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassportOrBuilder> passportBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassport passport = 1;</code>
         */
        public boolean hasPassport() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport getPassport() {
          if (passportBuilder_ == null) {
            return passport_;
          } else {
            return passportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassport passport = 1;</code>
         */
        public Builder setPassport(ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport value) {
          if (passportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            passport_ = value;
            onChanged();
          } else {
            passportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassport passport = 1;</code>
         */
        public Builder setPassport(
            ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport.Builder builderForValue) {
          if (passportBuilder_ == null) {
            passport_ = builderForValue.build();
            onChanged();
          } else {
            passportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassport passport = 1;</code>
         */
        public Builder mergePassport(ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport value) {
          if (passportBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                passport_ != ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport.getDefaultInstance()) {
              passport_ =
                ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport.newBuilder(passport_).mergeFrom(value).buildPartial();
            } else {
              passport_ = value;
            }
            onChanged();
          } else {
            passportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassport passport = 1;</code>
         */
        public Builder clearPassport() {
          if (passportBuilder_ == null) {
            passport_ = ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport.getDefaultInstance();
            onChanged();
          } else {
            passportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport.Builder getPassportBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassportOrBuilder getPassportOrBuilder() {
          if (passportBuilder_ != null) {
            return passportBuilder_.getMessageOrBuilder();
          } else {
            return passport_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassport passport = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport, ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport.Builder, ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassportOrBuilder> 
            getPassportFieldBuilder() {
          if (passportBuilder_ == null) {
            passportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport, ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport.Builder, ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassportOrBuilder>(
                    passport_,
                    getParentForChildren(),
                    isClean());
            passport_ = null;
          }
          return passportBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport)
      }

      static {
        defaultInstance = new AddEquipmentPassport(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport)
    }

    public interface UpdEquipmentPassportOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.EquipmentPassport passport = 1;
      /**
       * <code>optional .almaz2.domain_objects.EquipmentPassport passport = 1;</code>
       */
      boolean hasPassport();
      /**
       * <code>optional .almaz2.domain_objects.EquipmentPassport passport = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport getPassport();
      /**
       * <code>optional .almaz2.domain_objects.EquipmentPassport passport = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassportOrBuilder getPassportOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport}
     */
    public static final class UpdEquipmentPassport extends
        com.google.protobuf.GeneratedMessage
        implements UpdEquipmentPassportOrBuilder {
      // Use UpdEquipmentPassport.newBuilder() to construct.
      private UpdEquipmentPassport(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private UpdEquipmentPassport(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final UpdEquipmentPassport defaultInstance;
      public static UpdEquipmentPassport getDefaultInstance() {
        return defaultInstance;
      }

      public UpdEquipmentPassport getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private UpdEquipmentPassport(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = passport_.toBuilder();
                }
                passport_ = input.readMessage(ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(passport_);
                  passport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentPassport_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentPassport_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport.Builder.class);
      }

      public static com.google.protobuf.Parser<UpdEquipmentPassport> PARSER =
          new com.google.protobuf.AbstractParser<UpdEquipmentPassport>() {
        public UpdEquipmentPassport parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new UpdEquipmentPassport(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<UpdEquipmentPassport> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.EquipmentPassport passport = 1;
      public static final int PASSPORT_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport passport_;
      /**
       * <code>optional .almaz2.domain_objects.EquipmentPassport passport = 1;</code>
       */
      public boolean hasPassport() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.EquipmentPassport passport = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport getPassport() {
        return passport_;
      }
      /**
       * <code>optional .almaz2.domain_objects.EquipmentPassport passport = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassportOrBuilder getPassportOrBuilder() {
        return passport_;
      }

      private void initFields() {
        passport_ = ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasPassport()) {
          if (!getPassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, passport_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, passport_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentPassport_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentPassport_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getPassportFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (passportBuilder_ == null) {
            passport_ = ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport.getDefaultInstance();
          } else {
            passportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentPassport_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (passportBuilder_ == null) {
            result.passport_ = passport_;
          } else {
            result.passport_ = passportBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport.getDefaultInstance()) return this;
          if (other.hasPassport()) {
            mergePassport(other.getPassport());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasPassport()) {
            if (!getPassport().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.EquipmentPassport passport = 1;
        private ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport passport_ = ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport, ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport.Builder, ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassportOrBuilder> passportBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassport passport = 1;</code>
         */
        public boolean hasPassport() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport getPassport() {
          if (passportBuilder_ == null) {
            return passport_;
          } else {
            return passportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassport passport = 1;</code>
         */
        public Builder setPassport(ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport value) {
          if (passportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            passport_ = value;
            onChanged();
          } else {
            passportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassport passport = 1;</code>
         */
        public Builder setPassport(
            ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport.Builder builderForValue) {
          if (passportBuilder_ == null) {
            passport_ = builderForValue.build();
            onChanged();
          } else {
            passportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassport passport = 1;</code>
         */
        public Builder mergePassport(ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport value) {
          if (passportBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                passport_ != ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport.getDefaultInstance()) {
              passport_ =
                ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport.newBuilder(passport_).mergeFrom(value).buildPartial();
            } else {
              passport_ = value;
            }
            onChanged();
          } else {
            passportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassport passport = 1;</code>
         */
        public Builder clearPassport() {
          if (passportBuilder_ == null) {
            passport_ = ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport.getDefaultInstance();
            onChanged();
          } else {
            passportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport.Builder getPassportBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassportOrBuilder getPassportOrBuilder() {
          if (passportBuilder_ != null) {
            return passportBuilder_.getMessageOrBuilder();
          } else {
            return passport_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassport passport = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport, ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport.Builder, ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassportOrBuilder> 
            getPassportFieldBuilder() {
          if (passportBuilder_ == null) {
            passportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport, ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassport.Builder, ru.kodos.almaz2.domain_objects.EquipmentPassportClass.EquipmentPassportOrBuilder>(
                    passport_,
                    getParentForChildren(),
                    isClean());
            passport_ = null;
          }
          return passportBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport)
      }

      static {
        defaultInstance = new UpdEquipmentPassport(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport)
    }

    public interface DelEquipmentPassportOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional uint32 passport_id = 1;
      /**
       * <code>optional uint32 passport_id = 1;</code>
       */
      boolean hasPassportId();
      /**
       * <code>optional uint32 passport_id = 1;</code>
       */
      int getPassportId();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport}
     */
    public static final class DelEquipmentPassport extends
        com.google.protobuf.GeneratedMessage
        implements DelEquipmentPassportOrBuilder {
      // Use DelEquipmentPassport.newBuilder() to construct.
      private DelEquipmentPassport(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private DelEquipmentPassport(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final DelEquipmentPassport defaultInstance;
      public static DelEquipmentPassport getDefaultInstance() {
        return defaultInstance;
      }

      public DelEquipmentPassport getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private DelEquipmentPassport(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                passportId_ = input.readUInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentPassport_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentPassport_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport.Builder.class);
      }

      public static com.google.protobuf.Parser<DelEquipmentPassport> PARSER =
          new com.google.protobuf.AbstractParser<DelEquipmentPassport>() {
        public DelEquipmentPassport parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new DelEquipmentPassport(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<DelEquipmentPassport> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional uint32 passport_id = 1;
      public static final int PASSPORT_ID_FIELD_NUMBER = 1;
      private int passportId_;
      /**
       * <code>optional uint32 passport_id = 1;</code>
       */
      public boolean hasPassportId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 passport_id = 1;</code>
       */
      public int getPassportId() {
        return passportId_;
      }

      private void initFields() {
        passportId_ = 0;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, passportId_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, passportId_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentPassport_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentPassport_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          passportId_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentPassport_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.passportId_ = passportId_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport.getDefaultInstance()) return this;
          if (other.hasPassportId()) {
            setPassportId(other.getPassportId());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional uint32 passport_id = 1;
        private int passportId_ ;
        /**
         * <code>optional uint32 passport_id = 1;</code>
         */
        public boolean hasPassportId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint32 passport_id = 1;</code>
         */
        public int getPassportId() {
          return passportId_;
        }
        /**
         * <code>optional uint32 passport_id = 1;</code>
         */
        public Builder setPassportId(int value) {
          bitField0_ |= 0x00000001;
          passportId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 passport_id = 1;</code>
         */
        public Builder clearPassportId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          passportId_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport)
      }

      static {
        defaultInstance = new DelEquipmentPassport(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport)
    }

    public interface AddInterfacePassportOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.InterfacePassport passport = 1;
      /**
       * <code>optional .almaz2.domain_objects.InterfacePassport passport = 1;</code>
       */
      boolean hasPassport();
      /**
       * <code>optional .almaz2.domain_objects.InterfacePassport passport = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport getPassport();
      /**
       * <code>optional .almaz2.domain_objects.InterfacePassport passport = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassportOrBuilder getPassportOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddInterfacePassport}
     */
    public static final class AddInterfacePassport extends
        com.google.protobuf.GeneratedMessage
        implements AddInterfacePassportOrBuilder {
      // Use AddInterfacePassport.newBuilder() to construct.
      private AddInterfacePassport(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private AddInterfacePassport(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final AddInterfacePassport defaultInstance;
      public static AddInterfacePassport getDefaultInstance() {
        return defaultInstance;
      }

      public AddInterfacePassport getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private AddInterfacePassport(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = passport_.toBuilder();
                }
                passport_ = input.readMessage(ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(passport_);
                  passport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddInterfacePassport_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddInterfacePassport_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport.Builder.class);
      }

      public static com.google.protobuf.Parser<AddInterfacePassport> PARSER =
          new com.google.protobuf.AbstractParser<AddInterfacePassport>() {
        public AddInterfacePassport parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new AddInterfacePassport(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<AddInterfacePassport> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.InterfacePassport passport = 1;
      public static final int PASSPORT_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport passport_;
      /**
       * <code>optional .almaz2.domain_objects.InterfacePassport passport = 1;</code>
       */
      public boolean hasPassport() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.InterfacePassport passport = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport getPassport() {
        return passport_;
      }
      /**
       * <code>optional .almaz2.domain_objects.InterfacePassport passport = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassportOrBuilder getPassportOrBuilder() {
        return passport_;
      }

      private void initFields() {
        passport_ = ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasPassport()) {
          if (!getPassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, passport_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, passport_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddInterfacePassport}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddInterfacePassport_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddInterfacePassport_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getPassportFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (passportBuilder_ == null) {
            passport_ = ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport.getDefaultInstance();
          } else {
            passportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddInterfacePassport_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (passportBuilder_ == null) {
            result.passport_ = passport_;
          } else {
            result.passport_ = passportBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport.getDefaultInstance()) return this;
          if (other.hasPassport()) {
            mergePassport(other.getPassport());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasPassport()) {
            if (!getPassport().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.InterfacePassport passport = 1;
        private ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport passport_ = ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport, ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport.Builder, ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassportOrBuilder> passportBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassport passport = 1;</code>
         */
        public boolean hasPassport() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport getPassport() {
          if (passportBuilder_ == null) {
            return passport_;
          } else {
            return passportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassport passport = 1;</code>
         */
        public Builder setPassport(ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport value) {
          if (passportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            passport_ = value;
            onChanged();
          } else {
            passportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassport passport = 1;</code>
         */
        public Builder setPassport(
            ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport.Builder builderForValue) {
          if (passportBuilder_ == null) {
            passport_ = builderForValue.build();
            onChanged();
          } else {
            passportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassport passport = 1;</code>
         */
        public Builder mergePassport(ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport value) {
          if (passportBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                passport_ != ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport.getDefaultInstance()) {
              passport_ =
                ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport.newBuilder(passport_).mergeFrom(value).buildPartial();
            } else {
              passport_ = value;
            }
            onChanged();
          } else {
            passportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassport passport = 1;</code>
         */
        public Builder clearPassport() {
          if (passportBuilder_ == null) {
            passport_ = ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport.getDefaultInstance();
            onChanged();
          } else {
            passportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport.Builder getPassportBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassportOrBuilder getPassportOrBuilder() {
          if (passportBuilder_ != null) {
            return passportBuilder_.getMessageOrBuilder();
          } else {
            return passport_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassport passport = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport, ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport.Builder, ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassportOrBuilder> 
            getPassportFieldBuilder() {
          if (passportBuilder_ == null) {
            passportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport, ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport.Builder, ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassportOrBuilder>(
                    passport_,
                    getParentForChildren(),
                    isClean());
            passport_ = null;
          }
          return passportBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.AddInterfacePassport)
      }

      static {
        defaultInstance = new AddInterfacePassport(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.AddInterfacePassport)
    }

    public interface UpdInterfacePassportOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.InterfacePassport passport = 1;
      /**
       * <code>optional .almaz2.domain_objects.InterfacePassport passport = 1;</code>
       */
      boolean hasPassport();
      /**
       * <code>optional .almaz2.domain_objects.InterfacePassport passport = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport getPassport();
      /**
       * <code>optional .almaz2.domain_objects.InterfacePassport passport = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassportOrBuilder getPassportOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport}
     */
    public static final class UpdInterfacePassport extends
        com.google.protobuf.GeneratedMessage
        implements UpdInterfacePassportOrBuilder {
      // Use UpdInterfacePassport.newBuilder() to construct.
      private UpdInterfacePassport(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private UpdInterfacePassport(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final UpdInterfacePassport defaultInstance;
      public static UpdInterfacePassport getDefaultInstance() {
        return defaultInstance;
      }

      public UpdInterfacePassport getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private UpdInterfacePassport(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = passport_.toBuilder();
                }
                passport_ = input.readMessage(ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(passport_);
                  passport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdInterfacePassport_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdInterfacePassport_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport.Builder.class);
      }

      public static com.google.protobuf.Parser<UpdInterfacePassport> PARSER =
          new com.google.protobuf.AbstractParser<UpdInterfacePassport>() {
        public UpdInterfacePassport parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new UpdInterfacePassport(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<UpdInterfacePassport> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.InterfacePassport passport = 1;
      public static final int PASSPORT_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport passport_;
      /**
       * <code>optional .almaz2.domain_objects.InterfacePassport passport = 1;</code>
       */
      public boolean hasPassport() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.InterfacePassport passport = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport getPassport() {
        return passport_;
      }
      /**
       * <code>optional .almaz2.domain_objects.InterfacePassport passport = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassportOrBuilder getPassportOrBuilder() {
        return passport_;
      }

      private void initFields() {
        passport_ = ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasPassport()) {
          if (!getPassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, passport_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, passport_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdInterfacePassport_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdInterfacePassport_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getPassportFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (passportBuilder_ == null) {
            passport_ = ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport.getDefaultInstance();
          } else {
            passportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdInterfacePassport_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (passportBuilder_ == null) {
            result.passport_ = passport_;
          } else {
            result.passport_ = passportBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport.getDefaultInstance()) return this;
          if (other.hasPassport()) {
            mergePassport(other.getPassport());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasPassport()) {
            if (!getPassport().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.InterfacePassport passport = 1;
        private ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport passport_ = ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport, ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport.Builder, ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassportOrBuilder> passportBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassport passport = 1;</code>
         */
        public boolean hasPassport() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport getPassport() {
          if (passportBuilder_ == null) {
            return passport_;
          } else {
            return passportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassport passport = 1;</code>
         */
        public Builder setPassport(ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport value) {
          if (passportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            passport_ = value;
            onChanged();
          } else {
            passportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassport passport = 1;</code>
         */
        public Builder setPassport(
            ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport.Builder builderForValue) {
          if (passportBuilder_ == null) {
            passport_ = builderForValue.build();
            onChanged();
          } else {
            passportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassport passport = 1;</code>
         */
        public Builder mergePassport(ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport value) {
          if (passportBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                passport_ != ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport.getDefaultInstance()) {
              passport_ =
                ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport.newBuilder(passport_).mergeFrom(value).buildPartial();
            } else {
              passport_ = value;
            }
            onChanged();
          } else {
            passportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassport passport = 1;</code>
         */
        public Builder clearPassport() {
          if (passportBuilder_ == null) {
            passport_ = ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport.getDefaultInstance();
            onChanged();
          } else {
            passportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport.Builder getPassportBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassportOrBuilder getPassportOrBuilder() {
          if (passportBuilder_ != null) {
            return passportBuilder_.getMessageOrBuilder();
          } else {
            return passport_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassport passport = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport, ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport.Builder, ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassportOrBuilder> 
            getPassportFieldBuilder() {
          if (passportBuilder_ == null) {
            passportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport, ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassport.Builder, ru.kodos.almaz2.domain_objects.InterfacePassportClass.InterfacePassportOrBuilder>(
                    passport_,
                    getParentForChildren(),
                    isClean());
            passport_ = null;
          }
          return passportBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport)
      }

      static {
        defaultInstance = new UpdInterfacePassport(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport)
    }

    public interface DelInterfacePassportOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional uint32 passport_id = 1;
      /**
       * <code>optional uint32 passport_id = 1;</code>
       */
      boolean hasPassportId();
      /**
       * <code>optional uint32 passport_id = 1;</code>
       */
      int getPassportId();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.DelInterfacePassport}
     */
    public static final class DelInterfacePassport extends
        com.google.protobuf.GeneratedMessage
        implements DelInterfacePassportOrBuilder {
      // Use DelInterfacePassport.newBuilder() to construct.
      private DelInterfacePassport(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private DelInterfacePassport(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final DelInterfacePassport defaultInstance;
      public static DelInterfacePassport getDefaultInstance() {
        return defaultInstance;
      }

      public DelInterfacePassport getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private DelInterfacePassport(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                passportId_ = input.readUInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelInterfacePassport_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelInterfacePassport_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport.Builder.class);
      }

      public static com.google.protobuf.Parser<DelInterfacePassport> PARSER =
          new com.google.protobuf.AbstractParser<DelInterfacePassport>() {
        public DelInterfacePassport parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new DelInterfacePassport(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<DelInterfacePassport> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional uint32 passport_id = 1;
      public static final int PASSPORT_ID_FIELD_NUMBER = 1;
      private int passportId_;
      /**
       * <code>optional uint32 passport_id = 1;</code>
       */
      public boolean hasPassportId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 passport_id = 1;</code>
       */
      public int getPassportId() {
        return passportId_;
      }

      private void initFields() {
        passportId_ = 0;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, passportId_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, passportId_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.DelInterfacePassport}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelInterfacePassport_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelInterfacePassport_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          passportId_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelInterfacePassport_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.passportId_ = passportId_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport.getDefaultInstance()) return this;
          if (other.hasPassportId()) {
            setPassportId(other.getPassportId());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional uint32 passport_id = 1;
        private int passportId_ ;
        /**
         * <code>optional uint32 passport_id = 1;</code>
         */
        public boolean hasPassportId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint32 passport_id = 1;</code>
         */
        public int getPassportId() {
          return passportId_;
        }
        /**
         * <code>optional uint32 passport_id = 1;</code>
         */
        public Builder setPassportId(int value) {
          bitField0_ |= 0x00000001;
          passportId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 passport_id = 1;</code>
         */
        public Builder clearPassportId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          passportId_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.DelInterfacePassport)
      }

      static {
        defaultInstance = new DelInterfacePassport(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.DelInterfacePassport)
    }

    public interface AddEquipmentStatusOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;</code>
       */
      boolean hasStatus();
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus getStatus();
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatusOrBuilder getStatusOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddEquipmentStatus}
     */
    public static final class AddEquipmentStatus extends
        com.google.protobuf.GeneratedMessage
        implements AddEquipmentStatusOrBuilder {
      // Use AddEquipmentStatus.newBuilder() to construct.
      private AddEquipmentStatus(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private AddEquipmentStatus(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final AddEquipmentStatus defaultInstance;
      public static AddEquipmentStatus getDefaultInstance() {
        return defaultInstance;
      }

      public AddEquipmentStatus getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private AddEquipmentStatus(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = status_.toBuilder();
                }
                status_ = input.readMessage(ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(status_);
                  status_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentStatus_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentStatus_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus.Builder.class);
      }

      public static com.google.protobuf.Parser<AddEquipmentStatus> PARSER =
          new com.google.protobuf.AbstractParser<AddEquipmentStatus>() {
        public AddEquipmentStatus parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new AddEquipmentStatus(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<AddEquipmentStatus> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;
      public static final int STATUS_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus status_;
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;</code>
       */
      public boolean hasStatus() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus getStatus() {
        return status_;
      }
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatusOrBuilder getStatusOrBuilder() {
        return status_;
      }

      private void initFields() {
        status_ = ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, status_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, status_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddEquipmentStatus}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatusOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentStatus_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentStatus_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getStatusFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (statusBuilder_ == null) {
            status_ = ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus.getDefaultInstance();
          } else {
            statusBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentStatus_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (statusBuilder_ == null) {
            result.status_ = status_;
          } else {
            result.status_ = statusBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus.getDefaultInstance()) return this;
          if (other.hasStatus()) {
            mergeStatus(other.getStatus());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;
        private ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus status_ = ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus, ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus.Builder, ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatusOrBuilder> statusBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;</code>
         */
        public boolean hasStatus() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus getStatus() {
          if (statusBuilder_ == null) {
            return status_;
          } else {
            return statusBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;</code>
         */
        public Builder setStatus(ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus value) {
          if (statusBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            status_ = value;
            onChanged();
          } else {
            statusBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;</code>
         */
        public Builder setStatus(
            ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus.Builder builderForValue) {
          if (statusBuilder_ == null) {
            status_ = builderForValue.build();
            onChanged();
          } else {
            statusBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;</code>
         */
        public Builder mergeStatus(ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus value) {
          if (statusBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                status_ != ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus.getDefaultInstance()) {
              status_ =
                ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus.newBuilder(status_).mergeFrom(value).buildPartial();
            } else {
              status_ = value;
            }
            onChanged();
          } else {
            statusBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;</code>
         */
        public Builder clearStatus() {
          if (statusBuilder_ == null) {
            status_ = ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus.getDefaultInstance();
            onChanged();
          } else {
            statusBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus.Builder getStatusBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getStatusFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatusOrBuilder getStatusOrBuilder() {
          if (statusBuilder_ != null) {
            return statusBuilder_.getMessageOrBuilder();
          } else {
            return status_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus, ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus.Builder, ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatusOrBuilder> 
            getStatusFieldBuilder() {
          if (statusBuilder_ == null) {
            statusBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus, ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus.Builder, ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatusOrBuilder>(
                    status_,
                    getParentForChildren(),
                    isClean());
            status_ = null;
          }
          return statusBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.AddEquipmentStatus)
      }

      static {
        defaultInstance = new AddEquipmentStatus(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.AddEquipmentStatus)
    }

    public interface UpdEquipmentStatusOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;</code>
       */
      boolean hasStatus();
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus getStatus();
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatusOrBuilder getStatusOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdEquipmentStatus}
     */
    public static final class UpdEquipmentStatus extends
        com.google.protobuf.GeneratedMessage
        implements UpdEquipmentStatusOrBuilder {
      // Use UpdEquipmentStatus.newBuilder() to construct.
      private UpdEquipmentStatus(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private UpdEquipmentStatus(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final UpdEquipmentStatus defaultInstance;
      public static UpdEquipmentStatus getDefaultInstance() {
        return defaultInstance;
      }

      public UpdEquipmentStatus getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private UpdEquipmentStatus(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = status_.toBuilder();
                }
                status_ = input.readMessage(ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(status_);
                  status_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentStatus_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentStatus_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus.Builder.class);
      }

      public static com.google.protobuf.Parser<UpdEquipmentStatus> PARSER =
          new com.google.protobuf.AbstractParser<UpdEquipmentStatus>() {
        public UpdEquipmentStatus parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new UpdEquipmentStatus(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<UpdEquipmentStatus> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;
      public static final int STATUS_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus status_;
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;</code>
       */
      public boolean hasStatus() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus getStatus() {
        return status_;
      }
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatusOrBuilder getStatusOrBuilder() {
        return status_;
      }

      private void initFields() {
        status_ = ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, status_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, status_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdEquipmentStatus}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatusOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentStatus_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentStatus_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getStatusFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (statusBuilder_ == null) {
            status_ = ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus.getDefaultInstance();
          } else {
            statusBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentStatus_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (statusBuilder_ == null) {
            result.status_ = status_;
          } else {
            result.status_ = statusBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus.getDefaultInstance()) return this;
          if (other.hasStatus()) {
            mergeStatus(other.getStatus());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;
        private ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus status_ = ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus, ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus.Builder, ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatusOrBuilder> statusBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;</code>
         */
        public boolean hasStatus() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus getStatus() {
          if (statusBuilder_ == null) {
            return status_;
          } else {
            return statusBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;</code>
         */
        public Builder setStatus(ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus value) {
          if (statusBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            status_ = value;
            onChanged();
          } else {
            statusBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;</code>
         */
        public Builder setStatus(
            ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus.Builder builderForValue) {
          if (statusBuilder_ == null) {
            status_ = builderForValue.build();
            onChanged();
          } else {
            statusBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;</code>
         */
        public Builder mergeStatus(ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus value) {
          if (statusBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                status_ != ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus.getDefaultInstance()) {
              status_ =
                ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus.newBuilder(status_).mergeFrom(value).buildPartial();
            } else {
              status_ = value;
            }
            onChanged();
          } else {
            statusBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;</code>
         */
        public Builder clearStatus() {
          if (statusBuilder_ == null) {
            status_ = ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus.getDefaultInstance();
            onChanged();
          } else {
            statusBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus.Builder getStatusBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getStatusFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatusOrBuilder getStatusOrBuilder() {
          if (statusBuilder_ != null) {
            return statusBuilder_.getMessageOrBuilder();
          } else {
            return status_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectEquipmentStatus status = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus, ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus.Builder, ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatusOrBuilder> 
            getStatusFieldBuilder() {
          if (statusBuilder_ == null) {
            statusBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus, ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatus.Builder, ru.kodos.almaz2.domain_objects.StatusesClass.ControlObjectEquipmentStatusOrBuilder>(
                    status_,
                    getParentForChildren(),
                    isClean());
            status_ = null;
          }
          return statusBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.UpdEquipmentStatus)
      }

      static {
        defaultInstance = new UpdEquipmentStatus(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.UpdEquipmentStatus)
    }

    public interface UpdEquipmentStateOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.PeriodicSignal state = 1;
      /**
       * <code>optional .almaz2.domain_objects.PeriodicSignal state = 1;</code>
       */
      boolean hasState();
      /**
       * <code>optional .almaz2.domain_objects.PeriodicSignal state = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.PeriodicSignalClass.PeriodicSignal getState();
      /**
       * <code>optional .almaz2.domain_objects.PeriodicSignal state = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.PeriodicSignalClass.PeriodicSignalOrBuilder getStateOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdEquipmentState}
     */
    public static final class UpdEquipmentState extends
        com.google.protobuf.GeneratedMessage
        implements UpdEquipmentStateOrBuilder {
      // Use UpdEquipmentState.newBuilder() to construct.
      private UpdEquipmentState(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private UpdEquipmentState(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final UpdEquipmentState defaultInstance;
      public static UpdEquipmentState getDefaultInstance() {
        return defaultInstance;
      }

      public UpdEquipmentState getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private UpdEquipmentState(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.PeriodicSignalClass.PeriodicSignal.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = state_.toBuilder();
                }
                state_ = input.readMessage(ru.kodos.almaz2.domain_objects.PeriodicSignalClass.PeriodicSignal.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(state_);
                  state_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentState_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentState_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState.Builder.class);
      }

      public static com.google.protobuf.Parser<UpdEquipmentState> PARSER =
          new com.google.protobuf.AbstractParser<UpdEquipmentState>() {
        public UpdEquipmentState parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new UpdEquipmentState(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<UpdEquipmentState> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.PeriodicSignal state = 1;
      public static final int STATE_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.PeriodicSignalClass.PeriodicSignal state_;
      /**
       * <code>optional .almaz2.domain_objects.PeriodicSignal state = 1;</code>
       */
      public boolean hasState() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.PeriodicSignal state = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.PeriodicSignalClass.PeriodicSignal getState() {
        return state_;
      }
      /**
       * <code>optional .almaz2.domain_objects.PeriodicSignal state = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.PeriodicSignalClass.PeriodicSignalOrBuilder getStateOrBuilder() {
        return state_;
      }

      private void initFields() {
        state_ = ru.kodos.almaz2.domain_objects.PeriodicSignalClass.PeriodicSignal.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, state_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, state_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdEquipmentState}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStateOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentState_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentState_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getStateFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (stateBuilder_ == null) {
            state_ = ru.kodos.almaz2.domain_objects.PeriodicSignalClass.PeriodicSignal.getDefaultInstance();
          } else {
            stateBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentState_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (stateBuilder_ == null) {
            result.state_ = state_;
          } else {
            result.state_ = stateBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState.getDefaultInstance()) return this;
          if (other.hasState()) {
            mergeState(other.getState());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.PeriodicSignal state = 1;
        private ru.kodos.almaz2.domain_objects.PeriodicSignalClass.PeriodicSignal state_ = ru.kodos.almaz2.domain_objects.PeriodicSignalClass.PeriodicSignal.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.PeriodicSignalClass.PeriodicSignal, ru.kodos.almaz2.domain_objects.PeriodicSignalClass.PeriodicSignal.Builder, ru.kodos.almaz2.domain_objects.PeriodicSignalClass.PeriodicSignalOrBuilder> stateBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.PeriodicSignal state = 1;</code>
         */
        public boolean hasState() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.PeriodicSignal state = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.PeriodicSignalClass.PeriodicSignal getState() {
          if (stateBuilder_ == null) {
            return state_;
          } else {
            return stateBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.PeriodicSignal state = 1;</code>
         */
        public Builder setState(ru.kodos.almaz2.domain_objects.PeriodicSignalClass.PeriodicSignal value) {
          if (stateBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            state_ = value;
            onChanged();
          } else {
            stateBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.PeriodicSignal state = 1;</code>
         */
        public Builder setState(
            ru.kodos.almaz2.domain_objects.PeriodicSignalClass.PeriodicSignal.Builder builderForValue) {
          if (stateBuilder_ == null) {
            state_ = builderForValue.build();
            onChanged();
          } else {
            stateBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.PeriodicSignal state = 1;</code>
         */
        public Builder mergeState(ru.kodos.almaz2.domain_objects.PeriodicSignalClass.PeriodicSignal value) {
          if (stateBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                state_ != ru.kodos.almaz2.domain_objects.PeriodicSignalClass.PeriodicSignal.getDefaultInstance()) {
              state_ =
                ru.kodos.almaz2.domain_objects.PeriodicSignalClass.PeriodicSignal.newBuilder(state_).mergeFrom(value).buildPartial();
            } else {
              state_ = value;
            }
            onChanged();
          } else {
            stateBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.PeriodicSignal state = 1;</code>
         */
        public Builder clearState() {
          if (stateBuilder_ == null) {
            state_ = ru.kodos.almaz2.domain_objects.PeriodicSignalClass.PeriodicSignal.getDefaultInstance();
            onChanged();
          } else {
            stateBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.PeriodicSignal state = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.PeriodicSignalClass.PeriodicSignal.Builder getStateBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getStateFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.PeriodicSignal state = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.PeriodicSignalClass.PeriodicSignalOrBuilder getStateOrBuilder() {
          if (stateBuilder_ != null) {
            return stateBuilder_.getMessageOrBuilder();
          } else {
            return state_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.PeriodicSignal state = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.PeriodicSignalClass.PeriodicSignal, ru.kodos.almaz2.domain_objects.PeriodicSignalClass.PeriodicSignal.Builder, ru.kodos.almaz2.domain_objects.PeriodicSignalClass.PeriodicSignalOrBuilder> 
            getStateFieldBuilder() {
          if (stateBuilder_ == null) {
            stateBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.PeriodicSignalClass.PeriodicSignal, ru.kodos.almaz2.domain_objects.PeriodicSignalClass.PeriodicSignal.Builder, ru.kodos.almaz2.domain_objects.PeriodicSignalClass.PeriodicSignalOrBuilder>(
                    state_,
                    getParentForChildren(),
                    isClean());
            state_ = null;
          }
          return stateBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.UpdEquipmentState)
      }

      static {
        defaultInstance = new UpdEquipmentState(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.UpdEquipmentState)
    }

    public interface UpdCommunicationDriverStatusOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.CommunicationDriverStatus status = 1;
      /**
       * <code>optional .almaz2.domain_objects.CommunicationDriverStatus status = 1;</code>
       */
      boolean hasStatus();
      /**
       * <code>optional .almaz2.domain_objects.CommunicationDriverStatus status = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.StatusesClass.CommunicationDriverStatus getStatus();
      /**
       * <code>optional .almaz2.domain_objects.CommunicationDriverStatus status = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.StatusesClass.CommunicationDriverStatusOrBuilder getStatusOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdCommunicationDriverStatus}
     */
    public static final class UpdCommunicationDriverStatus extends
        com.google.protobuf.GeneratedMessage
        implements UpdCommunicationDriverStatusOrBuilder {
      // Use UpdCommunicationDriverStatus.newBuilder() to construct.
      private UpdCommunicationDriverStatus(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private UpdCommunicationDriverStatus(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final UpdCommunicationDriverStatus defaultInstance;
      public static UpdCommunicationDriverStatus getDefaultInstance() {
        return defaultInstance;
      }

      public UpdCommunicationDriverStatus getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private UpdCommunicationDriverStatus(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.StatusesClass.CommunicationDriverStatus.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = status_.toBuilder();
                }
                status_ = input.readMessage(ru.kodos.almaz2.domain_objects.StatusesClass.CommunicationDriverStatus.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(status_);
                  status_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdCommunicationDriverStatus_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdCommunicationDriverStatus_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus.Builder.class);
      }

      public static com.google.protobuf.Parser<UpdCommunicationDriverStatus> PARSER =
          new com.google.protobuf.AbstractParser<UpdCommunicationDriverStatus>() {
        public UpdCommunicationDriverStatus parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new UpdCommunicationDriverStatus(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<UpdCommunicationDriverStatus> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.CommunicationDriverStatus status = 1;
      public static final int STATUS_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.StatusesClass.CommunicationDriverStatus status_;
      /**
       * <code>optional .almaz2.domain_objects.CommunicationDriverStatus status = 1;</code>
       */
      public boolean hasStatus() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.CommunicationDriverStatus status = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.StatusesClass.CommunicationDriverStatus getStatus() {
        return status_;
      }
      /**
       * <code>optional .almaz2.domain_objects.CommunicationDriverStatus status = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.StatusesClass.CommunicationDriverStatusOrBuilder getStatusOrBuilder() {
        return status_;
      }

      private void initFields() {
        status_ = ru.kodos.almaz2.domain_objects.StatusesClass.CommunicationDriverStatus.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, status_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, status_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdCommunicationDriverStatus}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatusOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdCommunicationDriverStatus_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdCommunicationDriverStatus_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getStatusFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (statusBuilder_ == null) {
            status_ = ru.kodos.almaz2.domain_objects.StatusesClass.CommunicationDriverStatus.getDefaultInstance();
          } else {
            statusBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdCommunicationDriverStatus_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (statusBuilder_ == null) {
            result.status_ = status_;
          } else {
            result.status_ = statusBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus.getDefaultInstance()) return this;
          if (other.hasStatus()) {
            mergeStatus(other.getStatus());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.CommunicationDriverStatus status = 1;
        private ru.kodos.almaz2.domain_objects.StatusesClass.CommunicationDriverStatus status_ = ru.kodos.almaz2.domain_objects.StatusesClass.CommunicationDriverStatus.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.StatusesClass.CommunicationDriverStatus, ru.kodos.almaz2.domain_objects.StatusesClass.CommunicationDriverStatus.Builder, ru.kodos.almaz2.domain_objects.StatusesClass.CommunicationDriverStatusOrBuilder> statusBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.CommunicationDriverStatus status = 1;</code>
         */
        public boolean hasStatus() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.CommunicationDriverStatus status = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.StatusesClass.CommunicationDriverStatus getStatus() {
          if (statusBuilder_ == null) {
            return status_;
          } else {
            return statusBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.CommunicationDriverStatus status = 1;</code>
         */
        public Builder setStatus(ru.kodos.almaz2.domain_objects.StatusesClass.CommunicationDriverStatus value) {
          if (statusBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            status_ = value;
            onChanged();
          } else {
            statusBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.CommunicationDriverStatus status = 1;</code>
         */
        public Builder setStatus(
            ru.kodos.almaz2.domain_objects.StatusesClass.CommunicationDriverStatus.Builder builderForValue) {
          if (statusBuilder_ == null) {
            status_ = builderForValue.build();
            onChanged();
          } else {
            statusBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.CommunicationDriverStatus status = 1;</code>
         */
        public Builder mergeStatus(ru.kodos.almaz2.domain_objects.StatusesClass.CommunicationDriverStatus value) {
          if (statusBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                status_ != ru.kodos.almaz2.domain_objects.StatusesClass.CommunicationDriverStatus.getDefaultInstance()) {
              status_ =
                ru.kodos.almaz2.domain_objects.StatusesClass.CommunicationDriverStatus.newBuilder(status_).mergeFrom(value).buildPartial();
            } else {
              status_ = value;
            }
            onChanged();
          } else {
            statusBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.CommunicationDriverStatus status = 1;</code>
         */
        public Builder clearStatus() {
          if (statusBuilder_ == null) {
            status_ = ru.kodos.almaz2.domain_objects.StatusesClass.CommunicationDriverStatus.getDefaultInstance();
            onChanged();
          } else {
            statusBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.CommunicationDriverStatus status = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.StatusesClass.CommunicationDriverStatus.Builder getStatusBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getStatusFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.CommunicationDriverStatus status = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.StatusesClass.CommunicationDriverStatusOrBuilder getStatusOrBuilder() {
          if (statusBuilder_ != null) {
            return statusBuilder_.getMessageOrBuilder();
          } else {
            return status_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.CommunicationDriverStatus status = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.StatusesClass.CommunicationDriverStatus, ru.kodos.almaz2.domain_objects.StatusesClass.CommunicationDriverStatus.Builder, ru.kodos.almaz2.domain_objects.StatusesClass.CommunicationDriverStatusOrBuilder> 
            getStatusFieldBuilder() {
          if (statusBuilder_ == null) {
            statusBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.StatusesClass.CommunicationDriverStatus, ru.kodos.almaz2.domain_objects.StatusesClass.CommunicationDriverStatus.Builder, ru.kodos.almaz2.domain_objects.StatusesClass.CommunicationDriverStatusOrBuilder>(
                    status_,
                    getParentForChildren(),
                    isClean());
            status_ = null;
          }
          return statusBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.UpdCommunicationDriverStatus)
      }

      static {
        defaultInstance = new UpdCommunicationDriverStatus(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.UpdCommunicationDriverStatus)
    }

    public interface AckRequestOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional uint32 ack_id = 1;
      /**
       * <code>optional uint32 ack_id = 1;</code>
       */
      boolean hasAckId();
      /**
       * <code>optional uint32 ack_id = 1;</code>
       */
      int getAckId();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AckRequest}
     */
    public static final class AckRequest extends
        com.google.protobuf.GeneratedMessage
        implements AckRequestOrBuilder {
      // Use AckRequest.newBuilder() to construct.
      private AckRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private AckRequest(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final AckRequest defaultInstance;
      public static AckRequest getDefaultInstance() {
        return defaultInstance;
      }

      public AckRequest getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private AckRequest(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                ackId_ = input.readUInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AckRequest_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AckRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest.Builder.class);
      }

      public static com.google.protobuf.Parser<AckRequest> PARSER =
          new com.google.protobuf.AbstractParser<AckRequest>() {
        public AckRequest parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new AckRequest(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<AckRequest> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional uint32 ack_id = 1;
      public static final int ACK_ID_FIELD_NUMBER = 1;
      private int ackId_;
      /**
       * <code>optional uint32 ack_id = 1;</code>
       */
      public boolean hasAckId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 ack_id = 1;</code>
       */
      public int getAckId() {
        return ackId_;
      }

      private void initFields() {
        ackId_ = 0;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, ackId_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, ackId_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AckRequest}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequestOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AckRequest_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AckRequest_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          ackId_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AckRequest_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.ackId_ = ackId_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest.getDefaultInstance()) return this;
          if (other.hasAckId()) {
            setAckId(other.getAckId());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional uint32 ack_id = 1;
        private int ackId_ ;
        /**
         * <code>optional uint32 ack_id = 1;</code>
         */
        public boolean hasAckId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint32 ack_id = 1;</code>
         */
        public int getAckId() {
          return ackId_;
        }
        /**
         * <code>optional uint32 ack_id = 1;</code>
         */
        public Builder setAckId(int value) {
          bitField0_ |= 0x00000001;
          ackId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 ack_id = 1;</code>
         */
        public Builder clearAckId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          ackId_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.AckRequest)
      }

      static {
        defaultInstance = new AckRequest(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.AckRequest)
    }

    public interface AckAnswerOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional uint32 ack_id = 1;
      /**
       * <code>optional uint32 ack_id = 1;</code>
       */
      boolean hasAckId();
      /**
       * <code>optional uint32 ack_id = 1;</code>
       */
      int getAckId();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AckAnswer}
     */
    public static final class AckAnswer extends
        com.google.protobuf.GeneratedMessage
        implements AckAnswerOrBuilder {
      // Use AckAnswer.newBuilder() to construct.
      private AckAnswer(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private AckAnswer(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final AckAnswer defaultInstance;
      public static AckAnswer getDefaultInstance() {
        return defaultInstance;
      }

      public AckAnswer getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private AckAnswer(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                ackId_ = input.readUInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AckAnswer_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AckAnswer_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer.Builder.class);
      }

      public static com.google.protobuf.Parser<AckAnswer> PARSER =
          new com.google.protobuf.AbstractParser<AckAnswer>() {
        public AckAnswer parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new AckAnswer(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<AckAnswer> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional uint32 ack_id = 1;
      public static final int ACK_ID_FIELD_NUMBER = 1;
      private int ackId_;
      /**
       * <code>optional uint32 ack_id = 1;</code>
       */
      public boolean hasAckId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 ack_id = 1;</code>
       */
      public int getAckId() {
        return ackId_;
      }

      private void initFields() {
        ackId_ = 0;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, ackId_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, ackId_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AckAnswer}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswerOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AckAnswer_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AckAnswer_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          ackId_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AckAnswer_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.ackId_ = ackId_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer.getDefaultInstance()) return this;
          if (other.hasAckId()) {
            setAckId(other.getAckId());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional uint32 ack_id = 1;
        private int ackId_ ;
        /**
         * <code>optional uint32 ack_id = 1;</code>
         */
        public boolean hasAckId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint32 ack_id = 1;</code>
         */
        public int getAckId() {
          return ackId_;
        }
        /**
         * <code>optional uint32 ack_id = 1;</code>
         */
        public Builder setAckId(int value) {
          bitField0_ |= 0x00000001;
          ackId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 ack_id = 1;</code>
         */
        public Builder clearAckId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          ackId_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.AckAnswer)
      }

      static {
        defaultInstance = new AckAnswer(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.AckAnswer)
    }

    public interface AddZoneOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.Zone zone = 1;
      /**
       * <code>optional .almaz2.domain_objects.Zone zone = 1;</code>
       */
      boolean hasZone();
      /**
       * <code>optional .almaz2.domain_objects.Zone zone = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.ZoneClass.Zone getZone();
      /**
       * <code>optional .almaz2.domain_objects.Zone zone = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.ZoneClass.ZoneOrBuilder getZoneOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddZone}
     */
    public static final class AddZone extends
        com.google.protobuf.GeneratedMessage
        implements AddZoneOrBuilder {
      // Use AddZone.newBuilder() to construct.
      private AddZone(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private AddZone(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final AddZone defaultInstance;
      public static AddZone getDefaultInstance() {
        return defaultInstance;
      }

      public AddZone getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private AddZone(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.ZoneClass.Zone.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = zone_.toBuilder();
                }
                zone_ = input.readMessage(ru.kodos.almaz2.domain_objects.ZoneClass.Zone.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(zone_);
                  zone_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddZone_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddZone_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone.Builder.class);
      }

      public static com.google.protobuf.Parser<AddZone> PARSER =
          new com.google.protobuf.AbstractParser<AddZone>() {
        public AddZone parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new AddZone(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<AddZone> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.Zone zone = 1;
      public static final int ZONE_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.ZoneClass.Zone zone_;
      /**
       * <code>optional .almaz2.domain_objects.Zone zone = 1;</code>
       */
      public boolean hasZone() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.Zone zone = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.ZoneClass.Zone getZone() {
        return zone_;
      }
      /**
       * <code>optional .almaz2.domain_objects.Zone zone = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.ZoneClass.ZoneOrBuilder getZoneOrBuilder() {
        return zone_;
      }

      private void initFields() {
        zone_ = ru.kodos.almaz2.domain_objects.ZoneClass.Zone.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, zone_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, zone_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddZone}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZoneOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddZone_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddZone_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getZoneFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (zoneBuilder_ == null) {
            zone_ = ru.kodos.almaz2.domain_objects.ZoneClass.Zone.getDefaultInstance();
          } else {
            zoneBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddZone_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (zoneBuilder_ == null) {
            result.zone_ = zone_;
          } else {
            result.zone_ = zoneBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone.getDefaultInstance()) return this;
          if (other.hasZone()) {
            mergeZone(other.getZone());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.Zone zone = 1;
        private ru.kodos.almaz2.domain_objects.ZoneClass.Zone zone_ = ru.kodos.almaz2.domain_objects.ZoneClass.Zone.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.ZoneClass.Zone, ru.kodos.almaz2.domain_objects.ZoneClass.Zone.Builder, ru.kodos.almaz2.domain_objects.ZoneClass.ZoneOrBuilder> zoneBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.Zone zone = 1;</code>
         */
        public boolean hasZone() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.Zone zone = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ZoneClass.Zone getZone() {
          if (zoneBuilder_ == null) {
            return zone_;
          } else {
            return zoneBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.Zone zone = 1;</code>
         */
        public Builder setZone(ru.kodos.almaz2.domain_objects.ZoneClass.Zone value) {
          if (zoneBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            zone_ = value;
            onChanged();
          } else {
            zoneBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.Zone zone = 1;</code>
         */
        public Builder setZone(
            ru.kodos.almaz2.domain_objects.ZoneClass.Zone.Builder builderForValue) {
          if (zoneBuilder_ == null) {
            zone_ = builderForValue.build();
            onChanged();
          } else {
            zoneBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.Zone zone = 1;</code>
         */
        public Builder mergeZone(ru.kodos.almaz2.domain_objects.ZoneClass.Zone value) {
          if (zoneBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                zone_ != ru.kodos.almaz2.domain_objects.ZoneClass.Zone.getDefaultInstance()) {
              zone_ =
                ru.kodos.almaz2.domain_objects.ZoneClass.Zone.newBuilder(zone_).mergeFrom(value).buildPartial();
            } else {
              zone_ = value;
            }
            onChanged();
          } else {
            zoneBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.Zone zone = 1;</code>
         */
        public Builder clearZone() {
          if (zoneBuilder_ == null) {
            zone_ = ru.kodos.almaz2.domain_objects.ZoneClass.Zone.getDefaultInstance();
            onChanged();
          } else {
            zoneBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.Zone zone = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ZoneClass.Zone.Builder getZoneBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getZoneFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.Zone zone = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ZoneClass.ZoneOrBuilder getZoneOrBuilder() {
          if (zoneBuilder_ != null) {
            return zoneBuilder_.getMessageOrBuilder();
          } else {
            return zone_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.Zone zone = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.ZoneClass.Zone, ru.kodos.almaz2.domain_objects.ZoneClass.Zone.Builder, ru.kodos.almaz2.domain_objects.ZoneClass.ZoneOrBuilder> 
            getZoneFieldBuilder() {
          if (zoneBuilder_ == null) {
            zoneBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.ZoneClass.Zone, ru.kodos.almaz2.domain_objects.ZoneClass.Zone.Builder, ru.kodos.almaz2.domain_objects.ZoneClass.ZoneOrBuilder>(
                    zone_,
                    getParentForChildren(),
                    isClean());
            zone_ = null;
          }
          return zoneBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.AddZone)
      }

      static {
        defaultInstance = new AddZone(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.AddZone)
    }

    public interface UpdZoneOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.Zone zone = 1;
      /**
       * <code>optional .almaz2.domain_objects.Zone zone = 1;</code>
       */
      boolean hasZone();
      /**
       * <code>optional .almaz2.domain_objects.Zone zone = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.ZoneClass.Zone getZone();
      /**
       * <code>optional .almaz2.domain_objects.Zone zone = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.ZoneClass.ZoneOrBuilder getZoneOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdZone}
     */
    public static final class UpdZone extends
        com.google.protobuf.GeneratedMessage
        implements UpdZoneOrBuilder {
      // Use UpdZone.newBuilder() to construct.
      private UpdZone(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private UpdZone(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final UpdZone defaultInstance;
      public static UpdZone getDefaultInstance() {
        return defaultInstance;
      }

      public UpdZone getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private UpdZone(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.ZoneClass.Zone.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = zone_.toBuilder();
                }
                zone_ = input.readMessage(ru.kodos.almaz2.domain_objects.ZoneClass.Zone.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(zone_);
                  zone_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdZone_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdZone_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone.Builder.class);
      }

      public static com.google.protobuf.Parser<UpdZone> PARSER =
          new com.google.protobuf.AbstractParser<UpdZone>() {
        public UpdZone parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new UpdZone(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<UpdZone> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.Zone zone = 1;
      public static final int ZONE_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.ZoneClass.Zone zone_;
      /**
       * <code>optional .almaz2.domain_objects.Zone zone = 1;</code>
       */
      public boolean hasZone() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.Zone zone = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.ZoneClass.Zone getZone() {
        return zone_;
      }
      /**
       * <code>optional .almaz2.domain_objects.Zone zone = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.ZoneClass.ZoneOrBuilder getZoneOrBuilder() {
        return zone_;
      }

      private void initFields() {
        zone_ = ru.kodos.almaz2.domain_objects.ZoneClass.Zone.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, zone_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, zone_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdZone}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZoneOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdZone_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdZone_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getZoneFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (zoneBuilder_ == null) {
            zone_ = ru.kodos.almaz2.domain_objects.ZoneClass.Zone.getDefaultInstance();
          } else {
            zoneBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdZone_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (zoneBuilder_ == null) {
            result.zone_ = zone_;
          } else {
            result.zone_ = zoneBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone.getDefaultInstance()) return this;
          if (other.hasZone()) {
            mergeZone(other.getZone());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.Zone zone = 1;
        private ru.kodos.almaz2.domain_objects.ZoneClass.Zone zone_ = ru.kodos.almaz2.domain_objects.ZoneClass.Zone.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.ZoneClass.Zone, ru.kodos.almaz2.domain_objects.ZoneClass.Zone.Builder, ru.kodos.almaz2.domain_objects.ZoneClass.ZoneOrBuilder> zoneBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.Zone zone = 1;</code>
         */
        public boolean hasZone() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.Zone zone = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ZoneClass.Zone getZone() {
          if (zoneBuilder_ == null) {
            return zone_;
          } else {
            return zoneBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.Zone zone = 1;</code>
         */
        public Builder setZone(ru.kodos.almaz2.domain_objects.ZoneClass.Zone value) {
          if (zoneBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            zone_ = value;
            onChanged();
          } else {
            zoneBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.Zone zone = 1;</code>
         */
        public Builder setZone(
            ru.kodos.almaz2.domain_objects.ZoneClass.Zone.Builder builderForValue) {
          if (zoneBuilder_ == null) {
            zone_ = builderForValue.build();
            onChanged();
          } else {
            zoneBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.Zone zone = 1;</code>
         */
        public Builder mergeZone(ru.kodos.almaz2.domain_objects.ZoneClass.Zone value) {
          if (zoneBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                zone_ != ru.kodos.almaz2.domain_objects.ZoneClass.Zone.getDefaultInstance()) {
              zone_ =
                ru.kodos.almaz2.domain_objects.ZoneClass.Zone.newBuilder(zone_).mergeFrom(value).buildPartial();
            } else {
              zone_ = value;
            }
            onChanged();
          } else {
            zoneBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.Zone zone = 1;</code>
         */
        public Builder clearZone() {
          if (zoneBuilder_ == null) {
            zone_ = ru.kodos.almaz2.domain_objects.ZoneClass.Zone.getDefaultInstance();
            onChanged();
          } else {
            zoneBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.Zone zone = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ZoneClass.Zone.Builder getZoneBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getZoneFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.Zone zone = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ZoneClass.ZoneOrBuilder getZoneOrBuilder() {
          if (zoneBuilder_ != null) {
            return zoneBuilder_.getMessageOrBuilder();
          } else {
            return zone_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.Zone zone = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.ZoneClass.Zone, ru.kodos.almaz2.domain_objects.ZoneClass.Zone.Builder, ru.kodos.almaz2.domain_objects.ZoneClass.ZoneOrBuilder> 
            getZoneFieldBuilder() {
          if (zoneBuilder_ == null) {
            zoneBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.ZoneClass.Zone, ru.kodos.almaz2.domain_objects.ZoneClass.Zone.Builder, ru.kodos.almaz2.domain_objects.ZoneClass.ZoneOrBuilder>(
                    zone_,
                    getParentForChildren(),
                    isClean());
            zone_ = null;
          }
          return zoneBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.UpdZone)
      }

      static {
        defaultInstance = new UpdZone(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.UpdZone)
    }

    public interface DelZoneOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional uint32 id = 1;
      /**
       * <code>optional uint32 id = 1;</code>
       */
      boolean hasId();
      /**
       * <code>optional uint32 id = 1;</code>
       */
      int getId();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.DelZone}
     */
    public static final class DelZone extends
        com.google.protobuf.GeneratedMessage
        implements DelZoneOrBuilder {
      // Use DelZone.newBuilder() to construct.
      private DelZone(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private DelZone(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final DelZone defaultInstance;
      public static DelZone getDefaultInstance() {
        return defaultInstance;
      }

      public DelZone getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private DelZone(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                id_ = input.readUInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelZone_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelZone_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone.Builder.class);
      }

      public static com.google.protobuf.Parser<DelZone> PARSER =
          new com.google.protobuf.AbstractParser<DelZone>() {
        public DelZone parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new DelZone(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<DelZone> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional uint32 id = 1;
      public static final int ID_FIELD_NUMBER = 1;
      private int id_;
      /**
       * <code>optional uint32 id = 1;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 id = 1;</code>
       */
      public int getId() {
        return id_;
      }

      private void initFields() {
        id_ = 0;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, id_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, id_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.DelZone}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZoneOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelZone_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelZone_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          id_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelZone_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.id_ = id_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone.getDefaultInstance()) return this;
          if (other.hasId()) {
            setId(other.getId());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional uint32 id = 1;
        private int id_ ;
        /**
         * <code>optional uint32 id = 1;</code>
         */
        public boolean hasId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint32 id = 1;</code>
         */
        public int getId() {
          return id_;
        }
        /**
         * <code>optional uint32 id = 1;</code>
         */
        public Builder setId(int value) {
          bitField0_ |= 0x00000001;
          id_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 id = 1;</code>
         */
        public Builder clearId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          id_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.DelZone)
      }

      static {
        defaultInstance = new DelZone(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.DelZone)
    }

    public interface AddClientPassportOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.ClientPassport passport = 1;
      /**
       * <code>optional .almaz2.domain_objects.ClientPassport passport = 1;</code>
       */
      boolean hasPassport();
      /**
       * <code>optional .almaz2.domain_objects.ClientPassport passport = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport getPassport();
      /**
       * <code>optional .almaz2.domain_objects.ClientPassport passport = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassportOrBuilder getPassportOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddClientPassport}
     *
     * <pre>
     * Добавление/удаление/обновление паспортов клинта.
     * </pre>
     */
    public static final class AddClientPassport extends
        com.google.protobuf.GeneratedMessage
        implements AddClientPassportOrBuilder {
      // Use AddClientPassport.newBuilder() to construct.
      private AddClientPassport(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private AddClientPassport(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final AddClientPassport defaultInstance;
      public static AddClientPassport getDefaultInstance() {
        return defaultInstance;
      }

      public AddClientPassport getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private AddClientPassport(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = passport_.toBuilder();
                }
                passport_ = input.readMessage(ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(passport_);
                  passport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddClientPassport_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddClientPassport_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport.Builder.class);
      }

      public static com.google.protobuf.Parser<AddClientPassport> PARSER =
          new com.google.protobuf.AbstractParser<AddClientPassport>() {
        public AddClientPassport parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new AddClientPassport(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<AddClientPassport> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.ClientPassport passport = 1;
      public static final int PASSPORT_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport passport_;
      /**
       * <code>optional .almaz2.domain_objects.ClientPassport passport = 1;</code>
       */
      public boolean hasPassport() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.ClientPassport passport = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport getPassport() {
        return passport_;
      }
      /**
       * <code>optional .almaz2.domain_objects.ClientPassport passport = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassportOrBuilder getPassportOrBuilder() {
        return passport_;
      }

      private void initFields() {
        passport_ = ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasPassport()) {
          if (!getPassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, passport_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, passport_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddClientPassport}
       *
       * <pre>
       * Добавление/удаление/обновление паспортов клинта.
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassportOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddClientPassport_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddClientPassport_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getPassportFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (passportBuilder_ == null) {
            passport_ = ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport.getDefaultInstance();
          } else {
            passportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddClientPassport_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (passportBuilder_ == null) {
            result.passport_ = passport_;
          } else {
            result.passport_ = passportBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport.getDefaultInstance()) return this;
          if (other.hasPassport()) {
            mergePassport(other.getPassport());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasPassport()) {
            if (!getPassport().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.ClientPassport passport = 1;
        private ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport passport_ = ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport, ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport.Builder, ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassportOrBuilder> passportBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.ClientPassport passport = 1;</code>
         */
        public boolean hasPassport() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.ClientPassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport getPassport() {
          if (passportBuilder_ == null) {
            return passport_;
          } else {
            return passportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ClientPassport passport = 1;</code>
         */
        public Builder setPassport(ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport value) {
          if (passportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            passport_ = value;
            onChanged();
          } else {
            passportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ClientPassport passport = 1;</code>
         */
        public Builder setPassport(
            ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport.Builder builderForValue) {
          if (passportBuilder_ == null) {
            passport_ = builderForValue.build();
            onChanged();
          } else {
            passportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ClientPassport passport = 1;</code>
         */
        public Builder mergePassport(ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport value) {
          if (passportBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                passport_ != ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport.getDefaultInstance()) {
              passport_ =
                ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport.newBuilder(passport_).mergeFrom(value).buildPartial();
            } else {
              passport_ = value;
            }
            onChanged();
          } else {
            passportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ClientPassport passport = 1;</code>
         */
        public Builder clearPassport() {
          if (passportBuilder_ == null) {
            passport_ = ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport.getDefaultInstance();
            onChanged();
          } else {
            passportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ClientPassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport.Builder getPassportBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.ClientPassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassportOrBuilder getPassportOrBuilder() {
          if (passportBuilder_ != null) {
            return passportBuilder_.getMessageOrBuilder();
          } else {
            return passport_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ClientPassport passport = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport, ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport.Builder, ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassportOrBuilder> 
            getPassportFieldBuilder() {
          if (passportBuilder_ == null) {
            passportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport, ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport.Builder, ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassportOrBuilder>(
                    passport_,
                    getParentForChildren(),
                    isClean());
            passport_ = null;
          }
          return passportBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.AddClientPassport)
      }

      static {
        defaultInstance = new AddClientPassport(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.AddClientPassport)
    }

    public interface UpdClientPassportOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.ClientPassport passport = 1;
      /**
       * <code>optional .almaz2.domain_objects.ClientPassport passport = 1;</code>
       */
      boolean hasPassport();
      /**
       * <code>optional .almaz2.domain_objects.ClientPassport passport = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport getPassport();
      /**
       * <code>optional .almaz2.domain_objects.ClientPassport passport = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassportOrBuilder getPassportOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdClientPassport}
     */
    public static final class UpdClientPassport extends
        com.google.protobuf.GeneratedMessage
        implements UpdClientPassportOrBuilder {
      // Use UpdClientPassport.newBuilder() to construct.
      private UpdClientPassport(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private UpdClientPassport(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final UpdClientPassport defaultInstance;
      public static UpdClientPassport getDefaultInstance() {
        return defaultInstance;
      }

      public UpdClientPassport getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private UpdClientPassport(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = passport_.toBuilder();
                }
                passport_ = input.readMessage(ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(passport_);
                  passport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdClientPassport_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdClientPassport_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport.Builder.class);
      }

      public static com.google.protobuf.Parser<UpdClientPassport> PARSER =
          new com.google.protobuf.AbstractParser<UpdClientPassport>() {
        public UpdClientPassport parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new UpdClientPassport(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<UpdClientPassport> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.ClientPassport passport = 1;
      public static final int PASSPORT_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport passport_;
      /**
       * <code>optional .almaz2.domain_objects.ClientPassport passport = 1;</code>
       */
      public boolean hasPassport() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.ClientPassport passport = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport getPassport() {
        return passport_;
      }
      /**
       * <code>optional .almaz2.domain_objects.ClientPassport passport = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassportOrBuilder getPassportOrBuilder() {
        return passport_;
      }

      private void initFields() {
        passport_ = ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasPassport()) {
          if (!getPassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, passport_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, passport_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdClientPassport}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassportOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdClientPassport_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdClientPassport_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getPassportFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (passportBuilder_ == null) {
            passport_ = ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport.getDefaultInstance();
          } else {
            passportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdClientPassport_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (passportBuilder_ == null) {
            result.passport_ = passport_;
          } else {
            result.passport_ = passportBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport.getDefaultInstance()) return this;
          if (other.hasPassport()) {
            mergePassport(other.getPassport());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasPassport()) {
            if (!getPassport().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.ClientPassport passport = 1;
        private ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport passport_ = ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport, ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport.Builder, ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassportOrBuilder> passportBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.ClientPassport passport = 1;</code>
         */
        public boolean hasPassport() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.ClientPassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport getPassport() {
          if (passportBuilder_ == null) {
            return passport_;
          } else {
            return passportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ClientPassport passport = 1;</code>
         */
        public Builder setPassport(ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport value) {
          if (passportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            passport_ = value;
            onChanged();
          } else {
            passportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ClientPassport passport = 1;</code>
         */
        public Builder setPassport(
            ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport.Builder builderForValue) {
          if (passportBuilder_ == null) {
            passport_ = builderForValue.build();
            onChanged();
          } else {
            passportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ClientPassport passport = 1;</code>
         */
        public Builder mergePassport(ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport value) {
          if (passportBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                passport_ != ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport.getDefaultInstance()) {
              passport_ =
                ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport.newBuilder(passport_).mergeFrom(value).buildPartial();
            } else {
              passport_ = value;
            }
            onChanged();
          } else {
            passportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ClientPassport passport = 1;</code>
         */
        public Builder clearPassport() {
          if (passportBuilder_ == null) {
            passport_ = ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport.getDefaultInstance();
            onChanged();
          } else {
            passportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ClientPassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport.Builder getPassportBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.ClientPassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassportOrBuilder getPassportOrBuilder() {
          if (passportBuilder_ != null) {
            return passportBuilder_.getMessageOrBuilder();
          } else {
            return passport_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ClientPassport passport = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport, ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport.Builder, ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassportOrBuilder> 
            getPassportFieldBuilder() {
          if (passportBuilder_ == null) {
            passportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport, ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassport.Builder, ru.kodos.almaz2.domain_objects.ClientPassportClass.ClientPassportOrBuilder>(
                    passport_,
                    getParentForChildren(),
                    isClean());
            passport_ = null;
          }
          return passportBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.UpdClientPassport)
      }

      static {
        defaultInstance = new UpdClientPassport(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.UpdClientPassport)
    }

    public interface DelClientPassportOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional uint32 passport_id = 1;
      /**
       * <code>optional uint32 passport_id = 1;</code>
       */
      boolean hasPassportId();
      /**
       * <code>optional uint32 passport_id = 1;</code>
       */
      int getPassportId();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.DelClientPassport}
     */
    public static final class DelClientPassport extends
        com.google.protobuf.GeneratedMessage
        implements DelClientPassportOrBuilder {
      // Use DelClientPassport.newBuilder() to construct.
      private DelClientPassport(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private DelClientPassport(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final DelClientPassport defaultInstance;
      public static DelClientPassport getDefaultInstance() {
        return defaultInstance;
      }

      public DelClientPassport getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private DelClientPassport(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                passportId_ = input.readUInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelClientPassport_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelClientPassport_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport.Builder.class);
      }

      public static com.google.protobuf.Parser<DelClientPassport> PARSER =
          new com.google.protobuf.AbstractParser<DelClientPassport>() {
        public DelClientPassport parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new DelClientPassport(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<DelClientPassport> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional uint32 passport_id = 1;
      public static final int PASSPORT_ID_FIELD_NUMBER = 1;
      private int passportId_;
      /**
       * <code>optional uint32 passport_id = 1;</code>
       */
      public boolean hasPassportId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 passport_id = 1;</code>
       */
      public int getPassportId() {
        return passportId_;
      }

      private void initFields() {
        passportId_ = 0;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, passportId_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, passportId_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.DelClientPassport}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassportOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelClientPassport_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelClientPassport_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          passportId_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelClientPassport_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.passportId_ = passportId_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport.getDefaultInstance()) return this;
          if (other.hasPassportId()) {
            setPassportId(other.getPassportId());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional uint32 passport_id = 1;
        private int passportId_ ;
        /**
         * <code>optional uint32 passport_id = 1;</code>
         */
        public boolean hasPassportId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint32 passport_id = 1;</code>
         */
        public int getPassportId() {
          return passportId_;
        }
        /**
         * <code>optional uint32 passport_id = 1;</code>
         */
        public Builder setPassportId(int value) {
          bitField0_ |= 0x00000001;
          passportId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 passport_id = 1;</code>
         */
        public Builder clearPassportId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          passportId_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.DelClientPassport)
      }

      static {
        defaultInstance = new DelClientPassport(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.DelClientPassport)
    }

    public interface AddUserPassportOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.UserPassport passport = 1;
      /**
       * <code>optional .almaz2.domain_objects.UserPassport passport = 1;</code>
       */
      boolean hasPassport();
      /**
       * <code>optional .almaz2.domain_objects.UserPassport passport = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport getPassport();
      /**
       * <code>optional .almaz2.domain_objects.UserPassport passport = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassportOrBuilder getPassportOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddUserPassport}
     */
    public static final class AddUserPassport extends
        com.google.protobuf.GeneratedMessage
        implements AddUserPassportOrBuilder {
      // Use AddUserPassport.newBuilder() to construct.
      private AddUserPassport(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private AddUserPassport(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final AddUserPassport defaultInstance;
      public static AddUserPassport getDefaultInstance() {
        return defaultInstance;
      }

      public AddUserPassport getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private AddUserPassport(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = passport_.toBuilder();
                }
                passport_ = input.readMessage(ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(passport_);
                  passport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddUserPassport_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddUserPassport_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport.Builder.class);
      }

      public static com.google.protobuf.Parser<AddUserPassport> PARSER =
          new com.google.protobuf.AbstractParser<AddUserPassport>() {
        public AddUserPassport parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new AddUserPassport(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<AddUserPassport> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.UserPassport passport = 1;
      public static final int PASSPORT_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport passport_;
      /**
       * <code>optional .almaz2.domain_objects.UserPassport passport = 1;</code>
       */
      public boolean hasPassport() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.UserPassport passport = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport getPassport() {
        return passport_;
      }
      /**
       * <code>optional .almaz2.domain_objects.UserPassport passport = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassportOrBuilder getPassportOrBuilder() {
        return passport_;
      }

      private void initFields() {
        passport_ = ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasPassport()) {
          if (!getPassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, passport_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, passport_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddUserPassport}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassportOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddUserPassport_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddUserPassport_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getPassportFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (passportBuilder_ == null) {
            passport_ = ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport.getDefaultInstance();
          } else {
            passportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddUserPassport_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (passportBuilder_ == null) {
            result.passport_ = passport_;
          } else {
            result.passport_ = passportBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport.getDefaultInstance()) return this;
          if (other.hasPassport()) {
            mergePassport(other.getPassport());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasPassport()) {
            if (!getPassport().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.UserPassport passport = 1;
        private ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport passport_ = ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport, ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport.Builder, ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassportOrBuilder> passportBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.UserPassport passport = 1;</code>
         */
        public boolean hasPassport() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.UserPassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport getPassport() {
          if (passportBuilder_ == null) {
            return passport_;
          } else {
            return passportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.UserPassport passport = 1;</code>
         */
        public Builder setPassport(ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport value) {
          if (passportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            passport_ = value;
            onChanged();
          } else {
            passportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.UserPassport passport = 1;</code>
         */
        public Builder setPassport(
            ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport.Builder builderForValue) {
          if (passportBuilder_ == null) {
            passport_ = builderForValue.build();
            onChanged();
          } else {
            passportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.UserPassport passport = 1;</code>
         */
        public Builder mergePassport(ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport value) {
          if (passportBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                passport_ != ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport.getDefaultInstance()) {
              passport_ =
                ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport.newBuilder(passport_).mergeFrom(value).buildPartial();
            } else {
              passport_ = value;
            }
            onChanged();
          } else {
            passportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.UserPassport passport = 1;</code>
         */
        public Builder clearPassport() {
          if (passportBuilder_ == null) {
            passport_ = ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport.getDefaultInstance();
            onChanged();
          } else {
            passportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.UserPassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport.Builder getPassportBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.UserPassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassportOrBuilder getPassportOrBuilder() {
          if (passportBuilder_ != null) {
            return passportBuilder_.getMessageOrBuilder();
          } else {
            return passport_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.UserPassport passport = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport, ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport.Builder, ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassportOrBuilder> 
            getPassportFieldBuilder() {
          if (passportBuilder_ == null) {
            passportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport, ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport.Builder, ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassportOrBuilder>(
                    passport_,
                    getParentForChildren(),
                    isClean());
            passport_ = null;
          }
          return passportBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.AddUserPassport)
      }

      static {
        defaultInstance = new AddUserPassport(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.AddUserPassport)
    }

    public interface UpdUserPassportOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.UserPassport passport = 1;
      /**
       * <code>optional .almaz2.domain_objects.UserPassport passport = 1;</code>
       */
      boolean hasPassport();
      /**
       * <code>optional .almaz2.domain_objects.UserPassport passport = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport getPassport();
      /**
       * <code>optional .almaz2.domain_objects.UserPassport passport = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassportOrBuilder getPassportOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdUserPassport}
     */
    public static final class UpdUserPassport extends
        com.google.protobuf.GeneratedMessage
        implements UpdUserPassportOrBuilder {
      // Use UpdUserPassport.newBuilder() to construct.
      private UpdUserPassport(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private UpdUserPassport(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final UpdUserPassport defaultInstance;
      public static UpdUserPassport getDefaultInstance() {
        return defaultInstance;
      }

      public UpdUserPassport getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private UpdUserPassport(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = passport_.toBuilder();
                }
                passport_ = input.readMessage(ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(passport_);
                  passport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdUserPassport_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdUserPassport_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport.Builder.class);
      }

      public static com.google.protobuf.Parser<UpdUserPassport> PARSER =
          new com.google.protobuf.AbstractParser<UpdUserPassport>() {
        public UpdUserPassport parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new UpdUserPassport(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<UpdUserPassport> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.UserPassport passport = 1;
      public static final int PASSPORT_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport passport_;
      /**
       * <code>optional .almaz2.domain_objects.UserPassport passport = 1;</code>
       */
      public boolean hasPassport() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.UserPassport passport = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport getPassport() {
        return passport_;
      }
      /**
       * <code>optional .almaz2.domain_objects.UserPassport passport = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassportOrBuilder getPassportOrBuilder() {
        return passport_;
      }

      private void initFields() {
        passport_ = ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasPassport()) {
          if (!getPassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, passport_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, passport_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdUserPassport}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassportOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdUserPassport_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdUserPassport_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getPassportFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (passportBuilder_ == null) {
            passport_ = ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport.getDefaultInstance();
          } else {
            passportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdUserPassport_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (passportBuilder_ == null) {
            result.passport_ = passport_;
          } else {
            result.passport_ = passportBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport.getDefaultInstance()) return this;
          if (other.hasPassport()) {
            mergePassport(other.getPassport());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasPassport()) {
            if (!getPassport().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.UserPassport passport = 1;
        private ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport passport_ = ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport, ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport.Builder, ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassportOrBuilder> passportBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.UserPassport passport = 1;</code>
         */
        public boolean hasPassport() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.UserPassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport getPassport() {
          if (passportBuilder_ == null) {
            return passport_;
          } else {
            return passportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.UserPassport passport = 1;</code>
         */
        public Builder setPassport(ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport value) {
          if (passportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            passport_ = value;
            onChanged();
          } else {
            passportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.UserPassport passport = 1;</code>
         */
        public Builder setPassport(
            ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport.Builder builderForValue) {
          if (passportBuilder_ == null) {
            passport_ = builderForValue.build();
            onChanged();
          } else {
            passportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.UserPassport passport = 1;</code>
         */
        public Builder mergePassport(ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport value) {
          if (passportBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                passport_ != ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport.getDefaultInstance()) {
              passport_ =
                ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport.newBuilder(passport_).mergeFrom(value).buildPartial();
            } else {
              passport_ = value;
            }
            onChanged();
          } else {
            passportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.UserPassport passport = 1;</code>
         */
        public Builder clearPassport() {
          if (passportBuilder_ == null) {
            passport_ = ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport.getDefaultInstance();
            onChanged();
          } else {
            passportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.UserPassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport.Builder getPassportBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.UserPassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassportOrBuilder getPassportOrBuilder() {
          if (passportBuilder_ != null) {
            return passportBuilder_.getMessageOrBuilder();
          } else {
            return passport_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.UserPassport passport = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport, ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport.Builder, ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassportOrBuilder> 
            getPassportFieldBuilder() {
          if (passportBuilder_ == null) {
            passportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport, ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassport.Builder, ru.kodos.almaz2.domain_objects.UserPassportClass.UserPassportOrBuilder>(
                    passport_,
                    getParentForChildren(),
                    isClean());
            passport_ = null;
          }
          return passportBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.UpdUserPassport)
      }

      static {
        defaultInstance = new UpdUserPassport(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.UpdUserPassport)
    }

    public interface DelUserPassportOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional uint32 passport_id = 1;
      /**
       * <code>optional uint32 passport_id = 1;</code>
       */
      boolean hasPassportId();
      /**
       * <code>optional uint32 passport_id = 1;</code>
       */
      int getPassportId();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.DelUserPassport}
     */
    public static final class DelUserPassport extends
        com.google.protobuf.GeneratedMessage
        implements DelUserPassportOrBuilder {
      // Use DelUserPassport.newBuilder() to construct.
      private DelUserPassport(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private DelUserPassport(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final DelUserPassport defaultInstance;
      public static DelUserPassport getDefaultInstance() {
        return defaultInstance;
      }

      public DelUserPassport getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private DelUserPassport(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                passportId_ = input.readUInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelUserPassport_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelUserPassport_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport.Builder.class);
      }

      public static com.google.protobuf.Parser<DelUserPassport> PARSER =
          new com.google.protobuf.AbstractParser<DelUserPassport>() {
        public DelUserPassport parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new DelUserPassport(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<DelUserPassport> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional uint32 passport_id = 1;
      public static final int PASSPORT_ID_FIELD_NUMBER = 1;
      private int passportId_;
      /**
       * <code>optional uint32 passport_id = 1;</code>
       */
      public boolean hasPassportId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 passport_id = 1;</code>
       */
      public int getPassportId() {
        return passportId_;
      }

      private void initFields() {
        passportId_ = 0;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, passportId_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, passportId_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.DelUserPassport}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassportOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelUserPassport_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelUserPassport_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          passportId_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelUserPassport_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.passportId_ = passportId_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport.getDefaultInstance()) return this;
          if (other.hasPassportId()) {
            setPassportId(other.getPassportId());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional uint32 passport_id = 1;
        private int passportId_ ;
        /**
         * <code>optional uint32 passport_id = 1;</code>
         */
        public boolean hasPassportId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint32 passport_id = 1;</code>
         */
        public int getPassportId() {
          return passportId_;
        }
        /**
         * <code>optional uint32 passport_id = 1;</code>
         */
        public Builder setPassportId(int value) {
          bitField0_ |= 0x00000001;
          passportId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 passport_id = 1;</code>
         */
        public Builder clearPassportId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          passportId_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.DelUserPassport)
      }

      static {
        defaultInstance = new DelUserPassport(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.DelUserPassport)
    }

    public interface AddEquipmentFirmwarePassportOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;
      /**
       * <code>optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;</code>
       */
      boolean hasPassport();
      /**
       * <code>optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport getPassport();
      /**
       * <code>optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassportOrBuilder getPassportOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport}
     */
    public static final class AddEquipmentFirmwarePassport extends
        com.google.protobuf.GeneratedMessage
        implements AddEquipmentFirmwarePassportOrBuilder {
      // Use AddEquipmentFirmwarePassport.newBuilder() to construct.
      private AddEquipmentFirmwarePassport(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private AddEquipmentFirmwarePassport(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final AddEquipmentFirmwarePassport defaultInstance;
      public static AddEquipmentFirmwarePassport getDefaultInstance() {
        return defaultInstance;
      }

      public AddEquipmentFirmwarePassport getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private AddEquipmentFirmwarePassport(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = passport_.toBuilder();
                }
                passport_ = input.readMessage(ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(passport_);
                  passport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentFirmwarePassport_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentFirmwarePassport_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport.Builder.class);
      }

      public static com.google.protobuf.Parser<AddEquipmentFirmwarePassport> PARSER =
          new com.google.protobuf.AbstractParser<AddEquipmentFirmwarePassport>() {
        public AddEquipmentFirmwarePassport parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new AddEquipmentFirmwarePassport(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<AddEquipmentFirmwarePassport> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;
      public static final int PASSPORT_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport passport_;
      /**
       * <code>optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;</code>
       */
      public boolean hasPassport() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport getPassport() {
        return passport_;
      }
      /**
       * <code>optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassportOrBuilder getPassportOrBuilder() {
        return passport_;
      }

      private void initFields() {
        passport_ = ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasPassport()) {
          if (!getPassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, passport_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, passport_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassportOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentFirmwarePassport_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentFirmwarePassport_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getPassportFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (passportBuilder_ == null) {
            passport_ = ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport.getDefaultInstance();
          } else {
            passportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentFirmwarePassport_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (passportBuilder_ == null) {
            result.passport_ = passport_;
          } else {
            result.passport_ = passportBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport.getDefaultInstance()) return this;
          if (other.hasPassport()) {
            mergePassport(other.getPassport());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasPassport()) {
            if (!getPassport().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;
        private ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport passport_ = ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport, ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport.Builder, ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassportOrBuilder> passportBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;</code>
         */
        public boolean hasPassport() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport getPassport() {
          if (passportBuilder_ == null) {
            return passport_;
          } else {
            return passportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;</code>
         */
        public Builder setPassport(ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport value) {
          if (passportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            passport_ = value;
            onChanged();
          } else {
            passportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;</code>
         */
        public Builder setPassport(
            ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport.Builder builderForValue) {
          if (passportBuilder_ == null) {
            passport_ = builderForValue.build();
            onChanged();
          } else {
            passportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;</code>
         */
        public Builder mergePassport(ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport value) {
          if (passportBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                passport_ != ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport.getDefaultInstance()) {
              passport_ =
                ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport.newBuilder(passport_).mergeFrom(value).buildPartial();
            } else {
              passport_ = value;
            }
            onChanged();
          } else {
            passportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;</code>
         */
        public Builder clearPassport() {
          if (passportBuilder_ == null) {
            passport_ = ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport.getDefaultInstance();
            onChanged();
          } else {
            passportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport.Builder getPassportBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassportOrBuilder getPassportOrBuilder() {
          if (passportBuilder_ != null) {
            return passportBuilder_.getMessageOrBuilder();
          } else {
            return passport_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport, ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport.Builder, ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassportOrBuilder> 
            getPassportFieldBuilder() {
          if (passportBuilder_ == null) {
            passportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport, ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport.Builder, ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassportOrBuilder>(
                    passport_,
                    getParentForChildren(),
                    isClean());
            passport_ = null;
          }
          return passportBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport)
      }

      static {
        defaultInstance = new AddEquipmentFirmwarePassport(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport)
    }

    public interface UpdEquipmentFirmwarePassportOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;
      /**
       * <code>optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;</code>
       */
      boolean hasPassport();
      /**
       * <code>optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport getPassport();
      /**
       * <code>optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassportOrBuilder getPassportOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport}
     */
    public static final class UpdEquipmentFirmwarePassport extends
        com.google.protobuf.GeneratedMessage
        implements UpdEquipmentFirmwarePassportOrBuilder {
      // Use UpdEquipmentFirmwarePassport.newBuilder() to construct.
      private UpdEquipmentFirmwarePassport(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private UpdEquipmentFirmwarePassport(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final UpdEquipmentFirmwarePassport defaultInstance;
      public static UpdEquipmentFirmwarePassport getDefaultInstance() {
        return defaultInstance;
      }

      public UpdEquipmentFirmwarePassport getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private UpdEquipmentFirmwarePassport(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = passport_.toBuilder();
                }
                passport_ = input.readMessage(ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(passport_);
                  passport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentFirmwarePassport_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentFirmwarePassport_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport.Builder.class);
      }

      public static com.google.protobuf.Parser<UpdEquipmentFirmwarePassport> PARSER =
          new com.google.protobuf.AbstractParser<UpdEquipmentFirmwarePassport>() {
        public UpdEquipmentFirmwarePassport parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new UpdEquipmentFirmwarePassport(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<UpdEquipmentFirmwarePassport> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;
      public static final int PASSPORT_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport passport_;
      /**
       * <code>optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;</code>
       */
      public boolean hasPassport() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport getPassport() {
        return passport_;
      }
      /**
       * <code>optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassportOrBuilder getPassportOrBuilder() {
        return passport_;
      }

      private void initFields() {
        passport_ = ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasPassport()) {
          if (!getPassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, passport_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, passport_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassportOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentFirmwarePassport_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentFirmwarePassport_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getPassportFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (passportBuilder_ == null) {
            passport_ = ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport.getDefaultInstance();
          } else {
            passportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentFirmwarePassport_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (passportBuilder_ == null) {
            result.passport_ = passport_;
          } else {
            result.passport_ = passportBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport.getDefaultInstance()) return this;
          if (other.hasPassport()) {
            mergePassport(other.getPassport());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasPassport()) {
            if (!getPassport().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;
        private ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport passport_ = ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport, ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport.Builder, ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassportOrBuilder> passportBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;</code>
         */
        public boolean hasPassport() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport getPassport() {
          if (passportBuilder_ == null) {
            return passport_;
          } else {
            return passportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;</code>
         */
        public Builder setPassport(ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport value) {
          if (passportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            passport_ = value;
            onChanged();
          } else {
            passportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;</code>
         */
        public Builder setPassport(
            ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport.Builder builderForValue) {
          if (passportBuilder_ == null) {
            passport_ = builderForValue.build();
            onChanged();
          } else {
            passportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;</code>
         */
        public Builder mergePassport(ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport value) {
          if (passportBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                passport_ != ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport.getDefaultInstance()) {
              passport_ =
                ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport.newBuilder(passport_).mergeFrom(value).buildPartial();
            } else {
              passport_ = value;
            }
            onChanged();
          } else {
            passportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;</code>
         */
        public Builder clearPassport() {
          if (passportBuilder_ == null) {
            passport_ = ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport.getDefaultInstance();
            onChanged();
          } else {
            passportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport.Builder getPassportBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassportOrBuilder getPassportOrBuilder() {
          if (passportBuilder_ != null) {
            return passportBuilder_.getMessageOrBuilder();
          } else {
            return passport_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentFirmwarePassport passport = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport, ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport.Builder, ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassportOrBuilder> 
            getPassportFieldBuilder() {
          if (passportBuilder_ == null) {
            passportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport, ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassport.Builder, ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.EquipmentFirmwarePassportOrBuilder>(
                    passport_,
                    getParentForChildren(),
                    isClean());
            passport_ = null;
          }
          return passportBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport)
      }

      static {
        defaultInstance = new UpdEquipmentFirmwarePassport(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport)
    }

    public interface DelEquipmentFirmwarePassportOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional uint32 passport_id = 1;
      /**
       * <code>optional uint32 passport_id = 1;</code>
       */
      boolean hasPassportId();
      /**
       * <code>optional uint32 passport_id = 1;</code>
       */
      int getPassportId();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport}
     */
    public static final class DelEquipmentFirmwarePassport extends
        com.google.protobuf.GeneratedMessage
        implements DelEquipmentFirmwarePassportOrBuilder {
      // Use DelEquipmentFirmwarePassport.newBuilder() to construct.
      private DelEquipmentFirmwarePassport(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private DelEquipmentFirmwarePassport(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final DelEquipmentFirmwarePassport defaultInstance;
      public static DelEquipmentFirmwarePassport getDefaultInstance() {
        return defaultInstance;
      }

      public DelEquipmentFirmwarePassport getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private DelEquipmentFirmwarePassport(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                passportId_ = input.readUInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentFirmwarePassport_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentFirmwarePassport_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport.Builder.class);
      }

      public static com.google.protobuf.Parser<DelEquipmentFirmwarePassport> PARSER =
          new com.google.protobuf.AbstractParser<DelEquipmentFirmwarePassport>() {
        public DelEquipmentFirmwarePassport parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new DelEquipmentFirmwarePassport(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<DelEquipmentFirmwarePassport> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional uint32 passport_id = 1;
      public static final int PASSPORT_ID_FIELD_NUMBER = 1;
      private int passportId_;
      /**
       * <code>optional uint32 passport_id = 1;</code>
       */
      public boolean hasPassportId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 passport_id = 1;</code>
       */
      public int getPassportId() {
        return passportId_;
      }

      private void initFields() {
        passportId_ = 0;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, passportId_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, passportId_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassportOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentFirmwarePassport_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentFirmwarePassport_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          passportId_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentFirmwarePassport_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.passportId_ = passportId_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport.getDefaultInstance()) return this;
          if (other.hasPassportId()) {
            setPassportId(other.getPassportId());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional uint32 passport_id = 1;
        private int passportId_ ;
        /**
         * <code>optional uint32 passport_id = 1;</code>
         */
        public boolean hasPassportId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint32 passport_id = 1;</code>
         */
        public int getPassportId() {
          return passportId_;
        }
        /**
         * <code>optional uint32 passport_id = 1;</code>
         */
        public Builder setPassportId(int value) {
          bitField0_ |= 0x00000001;
          passportId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 passport_id = 1;</code>
         */
        public Builder clearPassportId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          passportId_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport)
      }

      static {
        defaultInstance = new DelEquipmentFirmwarePassport(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport)
    }

    public interface AddControlObjectPassportTypeOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;</code>
       */
      boolean hasPassportType();
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType getPassportType();
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportTypeOrBuilder getPassportTypeOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType}
     */
    public static final class AddControlObjectPassportType extends
        com.google.protobuf.GeneratedMessage
        implements AddControlObjectPassportTypeOrBuilder {
      // Use AddControlObjectPassportType.newBuilder() to construct.
      private AddControlObjectPassportType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private AddControlObjectPassportType(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final AddControlObjectPassportType defaultInstance;
      public static AddControlObjectPassportType getDefaultInstance() {
        return defaultInstance;
      }

      public AddControlObjectPassportType getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private AddControlObjectPassportType(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = passportType_.toBuilder();
                }
                passportType_ = input.readMessage(ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(passportType_);
                  passportType_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectPassportType_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectPassportType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType.Builder.class);
      }

      public static com.google.protobuf.Parser<AddControlObjectPassportType> PARSER =
          new com.google.protobuf.AbstractParser<AddControlObjectPassportType>() {
        public AddControlObjectPassportType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new AddControlObjectPassportType(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<AddControlObjectPassportType> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;
      public static final int PASSPORT_TYPE_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType passportType_;
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;</code>
       */
      public boolean hasPassportType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType getPassportType() {
        return passportType_;
      }
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportTypeOrBuilder getPassportTypeOrBuilder() {
        return passportType_;
      }

      private void initFields() {
        passportType_ = ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasPassportType()) {
          if (!getPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, passportType_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, passportType_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectPassportType_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectPassportType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getPassportTypeFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (passportTypeBuilder_ == null) {
            passportType_ = ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType.getDefaultInstance();
          } else {
            passportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectPassportType_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (passportTypeBuilder_ == null) {
            result.passportType_ = passportType_;
          } else {
            result.passportType_ = passportTypeBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType.getDefaultInstance()) return this;
          if (other.hasPassportType()) {
            mergePassportType(other.getPassportType());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasPassportType()) {
            if (!getPassportType().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;
        private ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType passportType_ = ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType, ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType.Builder, ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportTypeOrBuilder> passportTypeBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;</code>
         */
        public boolean hasPassportType() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType getPassportType() {
          if (passportTypeBuilder_ == null) {
            return passportType_;
          } else {
            return passportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;</code>
         */
        public Builder setPassportType(ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType value) {
          if (passportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            passportType_ = value;
            onChanged();
          } else {
            passportTypeBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;</code>
         */
        public Builder setPassportType(
            ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType.Builder builderForValue) {
          if (passportTypeBuilder_ == null) {
            passportType_ = builderForValue.build();
            onChanged();
          } else {
            passportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;</code>
         */
        public Builder mergePassportType(ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType value) {
          if (passportTypeBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                passportType_ != ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType.getDefaultInstance()) {
              passportType_ =
                ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType.newBuilder(passportType_).mergeFrom(value).buildPartial();
            } else {
              passportType_ = value;
            }
            onChanged();
          } else {
            passportTypeBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;</code>
         */
        public Builder clearPassportType() {
          if (passportTypeBuilder_ == null) {
            passportType_ = ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType.getDefaultInstance();
            onChanged();
          } else {
            passportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType.Builder getPassportTypeBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportTypeOrBuilder getPassportTypeOrBuilder() {
          if (passportTypeBuilder_ != null) {
            return passportTypeBuilder_.getMessageOrBuilder();
          } else {
            return passportType_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType, ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType.Builder, ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportTypeOrBuilder> 
            getPassportTypeFieldBuilder() {
          if (passportTypeBuilder_ == null) {
            passportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType, ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType.Builder, ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportTypeOrBuilder>(
                    passportType_,
                    getParentForChildren(),
                    isClean());
            passportType_ = null;
          }
          return passportTypeBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType)
      }

      static {
        defaultInstance = new AddControlObjectPassportType(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType)
    }

    public interface UpdControlObjectPassportTypeOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;</code>
       */
      boolean hasPassportType();
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType getPassportType();
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportTypeOrBuilder getPassportTypeOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType}
     */
    public static final class UpdControlObjectPassportType extends
        com.google.protobuf.GeneratedMessage
        implements UpdControlObjectPassportTypeOrBuilder {
      // Use UpdControlObjectPassportType.newBuilder() to construct.
      private UpdControlObjectPassportType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private UpdControlObjectPassportType(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final UpdControlObjectPassportType defaultInstance;
      public static UpdControlObjectPassportType getDefaultInstance() {
        return defaultInstance;
      }

      public UpdControlObjectPassportType getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private UpdControlObjectPassportType(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = passportType_.toBuilder();
                }
                passportType_ = input.readMessage(ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(passportType_);
                  passportType_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectPassportType_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectPassportType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType.Builder.class);
      }

      public static com.google.protobuf.Parser<UpdControlObjectPassportType> PARSER =
          new com.google.protobuf.AbstractParser<UpdControlObjectPassportType>() {
        public UpdControlObjectPassportType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new UpdControlObjectPassportType(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<UpdControlObjectPassportType> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;
      public static final int PASSPORT_TYPE_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType passportType_;
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;</code>
       */
      public boolean hasPassportType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType getPassportType() {
        return passportType_;
      }
      /**
       * <code>optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportTypeOrBuilder getPassportTypeOrBuilder() {
        return passportType_;
      }

      private void initFields() {
        passportType_ = ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasPassportType()) {
          if (!getPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, passportType_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, passportType_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectPassportType_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectPassportType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getPassportTypeFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (passportTypeBuilder_ == null) {
            passportType_ = ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType.getDefaultInstance();
          } else {
            passportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectPassportType_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (passportTypeBuilder_ == null) {
            result.passportType_ = passportType_;
          } else {
            result.passportType_ = passportTypeBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType.getDefaultInstance()) return this;
          if (other.hasPassportType()) {
            mergePassportType(other.getPassportType());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasPassportType()) {
            if (!getPassportType().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;
        private ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType passportType_ = ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType, ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType.Builder, ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportTypeOrBuilder> passportTypeBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;</code>
         */
        public boolean hasPassportType() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType getPassportType() {
          if (passportTypeBuilder_ == null) {
            return passportType_;
          } else {
            return passportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;</code>
         */
        public Builder setPassportType(ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType value) {
          if (passportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            passportType_ = value;
            onChanged();
          } else {
            passportTypeBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;</code>
         */
        public Builder setPassportType(
            ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType.Builder builderForValue) {
          if (passportTypeBuilder_ == null) {
            passportType_ = builderForValue.build();
            onChanged();
          } else {
            passportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;</code>
         */
        public Builder mergePassportType(ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType value) {
          if (passportTypeBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                passportType_ != ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType.getDefaultInstance()) {
              passportType_ =
                ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType.newBuilder(passportType_).mergeFrom(value).buildPartial();
            } else {
              passportType_ = value;
            }
            onChanged();
          } else {
            passportTypeBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;</code>
         */
        public Builder clearPassportType() {
          if (passportTypeBuilder_ == null) {
            passportType_ = ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType.getDefaultInstance();
            onChanged();
          } else {
            passportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType.Builder getPassportTypeBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportTypeOrBuilder getPassportTypeOrBuilder() {
          if (passportTypeBuilder_ != null) {
            return passportTypeBuilder_.getMessageOrBuilder();
          } else {
            return passportType_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlObjectPassportType passport_type = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType, ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType.Builder, ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportTypeOrBuilder> 
            getPassportTypeFieldBuilder() {
          if (passportTypeBuilder_ == null) {
            passportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType, ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportType.Builder, ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.ControlObjectPassportTypeOrBuilder>(
                    passportType_,
                    getParentForChildren(),
                    isClean());
            passportType_ = null;
          }
          return passportTypeBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType)
      }

      static {
        defaultInstance = new UpdControlObjectPassportType(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType)
    }

    public interface DelControlObjectPassportTypeOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional string passport_type_id = 1;
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      boolean hasPassportTypeId();
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      java.lang.String getPassportTypeId();
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      com.google.protobuf.ByteString
          getPassportTypeIdBytes();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType}
     */
    public static final class DelControlObjectPassportType extends
        com.google.protobuf.GeneratedMessage
        implements DelControlObjectPassportTypeOrBuilder {
      // Use DelControlObjectPassportType.newBuilder() to construct.
      private DelControlObjectPassportType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private DelControlObjectPassportType(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final DelControlObjectPassportType defaultInstance;
      public static DelControlObjectPassportType getDefaultInstance() {
        return defaultInstance;
      }

      public DelControlObjectPassportType getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private DelControlObjectPassportType(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                bitField0_ |= 0x00000001;
                passportTypeId_ = input.readBytes();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelControlObjectPassportType_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelControlObjectPassportType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType.Builder.class);
      }

      public static com.google.protobuf.Parser<DelControlObjectPassportType> PARSER =
          new com.google.protobuf.AbstractParser<DelControlObjectPassportType>() {
        public DelControlObjectPassportType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new DelControlObjectPassportType(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<DelControlObjectPassportType> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional string passport_type_id = 1;
      public static final int PASSPORT_TYPE_ID_FIELD_NUMBER = 1;
      private java.lang.Object passportTypeId_;
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      public boolean hasPassportTypeId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      public java.lang.String getPassportTypeId() {
        java.lang.Object ref = passportTypeId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            passportTypeId_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getPassportTypeIdBytes() {
        java.lang.Object ref = passportTypeId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          passportTypeId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private void initFields() {
        passportTypeId_ = "";
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeBytes(1, getPassportTypeIdBytes());
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(1, getPassportTypeIdBytes());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelControlObjectPassportType_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelControlObjectPassportType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          passportTypeId_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelControlObjectPassportType_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.passportTypeId_ = passportTypeId_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType.getDefaultInstance()) return this;
          if (other.hasPassportTypeId()) {
            bitField0_ |= 0x00000001;
            passportTypeId_ = other.passportTypeId_;
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional string passport_type_id = 1;
        private java.lang.Object passportTypeId_ = "";
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public boolean hasPassportTypeId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public java.lang.String getPassportTypeId() {
          java.lang.Object ref = passportTypeId_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            passportTypeId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public com.google.protobuf.ByteString
            getPassportTypeIdBytes() {
          java.lang.Object ref = passportTypeId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            passportTypeId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public Builder setPassportTypeId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          passportTypeId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public Builder clearPassportTypeId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          passportTypeId_ = getDefaultInstance().getPassportTypeId();
          onChanged();
          return this;
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public Builder setPassportTypeIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          passportTypeId_ = value;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType)
      }

      static {
        defaultInstance = new DelControlObjectPassportType(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType)
    }

    public interface AddControlElementPassportTypeOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;
      /**
       * <code>optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;</code>
       */
      boolean hasPassportType();
      /**
       * <code>optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType getPassportType();
      /**
       * <code>optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportTypeOrBuilder getPassportTypeOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType}
     */
    public static final class AddControlElementPassportType extends
        com.google.protobuf.GeneratedMessage
        implements AddControlElementPassportTypeOrBuilder {
      // Use AddControlElementPassportType.newBuilder() to construct.
      private AddControlElementPassportType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private AddControlElementPassportType(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final AddControlElementPassportType defaultInstance;
      public static AddControlElementPassportType getDefaultInstance() {
        return defaultInstance;
      }

      public AddControlElementPassportType getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private AddControlElementPassportType(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = passportType_.toBuilder();
                }
                passportType_ = input.readMessage(ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(passportType_);
                  passportType_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddControlElementPassportType_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddControlElementPassportType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType.Builder.class);
      }

      public static com.google.protobuf.Parser<AddControlElementPassportType> PARSER =
          new com.google.protobuf.AbstractParser<AddControlElementPassportType>() {
        public AddControlElementPassportType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new AddControlElementPassportType(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<AddControlElementPassportType> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;
      public static final int PASSPORT_TYPE_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType passportType_;
      /**
       * <code>optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;</code>
       */
      public boolean hasPassportType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType getPassportType() {
        return passportType_;
      }
      /**
       * <code>optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportTypeOrBuilder getPassportTypeOrBuilder() {
        return passportType_;
      }

      private void initFields() {
        passportType_ = ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasPassportType()) {
          if (!getPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, passportType_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, passportType_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddControlElementPassportType_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddControlElementPassportType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getPassportTypeFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (passportTypeBuilder_ == null) {
            passportType_ = ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType.getDefaultInstance();
          } else {
            passportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddControlElementPassportType_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (passportTypeBuilder_ == null) {
            result.passportType_ = passportType_;
          } else {
            result.passportType_ = passportTypeBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType.getDefaultInstance()) return this;
          if (other.hasPassportType()) {
            mergePassportType(other.getPassportType());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasPassportType()) {
            if (!getPassportType().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;
        private ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType passportType_ = ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType, ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType.Builder, ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportTypeOrBuilder> passportTypeBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;</code>
         */
        public boolean hasPassportType() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType getPassportType() {
          if (passportTypeBuilder_ == null) {
            return passportType_;
          } else {
            return passportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;</code>
         */
        public Builder setPassportType(ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType value) {
          if (passportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            passportType_ = value;
            onChanged();
          } else {
            passportTypeBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;</code>
         */
        public Builder setPassportType(
            ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType.Builder builderForValue) {
          if (passportTypeBuilder_ == null) {
            passportType_ = builderForValue.build();
            onChanged();
          } else {
            passportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;</code>
         */
        public Builder mergePassportType(ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType value) {
          if (passportTypeBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                passportType_ != ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType.getDefaultInstance()) {
              passportType_ =
                ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType.newBuilder(passportType_).mergeFrom(value).buildPartial();
            } else {
              passportType_ = value;
            }
            onChanged();
          } else {
            passportTypeBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;</code>
         */
        public Builder clearPassportType() {
          if (passportTypeBuilder_ == null) {
            passportType_ = ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType.getDefaultInstance();
            onChanged();
          } else {
            passportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType.Builder getPassportTypeBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportTypeOrBuilder getPassportTypeOrBuilder() {
          if (passportTypeBuilder_ != null) {
            return passportTypeBuilder_.getMessageOrBuilder();
          } else {
            return passportType_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType, ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType.Builder, ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportTypeOrBuilder> 
            getPassportTypeFieldBuilder() {
          if (passportTypeBuilder_ == null) {
            passportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType, ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType.Builder, ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportTypeOrBuilder>(
                    passportType_,
                    getParentForChildren(),
                    isClean());
            passportType_ = null;
          }
          return passportTypeBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType)
      }

      static {
        defaultInstance = new AddControlElementPassportType(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType)
    }

    public interface UpdControlElementPassportTypeOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;
      /**
       * <code>optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;</code>
       */
      boolean hasPassportType();
      /**
       * <code>optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType getPassportType();
      /**
       * <code>optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportTypeOrBuilder getPassportTypeOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType}
     */
    public static final class UpdControlElementPassportType extends
        com.google.protobuf.GeneratedMessage
        implements UpdControlElementPassportTypeOrBuilder {
      // Use UpdControlElementPassportType.newBuilder() to construct.
      private UpdControlElementPassportType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private UpdControlElementPassportType(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final UpdControlElementPassportType defaultInstance;
      public static UpdControlElementPassportType getDefaultInstance() {
        return defaultInstance;
      }

      public UpdControlElementPassportType getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private UpdControlElementPassportType(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = passportType_.toBuilder();
                }
                passportType_ = input.readMessage(ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(passportType_);
                  passportType_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlElementPassportType_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlElementPassportType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType.Builder.class);
      }

      public static com.google.protobuf.Parser<UpdControlElementPassportType> PARSER =
          new com.google.protobuf.AbstractParser<UpdControlElementPassportType>() {
        public UpdControlElementPassportType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new UpdControlElementPassportType(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<UpdControlElementPassportType> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;
      public static final int PASSPORT_TYPE_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType passportType_;
      /**
       * <code>optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;</code>
       */
      public boolean hasPassportType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType getPassportType() {
        return passportType_;
      }
      /**
       * <code>optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportTypeOrBuilder getPassportTypeOrBuilder() {
        return passportType_;
      }

      private void initFields() {
        passportType_ = ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasPassportType()) {
          if (!getPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, passportType_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, passportType_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlElementPassportType_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlElementPassportType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getPassportTypeFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (passportTypeBuilder_ == null) {
            passportType_ = ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType.getDefaultInstance();
          } else {
            passportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlElementPassportType_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (passportTypeBuilder_ == null) {
            result.passportType_ = passportType_;
          } else {
            result.passportType_ = passportTypeBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType.getDefaultInstance()) return this;
          if (other.hasPassportType()) {
            mergePassportType(other.getPassportType());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasPassportType()) {
            if (!getPassportType().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;
        private ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType passportType_ = ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType, ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType.Builder, ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportTypeOrBuilder> passportTypeBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;</code>
         */
        public boolean hasPassportType() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType getPassportType() {
          if (passportTypeBuilder_ == null) {
            return passportType_;
          } else {
            return passportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;</code>
         */
        public Builder setPassportType(ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType value) {
          if (passportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            passportType_ = value;
            onChanged();
          } else {
            passportTypeBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;</code>
         */
        public Builder setPassportType(
            ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType.Builder builderForValue) {
          if (passportTypeBuilder_ == null) {
            passportType_ = builderForValue.build();
            onChanged();
          } else {
            passportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;</code>
         */
        public Builder mergePassportType(ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType value) {
          if (passportTypeBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                passportType_ != ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType.getDefaultInstance()) {
              passportType_ =
                ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType.newBuilder(passportType_).mergeFrom(value).buildPartial();
            } else {
              passportType_ = value;
            }
            onChanged();
          } else {
            passportTypeBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;</code>
         */
        public Builder clearPassportType() {
          if (passportTypeBuilder_ == null) {
            passportType_ = ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType.getDefaultInstance();
            onChanged();
          } else {
            passportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType.Builder getPassportTypeBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportTypeOrBuilder getPassportTypeOrBuilder() {
          if (passportTypeBuilder_ != null) {
            return passportTypeBuilder_.getMessageOrBuilder();
          } else {
            return passportType_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ControlElementPassportType passport_type = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType, ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType.Builder, ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportTypeOrBuilder> 
            getPassportTypeFieldBuilder() {
          if (passportTypeBuilder_ == null) {
            passportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType, ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportType.Builder, ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.ControlElementPassportTypeOrBuilder>(
                    passportType_,
                    getParentForChildren(),
                    isClean());
            passportType_ = null;
          }
          return passportTypeBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType)
      }

      static {
        defaultInstance = new UpdControlElementPassportType(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType)
    }

    public interface DelControlElementPassportTypeOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional string passport_type_id = 1;
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      boolean hasPassportTypeId();
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      java.lang.String getPassportTypeId();
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      com.google.protobuf.ByteString
          getPassportTypeIdBytes();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType}
     */
    public static final class DelControlElementPassportType extends
        com.google.protobuf.GeneratedMessage
        implements DelControlElementPassportTypeOrBuilder {
      // Use DelControlElementPassportType.newBuilder() to construct.
      private DelControlElementPassportType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private DelControlElementPassportType(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final DelControlElementPassportType defaultInstance;
      public static DelControlElementPassportType getDefaultInstance() {
        return defaultInstance;
      }

      public DelControlElementPassportType getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private DelControlElementPassportType(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                bitField0_ |= 0x00000001;
                passportTypeId_ = input.readBytes();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelControlElementPassportType_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelControlElementPassportType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType.Builder.class);
      }

      public static com.google.protobuf.Parser<DelControlElementPassportType> PARSER =
          new com.google.protobuf.AbstractParser<DelControlElementPassportType>() {
        public DelControlElementPassportType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new DelControlElementPassportType(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<DelControlElementPassportType> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional string passport_type_id = 1;
      public static final int PASSPORT_TYPE_ID_FIELD_NUMBER = 1;
      private java.lang.Object passportTypeId_;
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      public boolean hasPassportTypeId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      public java.lang.String getPassportTypeId() {
        java.lang.Object ref = passportTypeId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            passportTypeId_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getPassportTypeIdBytes() {
        java.lang.Object ref = passportTypeId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          passportTypeId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private void initFields() {
        passportTypeId_ = "";
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeBytes(1, getPassportTypeIdBytes());
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(1, getPassportTypeIdBytes());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelControlElementPassportType_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelControlElementPassportType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          passportTypeId_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelControlElementPassportType_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.passportTypeId_ = passportTypeId_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType.getDefaultInstance()) return this;
          if (other.hasPassportTypeId()) {
            bitField0_ |= 0x00000001;
            passportTypeId_ = other.passportTypeId_;
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional string passport_type_id = 1;
        private java.lang.Object passportTypeId_ = "";
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public boolean hasPassportTypeId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public java.lang.String getPassportTypeId() {
          java.lang.Object ref = passportTypeId_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            passportTypeId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public com.google.protobuf.ByteString
            getPassportTypeIdBytes() {
          java.lang.Object ref = passportTypeId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            passportTypeId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public Builder setPassportTypeId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          passportTypeId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public Builder clearPassportTypeId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          passportTypeId_ = getDefaultInstance().getPassportTypeId();
          onChanged();
          return this;
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public Builder setPassportTypeIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          passportTypeId_ = value;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType)
      }

      static {
        defaultInstance = new DelControlElementPassportType(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType)
    }

    public interface AddEquipmentPassportTypeOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;
      /**
       * <code>optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;</code>
       */
      boolean hasPassportType();
      /**
       * <code>optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType getPassportType();
      /**
       * <code>optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportTypeOrBuilder getPassportTypeOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType}
     */
    public static final class AddEquipmentPassportType extends
        com.google.protobuf.GeneratedMessage
        implements AddEquipmentPassportTypeOrBuilder {
      // Use AddEquipmentPassportType.newBuilder() to construct.
      private AddEquipmentPassportType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private AddEquipmentPassportType(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final AddEquipmentPassportType defaultInstance;
      public static AddEquipmentPassportType getDefaultInstance() {
        return defaultInstance;
      }

      public AddEquipmentPassportType getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private AddEquipmentPassportType(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = passportType_.toBuilder();
                }
                passportType_ = input.readMessage(ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(passportType_);
                  passportType_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentPassportType_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentPassportType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType.Builder.class);
      }

      public static com.google.protobuf.Parser<AddEquipmentPassportType> PARSER =
          new com.google.protobuf.AbstractParser<AddEquipmentPassportType>() {
        public AddEquipmentPassportType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new AddEquipmentPassportType(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<AddEquipmentPassportType> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;
      public static final int PASSPORT_TYPE_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType passportType_;
      /**
       * <code>optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;</code>
       */
      public boolean hasPassportType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType getPassportType() {
        return passportType_;
      }
      /**
       * <code>optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportTypeOrBuilder getPassportTypeOrBuilder() {
        return passportType_;
      }

      private void initFields() {
        passportType_ = ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasPassportType()) {
          if (!getPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, passportType_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, passportType_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentPassportType_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentPassportType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getPassportTypeFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (passportTypeBuilder_ == null) {
            passportType_ = ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType.getDefaultInstance();
          } else {
            passportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentPassportType_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (passportTypeBuilder_ == null) {
            result.passportType_ = passportType_;
          } else {
            result.passportType_ = passportTypeBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType.getDefaultInstance()) return this;
          if (other.hasPassportType()) {
            mergePassportType(other.getPassportType());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasPassportType()) {
            if (!getPassportType().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;
        private ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType passportType_ = ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType, ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType.Builder, ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportTypeOrBuilder> passportTypeBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;</code>
         */
        public boolean hasPassportType() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType getPassportType() {
          if (passportTypeBuilder_ == null) {
            return passportType_;
          } else {
            return passportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;</code>
         */
        public Builder setPassportType(ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType value) {
          if (passportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            passportType_ = value;
            onChanged();
          } else {
            passportTypeBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;</code>
         */
        public Builder setPassportType(
            ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType.Builder builderForValue) {
          if (passportTypeBuilder_ == null) {
            passportType_ = builderForValue.build();
            onChanged();
          } else {
            passportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;</code>
         */
        public Builder mergePassportType(ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType value) {
          if (passportTypeBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                passportType_ != ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType.getDefaultInstance()) {
              passportType_ =
                ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType.newBuilder(passportType_).mergeFrom(value).buildPartial();
            } else {
              passportType_ = value;
            }
            onChanged();
          } else {
            passportTypeBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;</code>
         */
        public Builder clearPassportType() {
          if (passportTypeBuilder_ == null) {
            passportType_ = ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType.getDefaultInstance();
            onChanged();
          } else {
            passportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType.Builder getPassportTypeBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportTypeOrBuilder getPassportTypeOrBuilder() {
          if (passportTypeBuilder_ != null) {
            return passportTypeBuilder_.getMessageOrBuilder();
          } else {
            return passportType_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType, ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType.Builder, ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportTypeOrBuilder> 
            getPassportTypeFieldBuilder() {
          if (passportTypeBuilder_ == null) {
            passportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType, ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType.Builder, ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportTypeOrBuilder>(
                    passportType_,
                    getParentForChildren(),
                    isClean());
            passportType_ = null;
          }
          return passportTypeBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType)
      }

      static {
        defaultInstance = new AddEquipmentPassportType(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType)
    }

    public interface UpdEquipmentPassportTypeOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;
      /**
       * <code>optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;</code>
       */
      boolean hasPassportType();
      /**
       * <code>optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType getPassportType();
      /**
       * <code>optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportTypeOrBuilder getPassportTypeOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType}
     */
    public static final class UpdEquipmentPassportType extends
        com.google.protobuf.GeneratedMessage
        implements UpdEquipmentPassportTypeOrBuilder {
      // Use UpdEquipmentPassportType.newBuilder() to construct.
      private UpdEquipmentPassportType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private UpdEquipmentPassportType(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final UpdEquipmentPassportType defaultInstance;
      public static UpdEquipmentPassportType getDefaultInstance() {
        return defaultInstance;
      }

      public UpdEquipmentPassportType getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private UpdEquipmentPassportType(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = passportType_.toBuilder();
                }
                passportType_ = input.readMessage(ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(passportType_);
                  passportType_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentPassportType_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentPassportType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType.Builder.class);
      }

      public static com.google.protobuf.Parser<UpdEquipmentPassportType> PARSER =
          new com.google.protobuf.AbstractParser<UpdEquipmentPassportType>() {
        public UpdEquipmentPassportType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new UpdEquipmentPassportType(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<UpdEquipmentPassportType> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;
      public static final int PASSPORT_TYPE_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType passportType_;
      /**
       * <code>optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;</code>
       */
      public boolean hasPassportType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType getPassportType() {
        return passportType_;
      }
      /**
       * <code>optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportTypeOrBuilder getPassportTypeOrBuilder() {
        return passportType_;
      }

      private void initFields() {
        passportType_ = ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasPassportType()) {
          if (!getPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, passportType_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, passportType_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentPassportType_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentPassportType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getPassportTypeFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (passportTypeBuilder_ == null) {
            passportType_ = ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType.getDefaultInstance();
          } else {
            passportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentPassportType_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (passportTypeBuilder_ == null) {
            result.passportType_ = passportType_;
          } else {
            result.passportType_ = passportTypeBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType.getDefaultInstance()) return this;
          if (other.hasPassportType()) {
            mergePassportType(other.getPassportType());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasPassportType()) {
            if (!getPassportType().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;
        private ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType passportType_ = ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType, ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType.Builder, ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportTypeOrBuilder> passportTypeBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;</code>
         */
        public boolean hasPassportType() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType getPassportType() {
          if (passportTypeBuilder_ == null) {
            return passportType_;
          } else {
            return passportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;</code>
         */
        public Builder setPassportType(ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType value) {
          if (passportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            passportType_ = value;
            onChanged();
          } else {
            passportTypeBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;</code>
         */
        public Builder setPassportType(
            ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType.Builder builderForValue) {
          if (passportTypeBuilder_ == null) {
            passportType_ = builderForValue.build();
            onChanged();
          } else {
            passportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;</code>
         */
        public Builder mergePassportType(ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType value) {
          if (passportTypeBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                passportType_ != ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType.getDefaultInstance()) {
              passportType_ =
                ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType.newBuilder(passportType_).mergeFrom(value).buildPartial();
            } else {
              passportType_ = value;
            }
            onChanged();
          } else {
            passportTypeBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;</code>
         */
        public Builder clearPassportType() {
          if (passportTypeBuilder_ == null) {
            passportType_ = ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType.getDefaultInstance();
            onChanged();
          } else {
            passportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType.Builder getPassportTypeBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportTypeOrBuilder getPassportTypeOrBuilder() {
          if (passportTypeBuilder_ != null) {
            return passportTypeBuilder_.getMessageOrBuilder();
          } else {
            return passportType_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentPassportType passport_type = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType, ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType.Builder, ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportTypeOrBuilder> 
            getPassportTypeFieldBuilder() {
          if (passportTypeBuilder_ == null) {
            passportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType, ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportType.Builder, ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.EquipmentPassportTypeOrBuilder>(
                    passportType_,
                    getParentForChildren(),
                    isClean());
            passportType_ = null;
          }
          return passportTypeBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType)
      }

      static {
        defaultInstance = new UpdEquipmentPassportType(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType)
    }

    public interface DelEquipmentPassportTypeOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional string passport_type_id = 1;
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      boolean hasPassportTypeId();
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      java.lang.String getPassportTypeId();
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      com.google.protobuf.ByteString
          getPassportTypeIdBytes();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType}
     */
    public static final class DelEquipmentPassportType extends
        com.google.protobuf.GeneratedMessage
        implements DelEquipmentPassportTypeOrBuilder {
      // Use DelEquipmentPassportType.newBuilder() to construct.
      private DelEquipmentPassportType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private DelEquipmentPassportType(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final DelEquipmentPassportType defaultInstance;
      public static DelEquipmentPassportType getDefaultInstance() {
        return defaultInstance;
      }

      public DelEquipmentPassportType getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private DelEquipmentPassportType(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                bitField0_ |= 0x00000001;
                passportTypeId_ = input.readBytes();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentPassportType_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentPassportType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType.Builder.class);
      }

      public static com.google.protobuf.Parser<DelEquipmentPassportType> PARSER =
          new com.google.protobuf.AbstractParser<DelEquipmentPassportType>() {
        public DelEquipmentPassportType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new DelEquipmentPassportType(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<DelEquipmentPassportType> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional string passport_type_id = 1;
      public static final int PASSPORT_TYPE_ID_FIELD_NUMBER = 1;
      private java.lang.Object passportTypeId_;
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      public boolean hasPassportTypeId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      public java.lang.String getPassportTypeId() {
        java.lang.Object ref = passportTypeId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            passportTypeId_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getPassportTypeIdBytes() {
        java.lang.Object ref = passportTypeId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          passportTypeId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private void initFields() {
        passportTypeId_ = "";
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeBytes(1, getPassportTypeIdBytes());
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(1, getPassportTypeIdBytes());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentPassportType_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentPassportType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          passportTypeId_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentPassportType_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.passportTypeId_ = passportTypeId_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType.getDefaultInstance()) return this;
          if (other.hasPassportTypeId()) {
            bitField0_ |= 0x00000001;
            passportTypeId_ = other.passportTypeId_;
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional string passport_type_id = 1;
        private java.lang.Object passportTypeId_ = "";
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public boolean hasPassportTypeId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public java.lang.String getPassportTypeId() {
          java.lang.Object ref = passportTypeId_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            passportTypeId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public com.google.protobuf.ByteString
            getPassportTypeIdBytes() {
          java.lang.Object ref = passportTypeId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            passportTypeId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public Builder setPassportTypeId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          passportTypeId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public Builder clearPassportTypeId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          passportTypeId_ = getDefaultInstance().getPassportTypeId();
          onChanged();
          return this;
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public Builder setPassportTypeIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          passportTypeId_ = value;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType)
      }

      static {
        defaultInstance = new DelEquipmentPassportType(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType)
    }

    public interface AddManagedElementPassportTypeOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;
      /**
       * <code>optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;</code>
       */
      boolean hasPassportType();
      /**
       * <code>optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType getPassportType();
      /**
       * <code>optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportTypeOrBuilder getPassportTypeOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType}
     */
    public static final class AddManagedElementPassportType extends
        com.google.protobuf.GeneratedMessage
        implements AddManagedElementPassportTypeOrBuilder {
      // Use AddManagedElementPassportType.newBuilder() to construct.
      private AddManagedElementPassportType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private AddManagedElementPassportType(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final AddManagedElementPassportType defaultInstance;
      public static AddManagedElementPassportType getDefaultInstance() {
        return defaultInstance;
      }

      public AddManagedElementPassportType getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private AddManagedElementPassportType(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = passportType_.toBuilder();
                }
                passportType_ = input.readMessage(ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(passportType_);
                  passportType_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddManagedElementPassportType_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddManagedElementPassportType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType.Builder.class);
      }

      public static com.google.protobuf.Parser<AddManagedElementPassportType> PARSER =
          new com.google.protobuf.AbstractParser<AddManagedElementPassportType>() {
        public AddManagedElementPassportType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new AddManagedElementPassportType(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<AddManagedElementPassportType> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;
      public static final int PASSPORT_TYPE_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType passportType_;
      /**
       * <code>optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;</code>
       */
      public boolean hasPassportType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType getPassportType() {
        return passportType_;
      }
      /**
       * <code>optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportTypeOrBuilder getPassportTypeOrBuilder() {
        return passportType_;
      }

      private void initFields() {
        passportType_ = ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasPassportType()) {
          if (!getPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, passportType_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, passportType_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddManagedElementPassportType_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddManagedElementPassportType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getPassportTypeFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (passportTypeBuilder_ == null) {
            passportType_ = ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType.getDefaultInstance();
          } else {
            passportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddManagedElementPassportType_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (passportTypeBuilder_ == null) {
            result.passportType_ = passportType_;
          } else {
            result.passportType_ = passportTypeBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType.getDefaultInstance()) return this;
          if (other.hasPassportType()) {
            mergePassportType(other.getPassportType());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasPassportType()) {
            if (!getPassportType().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;
        private ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType passportType_ = ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType, ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType.Builder, ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportTypeOrBuilder> passportTypeBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;</code>
         */
        public boolean hasPassportType() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType getPassportType() {
          if (passportTypeBuilder_ == null) {
            return passportType_;
          } else {
            return passportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;</code>
         */
        public Builder setPassportType(ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType value) {
          if (passportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            passportType_ = value;
            onChanged();
          } else {
            passportTypeBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;</code>
         */
        public Builder setPassportType(
            ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType.Builder builderForValue) {
          if (passportTypeBuilder_ == null) {
            passportType_ = builderForValue.build();
            onChanged();
          } else {
            passportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;</code>
         */
        public Builder mergePassportType(ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType value) {
          if (passportTypeBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                passportType_ != ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType.getDefaultInstance()) {
              passportType_ =
                ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType.newBuilder(passportType_).mergeFrom(value).buildPartial();
            } else {
              passportType_ = value;
            }
            onChanged();
          } else {
            passportTypeBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;</code>
         */
        public Builder clearPassportType() {
          if (passportTypeBuilder_ == null) {
            passportType_ = ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType.getDefaultInstance();
            onChanged();
          } else {
            passportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType.Builder getPassportTypeBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportTypeOrBuilder getPassportTypeOrBuilder() {
          if (passportTypeBuilder_ != null) {
            return passportTypeBuilder_.getMessageOrBuilder();
          } else {
            return passportType_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType, ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType.Builder, ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportTypeOrBuilder> 
            getPassportTypeFieldBuilder() {
          if (passportTypeBuilder_ == null) {
            passportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType, ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType.Builder, ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportTypeOrBuilder>(
                    passportType_,
                    getParentForChildren(),
                    isClean());
            passportType_ = null;
          }
          return passportTypeBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType)
      }

      static {
        defaultInstance = new AddManagedElementPassportType(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType)
    }

    public interface UpdManagedElementPassportTypeOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;
      /**
       * <code>optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;</code>
       */
      boolean hasPassportType();
      /**
       * <code>optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType getPassportType();
      /**
       * <code>optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportTypeOrBuilder getPassportTypeOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType}
     */
    public static final class UpdManagedElementPassportType extends
        com.google.protobuf.GeneratedMessage
        implements UpdManagedElementPassportTypeOrBuilder {
      // Use UpdManagedElementPassportType.newBuilder() to construct.
      private UpdManagedElementPassportType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private UpdManagedElementPassportType(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final UpdManagedElementPassportType defaultInstance;
      public static UpdManagedElementPassportType getDefaultInstance() {
        return defaultInstance;
      }

      public UpdManagedElementPassportType getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private UpdManagedElementPassportType(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = passportType_.toBuilder();
                }
                passportType_ = input.readMessage(ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(passportType_);
                  passportType_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdManagedElementPassportType_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdManagedElementPassportType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType.Builder.class);
      }

      public static com.google.protobuf.Parser<UpdManagedElementPassportType> PARSER =
          new com.google.protobuf.AbstractParser<UpdManagedElementPassportType>() {
        public UpdManagedElementPassportType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new UpdManagedElementPassportType(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<UpdManagedElementPassportType> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;
      public static final int PASSPORT_TYPE_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType passportType_;
      /**
       * <code>optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;</code>
       */
      public boolean hasPassportType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType getPassportType() {
        return passportType_;
      }
      /**
       * <code>optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportTypeOrBuilder getPassportTypeOrBuilder() {
        return passportType_;
      }

      private void initFields() {
        passportType_ = ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasPassportType()) {
          if (!getPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, passportType_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, passportType_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdManagedElementPassportType_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdManagedElementPassportType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getPassportTypeFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (passportTypeBuilder_ == null) {
            passportType_ = ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType.getDefaultInstance();
          } else {
            passportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdManagedElementPassportType_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (passportTypeBuilder_ == null) {
            result.passportType_ = passportType_;
          } else {
            result.passportType_ = passportTypeBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType.getDefaultInstance()) return this;
          if (other.hasPassportType()) {
            mergePassportType(other.getPassportType());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasPassportType()) {
            if (!getPassportType().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;
        private ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType passportType_ = ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType, ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType.Builder, ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportTypeOrBuilder> passportTypeBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;</code>
         */
        public boolean hasPassportType() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType getPassportType() {
          if (passportTypeBuilder_ == null) {
            return passportType_;
          } else {
            return passportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;</code>
         */
        public Builder setPassportType(ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType value) {
          if (passportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            passportType_ = value;
            onChanged();
          } else {
            passportTypeBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;</code>
         */
        public Builder setPassportType(
            ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType.Builder builderForValue) {
          if (passportTypeBuilder_ == null) {
            passportType_ = builderForValue.build();
            onChanged();
          } else {
            passportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;</code>
         */
        public Builder mergePassportType(ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType value) {
          if (passportTypeBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                passportType_ != ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType.getDefaultInstance()) {
              passportType_ =
                ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType.newBuilder(passportType_).mergeFrom(value).buildPartial();
            } else {
              passportType_ = value;
            }
            onChanged();
          } else {
            passportTypeBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;</code>
         */
        public Builder clearPassportType() {
          if (passportTypeBuilder_ == null) {
            passportType_ = ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType.getDefaultInstance();
            onChanged();
          } else {
            passportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType.Builder getPassportTypeBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportTypeOrBuilder getPassportTypeOrBuilder() {
          if (passportTypeBuilder_ != null) {
            return passportTypeBuilder_.getMessageOrBuilder();
          } else {
            return passportType_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ManagedElementPassportType passport_type = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType, ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType.Builder, ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportTypeOrBuilder> 
            getPassportTypeFieldBuilder() {
          if (passportTypeBuilder_ == null) {
            passportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType, ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportType.Builder, ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.ManagedElementPassportTypeOrBuilder>(
                    passportType_,
                    getParentForChildren(),
                    isClean());
            passportType_ = null;
          }
          return passportTypeBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType)
      }

      static {
        defaultInstance = new UpdManagedElementPassportType(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType)
    }

    public interface DelManagedElementPassportTypeOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional string passport_type_id = 1;
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      boolean hasPassportTypeId();
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      java.lang.String getPassportTypeId();
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      com.google.protobuf.ByteString
          getPassportTypeIdBytes();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType}
     */
    public static final class DelManagedElementPassportType extends
        com.google.protobuf.GeneratedMessage
        implements DelManagedElementPassportTypeOrBuilder {
      // Use DelManagedElementPassportType.newBuilder() to construct.
      private DelManagedElementPassportType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private DelManagedElementPassportType(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final DelManagedElementPassportType defaultInstance;
      public static DelManagedElementPassportType getDefaultInstance() {
        return defaultInstance;
      }

      public DelManagedElementPassportType getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private DelManagedElementPassportType(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                bitField0_ |= 0x00000001;
                passportTypeId_ = input.readBytes();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelManagedElementPassportType_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelManagedElementPassportType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType.Builder.class);
      }

      public static com.google.protobuf.Parser<DelManagedElementPassportType> PARSER =
          new com.google.protobuf.AbstractParser<DelManagedElementPassportType>() {
        public DelManagedElementPassportType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new DelManagedElementPassportType(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<DelManagedElementPassportType> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional string passport_type_id = 1;
      public static final int PASSPORT_TYPE_ID_FIELD_NUMBER = 1;
      private java.lang.Object passportTypeId_;
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      public boolean hasPassportTypeId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      public java.lang.String getPassportTypeId() {
        java.lang.Object ref = passportTypeId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            passportTypeId_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getPassportTypeIdBytes() {
        java.lang.Object ref = passportTypeId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          passportTypeId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private void initFields() {
        passportTypeId_ = "";
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeBytes(1, getPassportTypeIdBytes());
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(1, getPassportTypeIdBytes());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelManagedElementPassportType_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelManagedElementPassportType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          passportTypeId_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelManagedElementPassportType_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.passportTypeId_ = passportTypeId_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType.getDefaultInstance()) return this;
          if (other.hasPassportTypeId()) {
            bitField0_ |= 0x00000001;
            passportTypeId_ = other.passportTypeId_;
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional string passport_type_id = 1;
        private java.lang.Object passportTypeId_ = "";
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public boolean hasPassportTypeId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public java.lang.String getPassportTypeId() {
          java.lang.Object ref = passportTypeId_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            passportTypeId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public com.google.protobuf.ByteString
            getPassportTypeIdBytes() {
          java.lang.Object ref = passportTypeId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            passportTypeId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public Builder setPassportTypeId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          passportTypeId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public Builder clearPassportTypeId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          passportTypeId_ = getDefaultInstance().getPassportTypeId();
          onChanged();
          return this;
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public Builder setPassportTypeIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          passportTypeId_ = value;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType)
      }

      static {
        defaultInstance = new DelManagedElementPassportType(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType)
    }

    public interface AddSensorControlElementPassportTypeOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.SensorPassportType passport_type = 1;
      /**
       * <code>optional .almaz2.domain_objects.SensorPassportType passport_type = 1;</code>
       */
      boolean hasPassportType();
      /**
       * <code>optional .almaz2.domain_objects.SensorPassportType passport_type = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType getPassportType();
      /**
       * <code>optional .almaz2.domain_objects.SensorPassportType passport_type = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportTypeOrBuilder getPassportTypeOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType}
     */
    public static final class AddSensorControlElementPassportType extends
        com.google.protobuf.GeneratedMessage
        implements AddSensorControlElementPassportTypeOrBuilder {
      // Use AddSensorControlElementPassportType.newBuilder() to construct.
      private AddSensorControlElementPassportType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private AddSensorControlElementPassportType(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final AddSensorControlElementPassportType defaultInstance;
      public static AddSensorControlElementPassportType getDefaultInstance() {
        return defaultInstance;
      }

      public AddSensorControlElementPassportType getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private AddSensorControlElementPassportType(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = passportType_.toBuilder();
                }
                passportType_ = input.readMessage(ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(passportType_);
                  passportType_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddSensorControlElementPassportType_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddSensorControlElementPassportType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType.Builder.class);
      }

      public static com.google.protobuf.Parser<AddSensorControlElementPassportType> PARSER =
          new com.google.protobuf.AbstractParser<AddSensorControlElementPassportType>() {
        public AddSensorControlElementPassportType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new AddSensorControlElementPassportType(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<AddSensorControlElementPassportType> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.SensorPassportType passport_type = 1;
      public static final int PASSPORT_TYPE_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType passportType_;
      /**
       * <code>optional .almaz2.domain_objects.SensorPassportType passport_type = 1;</code>
       */
      public boolean hasPassportType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.SensorPassportType passport_type = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType getPassportType() {
        return passportType_;
      }
      /**
       * <code>optional .almaz2.domain_objects.SensorPassportType passport_type = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportTypeOrBuilder getPassportTypeOrBuilder() {
        return passportType_;
      }

      private void initFields() {
        passportType_ = ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasPassportType()) {
          if (!getPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, passportType_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, passportType_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddSensorControlElementPassportType_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddSensorControlElementPassportType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getPassportTypeFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (passportTypeBuilder_ == null) {
            passportType_ = ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType.getDefaultInstance();
          } else {
            passportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddSensorControlElementPassportType_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (passportTypeBuilder_ == null) {
            result.passportType_ = passportType_;
          } else {
            result.passportType_ = passportTypeBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType.getDefaultInstance()) return this;
          if (other.hasPassportType()) {
            mergePassportType(other.getPassportType());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasPassportType()) {
            if (!getPassportType().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.SensorPassportType passport_type = 1;
        private ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType passportType_ = ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType, ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType.Builder, ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportTypeOrBuilder> passportTypeBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.SensorPassportType passport_type = 1;</code>
         */
        public boolean hasPassportType() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.SensorPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType getPassportType() {
          if (passportTypeBuilder_ == null) {
            return passportType_;
          } else {
            return passportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.SensorPassportType passport_type = 1;</code>
         */
        public Builder setPassportType(ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType value) {
          if (passportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            passportType_ = value;
            onChanged();
          } else {
            passportTypeBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.SensorPassportType passport_type = 1;</code>
         */
        public Builder setPassportType(
            ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType.Builder builderForValue) {
          if (passportTypeBuilder_ == null) {
            passportType_ = builderForValue.build();
            onChanged();
          } else {
            passportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.SensorPassportType passport_type = 1;</code>
         */
        public Builder mergePassportType(ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType value) {
          if (passportTypeBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                passportType_ != ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType.getDefaultInstance()) {
              passportType_ =
                ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType.newBuilder(passportType_).mergeFrom(value).buildPartial();
            } else {
              passportType_ = value;
            }
            onChanged();
          } else {
            passportTypeBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.SensorPassportType passport_type = 1;</code>
         */
        public Builder clearPassportType() {
          if (passportTypeBuilder_ == null) {
            passportType_ = ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType.getDefaultInstance();
            onChanged();
          } else {
            passportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.SensorPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType.Builder getPassportTypeBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.SensorPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportTypeOrBuilder getPassportTypeOrBuilder() {
          if (passportTypeBuilder_ != null) {
            return passportTypeBuilder_.getMessageOrBuilder();
          } else {
            return passportType_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.SensorPassportType passport_type = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType, ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType.Builder, ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportTypeOrBuilder> 
            getPassportTypeFieldBuilder() {
          if (passportTypeBuilder_ == null) {
            passportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType, ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType.Builder, ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportTypeOrBuilder>(
                    passportType_,
                    getParentForChildren(),
                    isClean());
            passportType_ = null;
          }
          return passportTypeBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType)
      }

      static {
        defaultInstance = new AddSensorControlElementPassportType(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType)
    }

    public interface UpdSensorControlElementPassportTypeOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.SensorPassportType passport_type = 1;
      /**
       * <code>optional .almaz2.domain_objects.SensorPassportType passport_type = 1;</code>
       */
      boolean hasPassportType();
      /**
       * <code>optional .almaz2.domain_objects.SensorPassportType passport_type = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType getPassportType();
      /**
       * <code>optional .almaz2.domain_objects.SensorPassportType passport_type = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportTypeOrBuilder getPassportTypeOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType}
     */
    public static final class UpdSensorControlElementPassportType extends
        com.google.protobuf.GeneratedMessage
        implements UpdSensorControlElementPassportTypeOrBuilder {
      // Use UpdSensorControlElementPassportType.newBuilder() to construct.
      private UpdSensorControlElementPassportType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private UpdSensorControlElementPassportType(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final UpdSensorControlElementPassportType defaultInstance;
      public static UpdSensorControlElementPassportType getDefaultInstance() {
        return defaultInstance;
      }

      public UpdSensorControlElementPassportType getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private UpdSensorControlElementPassportType(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = passportType_.toBuilder();
                }
                passportType_ = input.readMessage(ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(passportType_);
                  passportType_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdSensorControlElementPassportType_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdSensorControlElementPassportType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType.Builder.class);
      }

      public static com.google.protobuf.Parser<UpdSensorControlElementPassportType> PARSER =
          new com.google.protobuf.AbstractParser<UpdSensorControlElementPassportType>() {
        public UpdSensorControlElementPassportType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new UpdSensorControlElementPassportType(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<UpdSensorControlElementPassportType> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.SensorPassportType passport_type = 1;
      public static final int PASSPORT_TYPE_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType passportType_;
      /**
       * <code>optional .almaz2.domain_objects.SensorPassportType passport_type = 1;</code>
       */
      public boolean hasPassportType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.SensorPassportType passport_type = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType getPassportType() {
        return passportType_;
      }
      /**
       * <code>optional .almaz2.domain_objects.SensorPassportType passport_type = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportTypeOrBuilder getPassportTypeOrBuilder() {
        return passportType_;
      }

      private void initFields() {
        passportType_ = ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasPassportType()) {
          if (!getPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, passportType_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, passportType_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdSensorControlElementPassportType_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdSensorControlElementPassportType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getPassportTypeFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (passportTypeBuilder_ == null) {
            passportType_ = ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType.getDefaultInstance();
          } else {
            passportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdSensorControlElementPassportType_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (passportTypeBuilder_ == null) {
            result.passportType_ = passportType_;
          } else {
            result.passportType_ = passportTypeBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType.getDefaultInstance()) return this;
          if (other.hasPassportType()) {
            mergePassportType(other.getPassportType());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasPassportType()) {
            if (!getPassportType().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.SensorPassportType passport_type = 1;
        private ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType passportType_ = ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType, ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType.Builder, ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportTypeOrBuilder> passportTypeBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.SensorPassportType passport_type = 1;</code>
         */
        public boolean hasPassportType() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.SensorPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType getPassportType() {
          if (passportTypeBuilder_ == null) {
            return passportType_;
          } else {
            return passportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.SensorPassportType passport_type = 1;</code>
         */
        public Builder setPassportType(ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType value) {
          if (passportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            passportType_ = value;
            onChanged();
          } else {
            passportTypeBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.SensorPassportType passport_type = 1;</code>
         */
        public Builder setPassportType(
            ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType.Builder builderForValue) {
          if (passportTypeBuilder_ == null) {
            passportType_ = builderForValue.build();
            onChanged();
          } else {
            passportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.SensorPassportType passport_type = 1;</code>
         */
        public Builder mergePassportType(ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType value) {
          if (passportTypeBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                passportType_ != ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType.getDefaultInstance()) {
              passportType_ =
                ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType.newBuilder(passportType_).mergeFrom(value).buildPartial();
            } else {
              passportType_ = value;
            }
            onChanged();
          } else {
            passportTypeBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.SensorPassportType passport_type = 1;</code>
         */
        public Builder clearPassportType() {
          if (passportTypeBuilder_ == null) {
            passportType_ = ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType.getDefaultInstance();
            onChanged();
          } else {
            passportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.SensorPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType.Builder getPassportTypeBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.SensorPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportTypeOrBuilder getPassportTypeOrBuilder() {
          if (passportTypeBuilder_ != null) {
            return passportTypeBuilder_.getMessageOrBuilder();
          } else {
            return passportType_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.SensorPassportType passport_type = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType, ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType.Builder, ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportTypeOrBuilder> 
            getPassportTypeFieldBuilder() {
          if (passportTypeBuilder_ == null) {
            passportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType, ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportType.Builder, ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.SensorPassportTypeOrBuilder>(
                    passportType_,
                    getParentForChildren(),
                    isClean());
            passportType_ = null;
          }
          return passportTypeBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType)
      }

      static {
        defaultInstance = new UpdSensorControlElementPassportType(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType)
    }

    public interface DelSensorControlElementPassportTypeOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional string passport_type_id = 1;
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      boolean hasPassportTypeId();
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      java.lang.String getPassportTypeId();
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      com.google.protobuf.ByteString
          getPassportTypeIdBytes();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType}
     */
    public static final class DelSensorControlElementPassportType extends
        com.google.protobuf.GeneratedMessage
        implements DelSensorControlElementPassportTypeOrBuilder {
      // Use DelSensorControlElementPassportType.newBuilder() to construct.
      private DelSensorControlElementPassportType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private DelSensorControlElementPassportType(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final DelSensorControlElementPassportType defaultInstance;
      public static DelSensorControlElementPassportType getDefaultInstance() {
        return defaultInstance;
      }

      public DelSensorControlElementPassportType getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private DelSensorControlElementPassportType(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                bitField0_ |= 0x00000001;
                passportTypeId_ = input.readBytes();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelSensorControlElementPassportType_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelSensorControlElementPassportType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType.Builder.class);
      }

      public static com.google.protobuf.Parser<DelSensorControlElementPassportType> PARSER =
          new com.google.protobuf.AbstractParser<DelSensorControlElementPassportType>() {
        public DelSensorControlElementPassportType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new DelSensorControlElementPassportType(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<DelSensorControlElementPassportType> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional string passport_type_id = 1;
      public static final int PASSPORT_TYPE_ID_FIELD_NUMBER = 1;
      private java.lang.Object passportTypeId_;
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      public boolean hasPassportTypeId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      public java.lang.String getPassportTypeId() {
        java.lang.Object ref = passportTypeId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            passportTypeId_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getPassportTypeIdBytes() {
        java.lang.Object ref = passportTypeId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          passportTypeId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private void initFields() {
        passportTypeId_ = "";
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeBytes(1, getPassportTypeIdBytes());
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(1, getPassportTypeIdBytes());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelSensorControlElementPassportType_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelSensorControlElementPassportType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          passportTypeId_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelSensorControlElementPassportType_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.passportTypeId_ = passportTypeId_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType.getDefaultInstance()) return this;
          if (other.hasPassportTypeId()) {
            bitField0_ |= 0x00000001;
            passportTypeId_ = other.passportTypeId_;
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional string passport_type_id = 1;
        private java.lang.Object passportTypeId_ = "";
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public boolean hasPassportTypeId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public java.lang.String getPassportTypeId() {
          java.lang.Object ref = passportTypeId_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            passportTypeId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public com.google.protobuf.ByteString
            getPassportTypeIdBytes() {
          java.lang.Object ref = passportTypeId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            passportTypeId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public Builder setPassportTypeId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          passportTypeId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public Builder clearPassportTypeId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          passportTypeId_ = getDefaultInstance().getPassportTypeId();
          onChanged();
          return this;
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public Builder setPassportTypeIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          passportTypeId_ = value;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType)
      }

      static {
        defaultInstance = new DelSensorControlElementPassportType(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType)
    }

    public interface AddInterfacePassportTypeOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;
      /**
       * <code>optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;</code>
       */
      boolean hasPassportType();
      /**
       * <code>optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType getPassportType();
      /**
       * <code>optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportTypeOrBuilder getPassportTypeOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddInterfacePassportType}
     */
    public static final class AddInterfacePassportType extends
        com.google.protobuf.GeneratedMessage
        implements AddInterfacePassportTypeOrBuilder {
      // Use AddInterfacePassportType.newBuilder() to construct.
      private AddInterfacePassportType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private AddInterfacePassportType(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final AddInterfacePassportType defaultInstance;
      public static AddInterfacePassportType getDefaultInstance() {
        return defaultInstance;
      }

      public AddInterfacePassportType getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private AddInterfacePassportType(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = passportType_.toBuilder();
                }
                passportType_ = input.readMessage(ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(passportType_);
                  passportType_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddInterfacePassportType_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddInterfacePassportType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType.Builder.class);
      }

      public static com.google.protobuf.Parser<AddInterfacePassportType> PARSER =
          new com.google.protobuf.AbstractParser<AddInterfacePassportType>() {
        public AddInterfacePassportType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new AddInterfacePassportType(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<AddInterfacePassportType> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;
      public static final int PASSPORT_TYPE_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType passportType_;
      /**
       * <code>optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;</code>
       */
      public boolean hasPassportType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType getPassportType() {
        return passportType_;
      }
      /**
       * <code>optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportTypeOrBuilder getPassportTypeOrBuilder() {
        return passportType_;
      }

      private void initFields() {
        passportType_ = ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasPassportType()) {
          if (!getPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, passportType_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, passportType_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddInterfacePassportType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddInterfacePassportType_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddInterfacePassportType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getPassportTypeFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (passportTypeBuilder_ == null) {
            passportType_ = ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType.getDefaultInstance();
          } else {
            passportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddInterfacePassportType_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (passportTypeBuilder_ == null) {
            result.passportType_ = passportType_;
          } else {
            result.passportType_ = passportTypeBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType.getDefaultInstance()) return this;
          if (other.hasPassportType()) {
            mergePassportType(other.getPassportType());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasPassportType()) {
            if (!getPassportType().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;
        private ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType passportType_ = ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType, ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType.Builder, ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportTypeOrBuilder> passportTypeBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;</code>
         */
        public boolean hasPassportType() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType getPassportType() {
          if (passportTypeBuilder_ == null) {
            return passportType_;
          } else {
            return passportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;</code>
         */
        public Builder setPassportType(ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType value) {
          if (passportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            passportType_ = value;
            onChanged();
          } else {
            passportTypeBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;</code>
         */
        public Builder setPassportType(
            ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType.Builder builderForValue) {
          if (passportTypeBuilder_ == null) {
            passportType_ = builderForValue.build();
            onChanged();
          } else {
            passportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;</code>
         */
        public Builder mergePassportType(ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType value) {
          if (passportTypeBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                passportType_ != ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType.getDefaultInstance()) {
              passportType_ =
                ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType.newBuilder(passportType_).mergeFrom(value).buildPartial();
            } else {
              passportType_ = value;
            }
            onChanged();
          } else {
            passportTypeBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;</code>
         */
        public Builder clearPassportType() {
          if (passportTypeBuilder_ == null) {
            passportType_ = ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType.getDefaultInstance();
            onChanged();
          } else {
            passportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType.Builder getPassportTypeBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportTypeOrBuilder getPassportTypeOrBuilder() {
          if (passportTypeBuilder_ != null) {
            return passportTypeBuilder_.getMessageOrBuilder();
          } else {
            return passportType_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType, ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType.Builder, ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportTypeOrBuilder> 
            getPassportTypeFieldBuilder() {
          if (passportTypeBuilder_ == null) {
            passportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType, ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType.Builder, ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportTypeOrBuilder>(
                    passportType_,
                    getParentForChildren(),
                    isClean());
            passportType_ = null;
          }
          return passportTypeBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.AddInterfacePassportType)
      }

      static {
        defaultInstance = new AddInterfacePassportType(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.AddInterfacePassportType)
    }

    public interface UpdInterfacePassportTypeOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;
      /**
       * <code>optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;</code>
       */
      boolean hasPassportType();
      /**
       * <code>optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType getPassportType();
      /**
       * <code>optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportTypeOrBuilder getPassportTypeOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdInterfacePassportType}
     */
    public static final class UpdInterfacePassportType extends
        com.google.protobuf.GeneratedMessage
        implements UpdInterfacePassportTypeOrBuilder {
      // Use UpdInterfacePassportType.newBuilder() to construct.
      private UpdInterfacePassportType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private UpdInterfacePassportType(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final UpdInterfacePassportType defaultInstance;
      public static UpdInterfacePassportType getDefaultInstance() {
        return defaultInstance;
      }

      public UpdInterfacePassportType getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private UpdInterfacePassportType(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = passportType_.toBuilder();
                }
                passportType_ = input.readMessage(ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(passportType_);
                  passportType_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdInterfacePassportType_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdInterfacePassportType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType.Builder.class);
      }

      public static com.google.protobuf.Parser<UpdInterfacePassportType> PARSER =
          new com.google.protobuf.AbstractParser<UpdInterfacePassportType>() {
        public UpdInterfacePassportType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new UpdInterfacePassportType(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<UpdInterfacePassportType> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;
      public static final int PASSPORT_TYPE_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType passportType_;
      /**
       * <code>optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;</code>
       */
      public boolean hasPassportType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType getPassportType() {
        return passportType_;
      }
      /**
       * <code>optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportTypeOrBuilder getPassportTypeOrBuilder() {
        return passportType_;
      }

      private void initFields() {
        passportType_ = ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasPassportType()) {
          if (!getPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, passportType_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, passportType_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdInterfacePassportType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdInterfacePassportType_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdInterfacePassportType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getPassportTypeFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (passportTypeBuilder_ == null) {
            passportType_ = ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType.getDefaultInstance();
          } else {
            passportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdInterfacePassportType_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (passportTypeBuilder_ == null) {
            result.passportType_ = passportType_;
          } else {
            result.passportType_ = passportTypeBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType.getDefaultInstance()) return this;
          if (other.hasPassportType()) {
            mergePassportType(other.getPassportType());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasPassportType()) {
            if (!getPassportType().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;
        private ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType passportType_ = ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType, ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType.Builder, ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportTypeOrBuilder> passportTypeBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;</code>
         */
        public boolean hasPassportType() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType getPassportType() {
          if (passportTypeBuilder_ == null) {
            return passportType_;
          } else {
            return passportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;</code>
         */
        public Builder setPassportType(ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType value) {
          if (passportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            passportType_ = value;
            onChanged();
          } else {
            passportTypeBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;</code>
         */
        public Builder setPassportType(
            ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType.Builder builderForValue) {
          if (passportTypeBuilder_ == null) {
            passportType_ = builderForValue.build();
            onChanged();
          } else {
            passportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;</code>
         */
        public Builder mergePassportType(ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType value) {
          if (passportTypeBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                passportType_ != ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType.getDefaultInstance()) {
              passportType_ =
                ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType.newBuilder(passportType_).mergeFrom(value).buildPartial();
            } else {
              passportType_ = value;
            }
            onChanged();
          } else {
            passportTypeBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;</code>
         */
        public Builder clearPassportType() {
          if (passportTypeBuilder_ == null) {
            passportType_ = ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType.getDefaultInstance();
            onChanged();
          } else {
            passportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType.Builder getPassportTypeBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportTypeOrBuilder getPassportTypeOrBuilder() {
          if (passportTypeBuilder_ != null) {
            return passportTypeBuilder_.getMessageOrBuilder();
          } else {
            return passportType_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.InterfacePassportType passport_type = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType, ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType.Builder, ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportTypeOrBuilder> 
            getPassportTypeFieldBuilder() {
          if (passportTypeBuilder_ == null) {
            passportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType, ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportType.Builder, ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.InterfacePassportTypeOrBuilder>(
                    passportType_,
                    getParentForChildren(),
                    isClean());
            passportType_ = null;
          }
          return passportTypeBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.UpdInterfacePassportType)
      }

      static {
        defaultInstance = new UpdInterfacePassportType(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.UpdInterfacePassportType)
    }

    public interface DelInterfacePassportTypeOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional string passport_type_id = 1;
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      boolean hasPassportTypeId();
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      java.lang.String getPassportTypeId();
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      com.google.protobuf.ByteString
          getPassportTypeIdBytes();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.DelInterfacePassportType}
     */
    public static final class DelInterfacePassportType extends
        com.google.protobuf.GeneratedMessage
        implements DelInterfacePassportTypeOrBuilder {
      // Use DelInterfacePassportType.newBuilder() to construct.
      private DelInterfacePassportType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private DelInterfacePassportType(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final DelInterfacePassportType defaultInstance;
      public static DelInterfacePassportType getDefaultInstance() {
        return defaultInstance;
      }

      public DelInterfacePassportType getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private DelInterfacePassportType(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                bitField0_ |= 0x00000001;
                passportTypeId_ = input.readBytes();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelInterfacePassportType_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelInterfacePassportType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType.Builder.class);
      }

      public static com.google.protobuf.Parser<DelInterfacePassportType> PARSER =
          new com.google.protobuf.AbstractParser<DelInterfacePassportType>() {
        public DelInterfacePassportType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new DelInterfacePassportType(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<DelInterfacePassportType> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional string passport_type_id = 1;
      public static final int PASSPORT_TYPE_ID_FIELD_NUMBER = 1;
      private java.lang.Object passportTypeId_;
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      public boolean hasPassportTypeId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      public java.lang.String getPassportTypeId() {
        java.lang.Object ref = passportTypeId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            passportTypeId_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getPassportTypeIdBytes() {
        java.lang.Object ref = passportTypeId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          passportTypeId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private void initFields() {
        passportTypeId_ = "";
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeBytes(1, getPassportTypeIdBytes());
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(1, getPassportTypeIdBytes());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.DelInterfacePassportType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelInterfacePassportType_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelInterfacePassportType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          passportTypeId_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelInterfacePassportType_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.passportTypeId_ = passportTypeId_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType.getDefaultInstance()) return this;
          if (other.hasPassportTypeId()) {
            bitField0_ |= 0x00000001;
            passportTypeId_ = other.passportTypeId_;
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional string passport_type_id = 1;
        private java.lang.Object passportTypeId_ = "";
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public boolean hasPassportTypeId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public java.lang.String getPassportTypeId() {
          java.lang.Object ref = passportTypeId_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            passportTypeId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public com.google.protobuf.ByteString
            getPassportTypeIdBytes() {
          java.lang.Object ref = passportTypeId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            passportTypeId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public Builder setPassportTypeId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          passportTypeId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public Builder clearPassportTypeId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          passportTypeId_ = getDefaultInstance().getPassportTypeId();
          onChanged();
          return this;
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public Builder setPassportTypeIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          passportTypeId_ = value;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.DelInterfacePassportType)
      }

      static {
        defaultInstance = new DelInterfacePassportType(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.DelInterfacePassportType)
    }

    public interface AddEquipmentLogicalInputPassportTypeOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;
      /**
       * <code>optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;</code>
       */
      boolean hasPassportType();
      /**
       * <code>optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType getPassportType();
      /**
       * <code>optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportTypeOrBuilder getPassportTypeOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType}
     */
    public static final class AddEquipmentLogicalInputPassportType extends
        com.google.protobuf.GeneratedMessage
        implements AddEquipmentLogicalInputPassportTypeOrBuilder {
      // Use AddEquipmentLogicalInputPassportType.newBuilder() to construct.
      private AddEquipmentLogicalInputPassportType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private AddEquipmentLogicalInputPassportType(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final AddEquipmentLogicalInputPassportType defaultInstance;
      public static AddEquipmentLogicalInputPassportType getDefaultInstance() {
        return defaultInstance;
      }

      public AddEquipmentLogicalInputPassportType getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private AddEquipmentLogicalInputPassportType(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = passportType_.toBuilder();
                }
                passportType_ = input.readMessage(ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(passportType_);
                  passportType_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentLogicalInputPassportType_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentLogicalInputPassportType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType.Builder.class);
      }

      public static com.google.protobuf.Parser<AddEquipmentLogicalInputPassportType> PARSER =
          new com.google.protobuf.AbstractParser<AddEquipmentLogicalInputPassportType>() {
        public AddEquipmentLogicalInputPassportType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new AddEquipmentLogicalInputPassportType(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<AddEquipmentLogicalInputPassportType> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;
      public static final int PASSPORT_TYPE_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType passportType_;
      /**
       * <code>optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;</code>
       */
      public boolean hasPassportType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType getPassportType() {
        return passportType_;
      }
      /**
       * <code>optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportTypeOrBuilder getPassportTypeOrBuilder() {
        return passportType_;
      }

      private void initFields() {
        passportType_ = ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasPassportType()) {
          if (!getPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, passportType_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, passportType_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentLogicalInputPassportType_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentLogicalInputPassportType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getPassportTypeFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (passportTypeBuilder_ == null) {
            passportType_ = ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType.getDefaultInstance();
          } else {
            passportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentLogicalInputPassportType_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (passportTypeBuilder_ == null) {
            result.passportType_ = passportType_;
          } else {
            result.passportType_ = passportTypeBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType.getDefaultInstance()) return this;
          if (other.hasPassportType()) {
            mergePassportType(other.getPassportType());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasPassportType()) {
            if (!getPassportType().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;
        private ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType passportType_ = ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType, ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType.Builder, ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportTypeOrBuilder> passportTypeBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;</code>
         */
        public boolean hasPassportType() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType getPassportType() {
          if (passportTypeBuilder_ == null) {
            return passportType_;
          } else {
            return passportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;</code>
         */
        public Builder setPassportType(ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType value) {
          if (passportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            passportType_ = value;
            onChanged();
          } else {
            passportTypeBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;</code>
         */
        public Builder setPassportType(
            ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType.Builder builderForValue) {
          if (passportTypeBuilder_ == null) {
            passportType_ = builderForValue.build();
            onChanged();
          } else {
            passportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;</code>
         */
        public Builder mergePassportType(ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType value) {
          if (passportTypeBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                passportType_ != ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType.getDefaultInstance()) {
              passportType_ =
                ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType.newBuilder(passportType_).mergeFrom(value).buildPartial();
            } else {
              passportType_ = value;
            }
            onChanged();
          } else {
            passportTypeBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;</code>
         */
        public Builder clearPassportType() {
          if (passportTypeBuilder_ == null) {
            passportType_ = ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType.getDefaultInstance();
            onChanged();
          } else {
            passportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType.Builder getPassportTypeBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportTypeOrBuilder getPassportTypeOrBuilder() {
          if (passportTypeBuilder_ != null) {
            return passportTypeBuilder_.getMessageOrBuilder();
          } else {
            return passportType_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType, ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType.Builder, ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportTypeOrBuilder> 
            getPassportTypeFieldBuilder() {
          if (passportTypeBuilder_ == null) {
            passportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType, ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType.Builder, ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportTypeOrBuilder>(
                    passportType_,
                    getParentForChildren(),
                    isClean());
            passportType_ = null;
          }
          return passportTypeBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType)
      }

      static {
        defaultInstance = new AddEquipmentLogicalInputPassportType(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType)
    }

    public interface UpdEquipmentLogicalInputPassportTypeOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;
      /**
       * <code>optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;</code>
       */
      boolean hasPassportType();
      /**
       * <code>optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType getPassportType();
      /**
       * <code>optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportTypeOrBuilder getPassportTypeOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType}
     */
    public static final class UpdEquipmentLogicalInputPassportType extends
        com.google.protobuf.GeneratedMessage
        implements UpdEquipmentLogicalInputPassportTypeOrBuilder {
      // Use UpdEquipmentLogicalInputPassportType.newBuilder() to construct.
      private UpdEquipmentLogicalInputPassportType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private UpdEquipmentLogicalInputPassportType(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final UpdEquipmentLogicalInputPassportType defaultInstance;
      public static UpdEquipmentLogicalInputPassportType getDefaultInstance() {
        return defaultInstance;
      }

      public UpdEquipmentLogicalInputPassportType getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private UpdEquipmentLogicalInputPassportType(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = passportType_.toBuilder();
                }
                passportType_ = input.readMessage(ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(passportType_);
                  passportType_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentLogicalInputPassportType_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentLogicalInputPassportType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType.Builder.class);
      }

      public static com.google.protobuf.Parser<UpdEquipmentLogicalInputPassportType> PARSER =
          new com.google.protobuf.AbstractParser<UpdEquipmentLogicalInputPassportType>() {
        public UpdEquipmentLogicalInputPassportType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new UpdEquipmentLogicalInputPassportType(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<UpdEquipmentLogicalInputPassportType> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;
      public static final int PASSPORT_TYPE_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType passportType_;
      /**
       * <code>optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;</code>
       */
      public boolean hasPassportType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType getPassportType() {
        return passportType_;
      }
      /**
       * <code>optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportTypeOrBuilder getPassportTypeOrBuilder() {
        return passportType_;
      }

      private void initFields() {
        passportType_ = ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasPassportType()) {
          if (!getPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, passportType_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, passportType_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentLogicalInputPassportType_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentLogicalInputPassportType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getPassportTypeFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (passportTypeBuilder_ == null) {
            passportType_ = ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType.getDefaultInstance();
          } else {
            passportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentLogicalInputPassportType_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (passportTypeBuilder_ == null) {
            result.passportType_ = passportType_;
          } else {
            result.passportType_ = passportTypeBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType.getDefaultInstance()) return this;
          if (other.hasPassportType()) {
            mergePassportType(other.getPassportType());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasPassportType()) {
            if (!getPassportType().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;
        private ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType passportType_ = ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType, ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType.Builder, ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportTypeOrBuilder> passportTypeBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;</code>
         */
        public boolean hasPassportType() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType getPassportType() {
          if (passportTypeBuilder_ == null) {
            return passportType_;
          } else {
            return passportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;</code>
         */
        public Builder setPassportType(ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType value) {
          if (passportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            passportType_ = value;
            onChanged();
          } else {
            passportTypeBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;</code>
         */
        public Builder setPassportType(
            ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType.Builder builderForValue) {
          if (passportTypeBuilder_ == null) {
            passportType_ = builderForValue.build();
            onChanged();
          } else {
            passportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;</code>
         */
        public Builder mergePassportType(ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType value) {
          if (passportTypeBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                passportType_ != ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType.getDefaultInstance()) {
              passportType_ =
                ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType.newBuilder(passportType_).mergeFrom(value).buildPartial();
            } else {
              passportType_ = value;
            }
            onChanged();
          } else {
            passportTypeBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;</code>
         */
        public Builder clearPassportType() {
          if (passportTypeBuilder_ == null) {
            passportType_ = ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType.getDefaultInstance();
            onChanged();
          } else {
            passportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType.Builder getPassportTypeBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportTypeOrBuilder getPassportTypeOrBuilder() {
          if (passportTypeBuilder_ != null) {
            return passportTypeBuilder_.getMessageOrBuilder();
          } else {
            return passportType_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalInputPassportType passport_type = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType, ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType.Builder, ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportTypeOrBuilder> 
            getPassportTypeFieldBuilder() {
          if (passportTypeBuilder_ == null) {
            passportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType, ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportType.Builder, ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.EquipmentLogicalInputPassportTypeOrBuilder>(
                    passportType_,
                    getParentForChildren(),
                    isClean());
            passportType_ = null;
          }
          return passportTypeBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType)
      }

      static {
        defaultInstance = new UpdEquipmentLogicalInputPassportType(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType)
    }

    public interface DelEquipmentLogicalInputPassportTypeOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional string passport_type_id = 1;
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      boolean hasPassportTypeId();
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      java.lang.String getPassportTypeId();
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      com.google.protobuf.ByteString
          getPassportTypeIdBytes();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType}
     */
    public static final class DelEquipmentLogicalInputPassportType extends
        com.google.protobuf.GeneratedMessage
        implements DelEquipmentLogicalInputPassportTypeOrBuilder {
      // Use DelEquipmentLogicalInputPassportType.newBuilder() to construct.
      private DelEquipmentLogicalInputPassportType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private DelEquipmentLogicalInputPassportType(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final DelEquipmentLogicalInputPassportType defaultInstance;
      public static DelEquipmentLogicalInputPassportType getDefaultInstance() {
        return defaultInstance;
      }

      public DelEquipmentLogicalInputPassportType getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private DelEquipmentLogicalInputPassportType(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                bitField0_ |= 0x00000001;
                passportTypeId_ = input.readBytes();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentLogicalInputPassportType_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentLogicalInputPassportType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType.Builder.class);
      }

      public static com.google.protobuf.Parser<DelEquipmentLogicalInputPassportType> PARSER =
          new com.google.protobuf.AbstractParser<DelEquipmentLogicalInputPassportType>() {
        public DelEquipmentLogicalInputPassportType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new DelEquipmentLogicalInputPassportType(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<DelEquipmentLogicalInputPassportType> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional string passport_type_id = 1;
      public static final int PASSPORT_TYPE_ID_FIELD_NUMBER = 1;
      private java.lang.Object passportTypeId_;
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      public boolean hasPassportTypeId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      public java.lang.String getPassportTypeId() {
        java.lang.Object ref = passportTypeId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            passportTypeId_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getPassportTypeIdBytes() {
        java.lang.Object ref = passportTypeId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          passportTypeId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private void initFields() {
        passportTypeId_ = "";
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeBytes(1, getPassportTypeIdBytes());
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(1, getPassportTypeIdBytes());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentLogicalInputPassportType_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentLogicalInputPassportType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          passportTypeId_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentLogicalInputPassportType_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.passportTypeId_ = passportTypeId_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType.getDefaultInstance()) return this;
          if (other.hasPassportTypeId()) {
            bitField0_ |= 0x00000001;
            passportTypeId_ = other.passportTypeId_;
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional string passport_type_id = 1;
        private java.lang.Object passportTypeId_ = "";
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public boolean hasPassportTypeId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public java.lang.String getPassportTypeId() {
          java.lang.Object ref = passportTypeId_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            passportTypeId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public com.google.protobuf.ByteString
            getPassportTypeIdBytes() {
          java.lang.Object ref = passportTypeId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            passportTypeId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public Builder setPassportTypeId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          passportTypeId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public Builder clearPassportTypeId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          passportTypeId_ = getDefaultInstance().getPassportTypeId();
          onChanged();
          return this;
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public Builder setPassportTypeIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          passportTypeId_ = value;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType)
      }

      static {
        defaultInstance = new DelEquipmentLogicalInputPassportType(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType)
    }

    public interface AddEquipmentLogicalOutputPassportTypeOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;
      /**
       * <code>optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;</code>
       */
      boolean hasPassportType();
      /**
       * <code>optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType getPassportType();
      /**
       * <code>optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportTypeOrBuilder getPassportTypeOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType}
     */
    public static final class AddEquipmentLogicalOutputPassportType extends
        com.google.protobuf.GeneratedMessage
        implements AddEquipmentLogicalOutputPassportTypeOrBuilder {
      // Use AddEquipmentLogicalOutputPassportType.newBuilder() to construct.
      private AddEquipmentLogicalOutputPassportType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private AddEquipmentLogicalOutputPassportType(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final AddEquipmentLogicalOutputPassportType defaultInstance;
      public static AddEquipmentLogicalOutputPassportType getDefaultInstance() {
        return defaultInstance;
      }

      public AddEquipmentLogicalOutputPassportType getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private AddEquipmentLogicalOutputPassportType(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = passportType_.toBuilder();
                }
                passportType_ = input.readMessage(ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(passportType_);
                  passportType_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentLogicalOutputPassportType_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentLogicalOutputPassportType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType.Builder.class);
      }

      public static com.google.protobuf.Parser<AddEquipmentLogicalOutputPassportType> PARSER =
          new com.google.protobuf.AbstractParser<AddEquipmentLogicalOutputPassportType>() {
        public AddEquipmentLogicalOutputPassportType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new AddEquipmentLogicalOutputPassportType(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<AddEquipmentLogicalOutputPassportType> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;
      public static final int PASSPORT_TYPE_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType passportType_;
      /**
       * <code>optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;</code>
       */
      public boolean hasPassportType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType getPassportType() {
        return passportType_;
      }
      /**
       * <code>optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportTypeOrBuilder getPassportTypeOrBuilder() {
        return passportType_;
      }

      private void initFields() {
        passportType_ = ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasPassportType()) {
          if (!getPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, passportType_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, passportType_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentLogicalOutputPassportType_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentLogicalOutputPassportType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getPassportTypeFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (passportTypeBuilder_ == null) {
            passportType_ = ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType.getDefaultInstance();
          } else {
            passportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentLogicalOutputPassportType_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (passportTypeBuilder_ == null) {
            result.passportType_ = passportType_;
          } else {
            result.passportType_ = passportTypeBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType.getDefaultInstance()) return this;
          if (other.hasPassportType()) {
            mergePassportType(other.getPassportType());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasPassportType()) {
            if (!getPassportType().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;
        private ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType passportType_ = ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType, ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType.Builder, ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportTypeOrBuilder> passportTypeBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;</code>
         */
        public boolean hasPassportType() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType getPassportType() {
          if (passportTypeBuilder_ == null) {
            return passportType_;
          } else {
            return passportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;</code>
         */
        public Builder setPassportType(ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType value) {
          if (passportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            passportType_ = value;
            onChanged();
          } else {
            passportTypeBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;</code>
         */
        public Builder setPassportType(
            ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType.Builder builderForValue) {
          if (passportTypeBuilder_ == null) {
            passportType_ = builderForValue.build();
            onChanged();
          } else {
            passportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;</code>
         */
        public Builder mergePassportType(ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType value) {
          if (passportTypeBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                passportType_ != ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType.getDefaultInstance()) {
              passportType_ =
                ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType.newBuilder(passportType_).mergeFrom(value).buildPartial();
            } else {
              passportType_ = value;
            }
            onChanged();
          } else {
            passportTypeBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;</code>
         */
        public Builder clearPassportType() {
          if (passportTypeBuilder_ == null) {
            passportType_ = ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType.getDefaultInstance();
            onChanged();
          } else {
            passportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType.Builder getPassportTypeBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportTypeOrBuilder getPassportTypeOrBuilder() {
          if (passportTypeBuilder_ != null) {
            return passportTypeBuilder_.getMessageOrBuilder();
          } else {
            return passportType_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType, ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType.Builder, ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportTypeOrBuilder> 
            getPassportTypeFieldBuilder() {
          if (passportTypeBuilder_ == null) {
            passportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType, ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType.Builder, ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportTypeOrBuilder>(
                    passportType_,
                    getParentForChildren(),
                    isClean());
            passportType_ = null;
          }
          return passportTypeBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType)
      }

      static {
        defaultInstance = new AddEquipmentLogicalOutputPassportType(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType)
    }

    public interface UpdEquipmentLogicalOutputPassportTypeOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;
      /**
       * <code>optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;</code>
       */
      boolean hasPassportType();
      /**
       * <code>optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType getPassportType();
      /**
       * <code>optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportTypeOrBuilder getPassportTypeOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType}
     */
    public static final class UpdEquipmentLogicalOutputPassportType extends
        com.google.protobuf.GeneratedMessage
        implements UpdEquipmentLogicalOutputPassportTypeOrBuilder {
      // Use UpdEquipmentLogicalOutputPassportType.newBuilder() to construct.
      private UpdEquipmentLogicalOutputPassportType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private UpdEquipmentLogicalOutputPassportType(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final UpdEquipmentLogicalOutputPassportType defaultInstance;
      public static UpdEquipmentLogicalOutputPassportType getDefaultInstance() {
        return defaultInstance;
      }

      public UpdEquipmentLogicalOutputPassportType getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private UpdEquipmentLogicalOutputPassportType(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = passportType_.toBuilder();
                }
                passportType_ = input.readMessage(ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(passportType_);
                  passportType_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentLogicalOutputPassportType_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentLogicalOutputPassportType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType.Builder.class);
      }

      public static com.google.protobuf.Parser<UpdEquipmentLogicalOutputPassportType> PARSER =
          new com.google.protobuf.AbstractParser<UpdEquipmentLogicalOutputPassportType>() {
        public UpdEquipmentLogicalOutputPassportType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new UpdEquipmentLogicalOutputPassportType(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<UpdEquipmentLogicalOutputPassportType> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;
      public static final int PASSPORT_TYPE_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType passportType_;
      /**
       * <code>optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;</code>
       */
      public boolean hasPassportType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType getPassportType() {
        return passportType_;
      }
      /**
       * <code>optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportTypeOrBuilder getPassportTypeOrBuilder() {
        return passportType_;
      }

      private void initFields() {
        passportType_ = ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasPassportType()) {
          if (!getPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, passportType_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, passportType_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentLogicalOutputPassportType_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentLogicalOutputPassportType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getPassportTypeFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (passportTypeBuilder_ == null) {
            passportType_ = ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType.getDefaultInstance();
          } else {
            passportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentLogicalOutputPassportType_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (passportTypeBuilder_ == null) {
            result.passportType_ = passportType_;
          } else {
            result.passportType_ = passportTypeBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType.getDefaultInstance()) return this;
          if (other.hasPassportType()) {
            mergePassportType(other.getPassportType());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasPassportType()) {
            if (!getPassportType().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;
        private ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType passportType_ = ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType, ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType.Builder, ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportTypeOrBuilder> passportTypeBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;</code>
         */
        public boolean hasPassportType() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType getPassportType() {
          if (passportTypeBuilder_ == null) {
            return passportType_;
          } else {
            return passportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;</code>
         */
        public Builder setPassportType(ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType value) {
          if (passportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            passportType_ = value;
            onChanged();
          } else {
            passportTypeBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;</code>
         */
        public Builder setPassportType(
            ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType.Builder builderForValue) {
          if (passportTypeBuilder_ == null) {
            passportType_ = builderForValue.build();
            onChanged();
          } else {
            passportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;</code>
         */
        public Builder mergePassportType(ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType value) {
          if (passportTypeBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                passportType_ != ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType.getDefaultInstance()) {
              passportType_ =
                ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType.newBuilder(passportType_).mergeFrom(value).buildPartial();
            } else {
              passportType_ = value;
            }
            onChanged();
          } else {
            passportTypeBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;</code>
         */
        public Builder clearPassportType() {
          if (passportTypeBuilder_ == null) {
            passportType_ = ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType.getDefaultInstance();
            onChanged();
          } else {
            passportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType.Builder getPassportTypeBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportTypeOrBuilder getPassportTypeOrBuilder() {
          if (passportTypeBuilder_ != null) {
            return passportTypeBuilder_.getMessageOrBuilder();
          } else {
            return passportType_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.EquipmentLogicalOutputPassportType passport_type = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType, ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType.Builder, ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportTypeOrBuilder> 
            getPassportTypeFieldBuilder() {
          if (passportTypeBuilder_ == null) {
            passportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType, ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportType.Builder, ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.EquipmentLogicalOutputPassportTypeOrBuilder>(
                    passportType_,
                    getParentForChildren(),
                    isClean());
            passportType_ = null;
          }
          return passportTypeBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType)
      }

      static {
        defaultInstance = new UpdEquipmentLogicalOutputPassportType(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType)
    }

    public interface DelEquipmentLogicalOutputPassportTypeOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional string passport_type_id = 1;
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      boolean hasPassportTypeId();
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      java.lang.String getPassportTypeId();
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      com.google.protobuf.ByteString
          getPassportTypeIdBytes();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType}
     */
    public static final class DelEquipmentLogicalOutputPassportType extends
        com.google.protobuf.GeneratedMessage
        implements DelEquipmentLogicalOutputPassportTypeOrBuilder {
      // Use DelEquipmentLogicalOutputPassportType.newBuilder() to construct.
      private DelEquipmentLogicalOutputPassportType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private DelEquipmentLogicalOutputPassportType(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final DelEquipmentLogicalOutputPassportType defaultInstance;
      public static DelEquipmentLogicalOutputPassportType getDefaultInstance() {
        return defaultInstance;
      }

      public DelEquipmentLogicalOutputPassportType getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private DelEquipmentLogicalOutputPassportType(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                bitField0_ |= 0x00000001;
                passportTypeId_ = input.readBytes();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentLogicalOutputPassportType_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentLogicalOutputPassportType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType.Builder.class);
      }

      public static com.google.protobuf.Parser<DelEquipmentLogicalOutputPassportType> PARSER =
          new com.google.protobuf.AbstractParser<DelEquipmentLogicalOutputPassportType>() {
        public DelEquipmentLogicalOutputPassportType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new DelEquipmentLogicalOutputPassportType(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<DelEquipmentLogicalOutputPassportType> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional string passport_type_id = 1;
      public static final int PASSPORT_TYPE_ID_FIELD_NUMBER = 1;
      private java.lang.Object passportTypeId_;
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      public boolean hasPassportTypeId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      public java.lang.String getPassportTypeId() {
        java.lang.Object ref = passportTypeId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            passportTypeId_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string passport_type_id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getPassportTypeIdBytes() {
        java.lang.Object ref = passportTypeId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          passportTypeId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private void initFields() {
        passportTypeId_ = "";
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeBytes(1, getPassportTypeIdBytes());
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(1, getPassportTypeIdBytes());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentLogicalOutputPassportType_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentLogicalOutputPassportType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          passportTypeId_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentLogicalOutputPassportType_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.passportTypeId_ = passportTypeId_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType.getDefaultInstance()) return this;
          if (other.hasPassportTypeId()) {
            bitField0_ |= 0x00000001;
            passportTypeId_ = other.passportTypeId_;
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional string passport_type_id = 1;
        private java.lang.Object passportTypeId_ = "";
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public boolean hasPassportTypeId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public java.lang.String getPassportTypeId() {
          java.lang.Object ref = passportTypeId_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            passportTypeId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public com.google.protobuf.ByteString
            getPassportTypeIdBytes() {
          java.lang.Object ref = passportTypeId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            passportTypeId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public Builder setPassportTypeId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          passportTypeId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public Builder clearPassportTypeId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          passportTypeId_ = getDefaultInstance().getPassportTypeId();
          onChanged();
          return this;
        }
        /**
         * <code>optional string passport_type_id = 1;</code>
         */
        public Builder setPassportTypeIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          passportTypeId_ = value;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType)
      }

      static {
        defaultInstance = new DelEquipmentLogicalOutputPassportType(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType)
    }

    public interface AddGeneralPurposeReferenceOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;
      /**
       * <code>optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;</code>
       */
      boolean hasReferenceDescription();
      /**
       * <code>optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription getReferenceDescription();
      /**
       * <code>optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescriptionOrBuilder getReferenceDescriptionOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference}
     */
    public static final class AddGeneralPurposeReference extends
        com.google.protobuf.GeneratedMessage
        implements AddGeneralPurposeReferenceOrBuilder {
      // Use AddGeneralPurposeReference.newBuilder() to construct.
      private AddGeneralPurposeReference(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private AddGeneralPurposeReference(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final AddGeneralPurposeReference defaultInstance;
      public static AddGeneralPurposeReference getDefaultInstance() {
        return defaultInstance;
      }

      public AddGeneralPurposeReference getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private AddGeneralPurposeReference(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = referenceDescription_.toBuilder();
                }
                referenceDescription_ = input.readMessage(ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(referenceDescription_);
                  referenceDescription_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddGeneralPurposeReference_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddGeneralPurposeReference_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference.Builder.class);
      }

      public static com.google.protobuf.Parser<AddGeneralPurposeReference> PARSER =
          new com.google.protobuf.AbstractParser<AddGeneralPurposeReference>() {
        public AddGeneralPurposeReference parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new AddGeneralPurposeReference(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<AddGeneralPurposeReference> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;
      public static final int REFERENCE_DESCRIPTION_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription referenceDescription_;
      /**
       * <code>optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;</code>
       */
      public boolean hasReferenceDescription() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription getReferenceDescription() {
        return referenceDescription_;
      }
      /**
       * <code>optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescriptionOrBuilder getReferenceDescriptionOrBuilder() {
        return referenceDescription_;
      }

      private void initFields() {
        referenceDescription_ = ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasReferenceDescription()) {
          if (!getReferenceDescription().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, referenceDescription_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, referenceDescription_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddGeneralPurposeReference_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddGeneralPurposeReference_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getReferenceDescriptionFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (referenceDescriptionBuilder_ == null) {
            referenceDescription_ = ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription.getDefaultInstance();
          } else {
            referenceDescriptionBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddGeneralPurposeReference_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (referenceDescriptionBuilder_ == null) {
            result.referenceDescription_ = referenceDescription_;
          } else {
            result.referenceDescription_ = referenceDescriptionBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference.getDefaultInstance()) return this;
          if (other.hasReferenceDescription()) {
            mergeReferenceDescription(other.getReferenceDescription());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasReferenceDescription()) {
            if (!getReferenceDescription().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;
        private ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription referenceDescription_ = ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription, ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription.Builder, ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescriptionOrBuilder> referenceDescriptionBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;</code>
         */
        public boolean hasReferenceDescription() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription getReferenceDescription() {
          if (referenceDescriptionBuilder_ == null) {
            return referenceDescription_;
          } else {
            return referenceDescriptionBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;</code>
         */
        public Builder setReferenceDescription(ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription value) {
          if (referenceDescriptionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            referenceDescription_ = value;
            onChanged();
          } else {
            referenceDescriptionBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;</code>
         */
        public Builder setReferenceDescription(
            ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription.Builder builderForValue) {
          if (referenceDescriptionBuilder_ == null) {
            referenceDescription_ = builderForValue.build();
            onChanged();
          } else {
            referenceDescriptionBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;</code>
         */
        public Builder mergeReferenceDescription(ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription value) {
          if (referenceDescriptionBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                referenceDescription_ != ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription.getDefaultInstance()) {
              referenceDescription_ =
                ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription.newBuilder(referenceDescription_).mergeFrom(value).buildPartial();
            } else {
              referenceDescription_ = value;
            }
            onChanged();
          } else {
            referenceDescriptionBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;</code>
         */
        public Builder clearReferenceDescription() {
          if (referenceDescriptionBuilder_ == null) {
            referenceDescription_ = ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription.getDefaultInstance();
            onChanged();
          } else {
            referenceDescriptionBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription.Builder getReferenceDescriptionBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getReferenceDescriptionFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescriptionOrBuilder getReferenceDescriptionOrBuilder() {
          if (referenceDescriptionBuilder_ != null) {
            return referenceDescriptionBuilder_.getMessageOrBuilder();
          } else {
            return referenceDescription_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription, ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription.Builder, ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescriptionOrBuilder> 
            getReferenceDescriptionFieldBuilder() {
          if (referenceDescriptionBuilder_ == null) {
            referenceDescriptionBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription, ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription.Builder, ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescriptionOrBuilder>(
                    referenceDescription_,
                    getParentForChildren(),
                    isClean());
            referenceDescription_ = null;
          }
          return referenceDescriptionBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference)
      }

      static {
        defaultInstance = new AddGeneralPurposeReference(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference)
    }

    public interface UpdGeneralPurposeReferenceOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;
      /**
       * <code>optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;</code>
       */
      boolean hasReferenceDescription();
      /**
       * <code>optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription getReferenceDescription();
      /**
       * <code>optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescriptionOrBuilder getReferenceDescriptionOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReference}
     */
    public static final class UpdGeneralPurposeReference extends
        com.google.protobuf.GeneratedMessage
        implements UpdGeneralPurposeReferenceOrBuilder {
      // Use UpdGeneralPurposeReference.newBuilder() to construct.
      private UpdGeneralPurposeReference(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private UpdGeneralPurposeReference(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final UpdGeneralPurposeReference defaultInstance;
      public static UpdGeneralPurposeReference getDefaultInstance() {
        return defaultInstance;
      }

      public UpdGeneralPurposeReference getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private UpdGeneralPurposeReference(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = referenceDescription_.toBuilder();
                }
                referenceDescription_ = input.readMessage(ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(referenceDescription_);
                  referenceDescription_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdGeneralPurposeReference_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdGeneralPurposeReference_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference.Builder.class);
      }

      public static com.google.protobuf.Parser<UpdGeneralPurposeReference> PARSER =
          new com.google.protobuf.AbstractParser<UpdGeneralPurposeReference>() {
        public UpdGeneralPurposeReference parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new UpdGeneralPurposeReference(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<UpdGeneralPurposeReference> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;
      public static final int REFERENCE_DESCRIPTION_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription referenceDescription_;
      /**
       * <code>optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;</code>
       */
      public boolean hasReferenceDescription() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription getReferenceDescription() {
        return referenceDescription_;
      }
      /**
       * <code>optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescriptionOrBuilder getReferenceDescriptionOrBuilder() {
        return referenceDescription_;
      }

      private void initFields() {
        referenceDescription_ = ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasReferenceDescription()) {
          if (!getReferenceDescription().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, referenceDescription_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, referenceDescription_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReference}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdGeneralPurposeReference_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdGeneralPurposeReference_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getReferenceDescriptionFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (referenceDescriptionBuilder_ == null) {
            referenceDescription_ = ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription.getDefaultInstance();
          } else {
            referenceDescriptionBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdGeneralPurposeReference_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (referenceDescriptionBuilder_ == null) {
            result.referenceDescription_ = referenceDescription_;
          } else {
            result.referenceDescription_ = referenceDescriptionBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference.getDefaultInstance()) return this;
          if (other.hasReferenceDescription()) {
            mergeReferenceDescription(other.getReferenceDescription());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasReferenceDescription()) {
            if (!getReferenceDescription().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;
        private ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription referenceDescription_ = ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription, ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription.Builder, ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescriptionOrBuilder> referenceDescriptionBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;</code>
         */
        public boolean hasReferenceDescription() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription getReferenceDescription() {
          if (referenceDescriptionBuilder_ == null) {
            return referenceDescription_;
          } else {
            return referenceDescriptionBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;</code>
         */
        public Builder setReferenceDescription(ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription value) {
          if (referenceDescriptionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            referenceDescription_ = value;
            onChanged();
          } else {
            referenceDescriptionBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;</code>
         */
        public Builder setReferenceDescription(
            ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription.Builder builderForValue) {
          if (referenceDescriptionBuilder_ == null) {
            referenceDescription_ = builderForValue.build();
            onChanged();
          } else {
            referenceDescriptionBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;</code>
         */
        public Builder mergeReferenceDescription(ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription value) {
          if (referenceDescriptionBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                referenceDescription_ != ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription.getDefaultInstance()) {
              referenceDescription_ =
                ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription.newBuilder(referenceDescription_).mergeFrom(value).buildPartial();
            } else {
              referenceDescription_ = value;
            }
            onChanged();
          } else {
            referenceDescriptionBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;</code>
         */
        public Builder clearReferenceDescription() {
          if (referenceDescriptionBuilder_ == null) {
            referenceDescription_ = ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription.getDefaultInstance();
            onChanged();
          } else {
            referenceDescriptionBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription.Builder getReferenceDescriptionBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getReferenceDescriptionFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescriptionOrBuilder getReferenceDescriptionOrBuilder() {
          if (referenceDescriptionBuilder_ != null) {
            return referenceDescriptionBuilder_.getMessageOrBuilder();
          } else {
            return referenceDescription_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.ReferenceDescription reference_description = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription, ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription.Builder, ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescriptionOrBuilder> 
            getReferenceDescriptionFieldBuilder() {
          if (referenceDescriptionBuilder_ == null) {
            referenceDescriptionBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription, ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescription.Builder, ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.ReferenceDescriptionOrBuilder>(
                    referenceDescription_,
                    getParentForChildren(),
                    isClean());
            referenceDescription_ = null;
          }
          return referenceDescriptionBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReference)
      }

      static {
        defaultInstance = new UpdGeneralPurposeReference(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReference)
    }

    public interface DelGeneralPurposeReferenceOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional uint32 id = 1;
      /**
       * <code>optional uint32 id = 1;</code>
       */
      boolean hasId();
      /**
       * <code>optional uint32 id = 1;</code>
       */
      int getId();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference}
     */
    public static final class DelGeneralPurposeReference extends
        com.google.protobuf.GeneratedMessage
        implements DelGeneralPurposeReferenceOrBuilder {
      // Use DelGeneralPurposeReference.newBuilder() to construct.
      private DelGeneralPurposeReference(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private DelGeneralPurposeReference(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final DelGeneralPurposeReference defaultInstance;
      public static DelGeneralPurposeReference getDefaultInstance() {
        return defaultInstance;
      }

      public DelGeneralPurposeReference getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private DelGeneralPurposeReference(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                id_ = input.readUInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelGeneralPurposeReference_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelGeneralPurposeReference_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference.Builder.class);
      }

      public static com.google.protobuf.Parser<DelGeneralPurposeReference> PARSER =
          new com.google.protobuf.AbstractParser<DelGeneralPurposeReference>() {
        public DelGeneralPurposeReference parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new DelGeneralPurposeReference(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<DelGeneralPurposeReference> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional uint32 id = 1;
      public static final int ID_FIELD_NUMBER = 1;
      private int id_;
      /**
       * <code>optional uint32 id = 1;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 id = 1;</code>
       */
      public int getId() {
        return id_;
      }

      private void initFields() {
        id_ = 0;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, id_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, id_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelGeneralPurposeReference_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelGeneralPurposeReference_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          id_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelGeneralPurposeReference_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.id_ = id_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference.getDefaultInstance()) return this;
          if (other.hasId()) {
            setId(other.getId());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional uint32 id = 1;
        private int id_ ;
        /**
         * <code>optional uint32 id = 1;</code>
         */
        public boolean hasId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint32 id = 1;</code>
         */
        public int getId() {
          return id_;
        }
        /**
         * <code>optional uint32 id = 1;</code>
         */
        public Builder setId(int value) {
          bitField0_ |= 0x00000001;
          id_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 id = 1;</code>
         */
        public Builder clearId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          id_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference)
      }

      static {
        defaultInstance = new DelGeneralPurposeReference(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference)
    }

    public interface AddGeneralPurposeReferenceRecordOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.FieldTypeValue key_value = 1;
      /**
       * <code>optional .almaz2.domain_objects.FieldTypeValue key_value = 1;</code>
       */
      boolean hasKeyValue();
      /**
       * <code>optional .almaz2.domain_objects.FieldTypeValue key_value = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue getKeyValue();
      /**
       * <code>optional .almaz2.domain_objects.FieldTypeValue key_value = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueOrBuilder getKeyValueOrBuilder();

      // optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;
      /**
       * <code>optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;</code>
       */
      boolean hasArrayValue();
      /**
       * <code>optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;</code>
       */
      ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray getArrayValue();
      /**
       * <code>optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;</code>
       */
      ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArrayOrBuilder getArrayValueOrBuilder();

      // optional uint32 reference_value_id = 3;
      /**
       * <code>optional uint32 reference_value_id = 3;</code>
       */
      boolean hasReferenceValueId();
      /**
       * <code>optional uint32 reference_value_id = 3;</code>
       */
      int getReferenceValueId();

      // optional uint32 reference_value_link_id = 4;
      /**
       * <code>optional uint32 reference_value_link_id = 4;</code>
       */
      boolean hasReferenceValueLinkId();
      /**
       * <code>optional uint32 reference_value_link_id = 4;</code>
       */
      int getReferenceValueLinkId();

      // optional string reference_id = 5;
      /**
       * <code>optional string reference_id = 5;</code>
       */
      boolean hasReferenceId();
      /**
       * <code>optional string reference_id = 5;</code>
       */
      java.lang.String getReferenceId();
      /**
       * <code>optional string reference_id = 5;</code>
       */
      com.google.protobuf.ByteString
          getReferenceIdBytes();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord}
     */
    public static final class AddGeneralPurposeReferenceRecord extends
        com.google.protobuf.GeneratedMessage
        implements AddGeneralPurposeReferenceRecordOrBuilder {
      // Use AddGeneralPurposeReferenceRecord.newBuilder() to construct.
      private AddGeneralPurposeReferenceRecord(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private AddGeneralPurposeReferenceRecord(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final AddGeneralPurposeReferenceRecord defaultInstance;
      public static AddGeneralPurposeReferenceRecord getDefaultInstance() {
        return defaultInstance;
      }

      public AddGeneralPurposeReferenceRecord getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private AddGeneralPurposeReferenceRecord(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = keyValue_.toBuilder();
                }
                keyValue_ = input.readMessage(ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(keyValue_);
                  keyValue_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
              case 18: {
                ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                  subBuilder = arrayValue_.toBuilder();
                }
                arrayValue_ = input.readMessage(ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(arrayValue_);
                  arrayValue_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                referenceValueId_ = input.readUInt32();
                break;
              }
              case 32: {
                bitField0_ |= 0x00000008;
                referenceValueLinkId_ = input.readUInt32();
                break;
              }
              case 42: {
                bitField0_ |= 0x00000010;
                referenceId_ = input.readBytes();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddGeneralPurposeReferenceRecord_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddGeneralPurposeReferenceRecord_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord.Builder.class);
      }

      public static com.google.protobuf.Parser<AddGeneralPurposeReferenceRecord> PARSER =
          new com.google.protobuf.AbstractParser<AddGeneralPurposeReferenceRecord>() {
        public AddGeneralPurposeReferenceRecord parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new AddGeneralPurposeReferenceRecord(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<AddGeneralPurposeReferenceRecord> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.FieldTypeValue key_value = 1;
      public static final int KEY_VALUE_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue keyValue_;
      /**
       * <code>optional .almaz2.domain_objects.FieldTypeValue key_value = 1;</code>
       */
      public boolean hasKeyValue() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.FieldTypeValue key_value = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue getKeyValue() {
        return keyValue_;
      }
      /**
       * <code>optional .almaz2.domain_objects.FieldTypeValue key_value = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueOrBuilder getKeyValueOrBuilder() {
        return keyValue_;
      }

      // optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;
      public static final int ARRAY_VALUE_FIELD_NUMBER = 2;
      private ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray arrayValue_;
      /**
       * <code>optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;</code>
       */
      public boolean hasArrayValue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;</code>
       */
      public ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray getArrayValue() {
        return arrayValue_;
      }
      /**
       * <code>optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;</code>
       */
      public ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArrayOrBuilder getArrayValueOrBuilder() {
        return arrayValue_;
      }

      // optional uint32 reference_value_id = 3;
      public static final int REFERENCE_VALUE_ID_FIELD_NUMBER = 3;
      private int referenceValueId_;
      /**
       * <code>optional uint32 reference_value_id = 3;</code>
       */
      public boolean hasReferenceValueId() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 reference_value_id = 3;</code>
       */
      public int getReferenceValueId() {
        return referenceValueId_;
      }

      // optional uint32 reference_value_link_id = 4;
      public static final int REFERENCE_VALUE_LINK_ID_FIELD_NUMBER = 4;
      private int referenceValueLinkId_;
      /**
       * <code>optional uint32 reference_value_link_id = 4;</code>
       */
      public boolean hasReferenceValueLinkId() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 reference_value_link_id = 4;</code>
       */
      public int getReferenceValueLinkId() {
        return referenceValueLinkId_;
      }

      // optional string reference_id = 5;
      public static final int REFERENCE_ID_FIELD_NUMBER = 5;
      private java.lang.Object referenceId_;
      /**
       * <code>optional string reference_id = 5;</code>
       */
      public boolean hasReferenceId() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional string reference_id = 5;</code>
       */
      public java.lang.String getReferenceId() {
        java.lang.Object ref = referenceId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            referenceId_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string reference_id = 5;</code>
       */
      public com.google.protobuf.ByteString
          getReferenceIdBytes() {
        java.lang.Object ref = referenceId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          referenceId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private void initFields() {
        keyValue_ = ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue.getDefaultInstance();
        arrayValue_ = ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray.getDefaultInstance();
        referenceValueId_ = 0;
        referenceValueLinkId_ = 0;
        referenceId_ = "";
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, keyValue_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeMessage(2, arrayValue_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeUInt32(3, referenceValueId_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeUInt32(4, referenceValueLinkId_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          output.writeBytes(5, getReferenceIdBytes());
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, keyValue_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, arrayValue_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(3, referenceValueId_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(4, referenceValueLinkId_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(5, getReferenceIdBytes());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecordOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddGeneralPurposeReferenceRecord_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddGeneralPurposeReferenceRecord_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getKeyValueFieldBuilder();
            getArrayValueFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (keyValueBuilder_ == null) {
            keyValue_ = ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue.getDefaultInstance();
          } else {
            keyValueBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          if (arrayValueBuilder_ == null) {
            arrayValue_ = ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray.getDefaultInstance();
          } else {
            arrayValueBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          referenceValueId_ = 0;
          bitField0_ = (bitField0_ & ~0x00000004);
          referenceValueLinkId_ = 0;
          bitField0_ = (bitField0_ & ~0x00000008);
          referenceId_ = "";
          bitField0_ = (bitField0_ & ~0x00000010);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_AddGeneralPurposeReferenceRecord_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (keyValueBuilder_ == null) {
            result.keyValue_ = keyValue_;
          } else {
            result.keyValue_ = keyValueBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          if (arrayValueBuilder_ == null) {
            result.arrayValue_ = arrayValue_;
          } else {
            result.arrayValue_ = arrayValueBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.referenceValueId_ = referenceValueId_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          result.referenceValueLinkId_ = referenceValueLinkId_;
          if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
            to_bitField0_ |= 0x00000010;
          }
          result.referenceId_ = referenceId_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord.getDefaultInstance()) return this;
          if (other.hasKeyValue()) {
            mergeKeyValue(other.getKeyValue());
          }
          if (other.hasArrayValue()) {
            mergeArrayValue(other.getArrayValue());
          }
          if (other.hasReferenceValueId()) {
            setReferenceValueId(other.getReferenceValueId());
          }
          if (other.hasReferenceValueLinkId()) {
            setReferenceValueLinkId(other.getReferenceValueLinkId());
          }
          if (other.hasReferenceId()) {
            bitField0_ |= 0x00000010;
            referenceId_ = other.referenceId_;
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.FieldTypeValue key_value = 1;
        private ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue keyValue_ = ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue, ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue.Builder, ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueOrBuilder> keyValueBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValue key_value = 1;</code>
         */
        public boolean hasKeyValue() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValue key_value = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue getKeyValue() {
          if (keyValueBuilder_ == null) {
            return keyValue_;
          } else {
            return keyValueBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValue key_value = 1;</code>
         */
        public Builder setKeyValue(ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue value) {
          if (keyValueBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            keyValue_ = value;
            onChanged();
          } else {
            keyValueBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValue key_value = 1;</code>
         */
        public Builder setKeyValue(
            ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue.Builder builderForValue) {
          if (keyValueBuilder_ == null) {
            keyValue_ = builderForValue.build();
            onChanged();
          } else {
            keyValueBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValue key_value = 1;</code>
         */
        public Builder mergeKeyValue(ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue value) {
          if (keyValueBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                keyValue_ != ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue.getDefaultInstance()) {
              keyValue_ =
                ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue.newBuilder(keyValue_).mergeFrom(value).buildPartial();
            } else {
              keyValue_ = value;
            }
            onChanged();
          } else {
            keyValueBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValue key_value = 1;</code>
         */
        public Builder clearKeyValue() {
          if (keyValueBuilder_ == null) {
            keyValue_ = ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue.getDefaultInstance();
            onChanged();
          } else {
            keyValueBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValue key_value = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue.Builder getKeyValueBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getKeyValueFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValue key_value = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueOrBuilder getKeyValueOrBuilder() {
          if (keyValueBuilder_ != null) {
            return keyValueBuilder_.getMessageOrBuilder();
          } else {
            return keyValue_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValue key_value = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue, ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue.Builder, ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueOrBuilder> 
            getKeyValueFieldBuilder() {
          if (keyValueBuilder_ == null) {
            keyValueBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue, ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue.Builder, ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueOrBuilder>(
                    keyValue_,
                    getParentForChildren(),
                    isClean());
            keyValue_ = null;
          }
          return keyValueBuilder_;
        }

        // optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;
        private ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray arrayValue_ = ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray, ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray.Builder, ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArrayOrBuilder> arrayValueBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;</code>
         */
        public boolean hasArrayValue() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;</code>
         */
        public ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray getArrayValue() {
          if (arrayValueBuilder_ == null) {
            return arrayValue_;
          } else {
            return arrayValueBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;</code>
         */
        public Builder setArrayValue(ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray value) {
          if (arrayValueBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            arrayValue_ = value;
            onChanged();
          } else {
            arrayValueBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;</code>
         */
        public Builder setArrayValue(
            ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray.Builder builderForValue) {
          if (arrayValueBuilder_ == null) {
            arrayValue_ = builderForValue.build();
            onChanged();
          } else {
            arrayValueBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;</code>
         */
        public Builder mergeArrayValue(ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray value) {
          if (arrayValueBuilder_ == null) {
            if (((bitField0_ & 0x00000002) == 0x00000002) &&
                arrayValue_ != ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray.getDefaultInstance()) {
              arrayValue_ =
                ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray.newBuilder(arrayValue_).mergeFrom(value).buildPartial();
            } else {
              arrayValue_ = value;
            }
            onChanged();
          } else {
            arrayValueBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;</code>
         */
        public Builder clearArrayValue() {
          if (arrayValueBuilder_ == null) {
            arrayValue_ = ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray.getDefaultInstance();
            onChanged();
          } else {
            arrayValueBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;</code>
         */
        public ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray.Builder getArrayValueBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getArrayValueFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;</code>
         */
        public ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArrayOrBuilder getArrayValueOrBuilder() {
          if (arrayValueBuilder_ != null) {
            return arrayValueBuilder_.getMessageOrBuilder();
          } else {
            return arrayValue_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray, ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray.Builder, ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArrayOrBuilder> 
            getArrayValueFieldBuilder() {
          if (arrayValueBuilder_ == null) {
            arrayValueBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray, ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray.Builder, ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArrayOrBuilder>(
                    arrayValue_,
                    getParentForChildren(),
                    isClean());
            arrayValue_ = null;
          }
          return arrayValueBuilder_;
        }

        // optional uint32 reference_value_id = 3;
        private int referenceValueId_ ;
        /**
         * <code>optional uint32 reference_value_id = 3;</code>
         */
        public boolean hasReferenceValueId() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional uint32 reference_value_id = 3;</code>
         */
        public int getReferenceValueId() {
          return referenceValueId_;
        }
        /**
         * <code>optional uint32 reference_value_id = 3;</code>
         */
        public Builder setReferenceValueId(int value) {
          bitField0_ |= 0x00000004;
          referenceValueId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 reference_value_id = 3;</code>
         */
        public Builder clearReferenceValueId() {
          bitField0_ = (bitField0_ & ~0x00000004);
          referenceValueId_ = 0;
          onChanged();
          return this;
        }

        // optional uint32 reference_value_link_id = 4;
        private int referenceValueLinkId_ ;
        /**
         * <code>optional uint32 reference_value_link_id = 4;</code>
         */
        public boolean hasReferenceValueLinkId() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional uint32 reference_value_link_id = 4;</code>
         */
        public int getReferenceValueLinkId() {
          return referenceValueLinkId_;
        }
        /**
         * <code>optional uint32 reference_value_link_id = 4;</code>
         */
        public Builder setReferenceValueLinkId(int value) {
          bitField0_ |= 0x00000008;
          referenceValueLinkId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 reference_value_link_id = 4;</code>
         */
        public Builder clearReferenceValueLinkId() {
          bitField0_ = (bitField0_ & ~0x00000008);
          referenceValueLinkId_ = 0;
          onChanged();
          return this;
        }

        // optional string reference_id = 5;
        private java.lang.Object referenceId_ = "";
        /**
         * <code>optional string reference_id = 5;</code>
         */
        public boolean hasReferenceId() {
          return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        /**
         * <code>optional string reference_id = 5;</code>
         */
        public java.lang.String getReferenceId() {
          java.lang.Object ref = referenceId_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            referenceId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string reference_id = 5;</code>
         */
        public com.google.protobuf.ByteString
            getReferenceIdBytes() {
          java.lang.Object ref = referenceId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            referenceId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string reference_id = 5;</code>
         */
        public Builder setReferenceId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
          referenceId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string reference_id = 5;</code>
         */
        public Builder clearReferenceId() {
          bitField0_ = (bitField0_ & ~0x00000010);
          referenceId_ = getDefaultInstance().getReferenceId();
          onChanged();
          return this;
        }
        /**
         * <code>optional string reference_id = 5;</code>
         */
        public Builder setReferenceIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
          referenceId_ = value;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord)
      }

      static {
        defaultInstance = new AddGeneralPurposeReferenceRecord(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord)
    }

    public interface UpdGeneralPurposeReferenceRecordOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.domain_objects.FieldTypeValue key_value = 1;
      /**
       * <code>optional .almaz2.domain_objects.FieldTypeValue key_value = 1;</code>
       */
      boolean hasKeyValue();
      /**
       * <code>optional .almaz2.domain_objects.FieldTypeValue key_value = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue getKeyValue();
      /**
       * <code>optional .almaz2.domain_objects.FieldTypeValue key_value = 1;</code>
       */
      ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueOrBuilder getKeyValueOrBuilder();

      // optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;
      /**
       * <code>optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;</code>
       */
      boolean hasArrayValue();
      /**
       * <code>optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;</code>
       */
      ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray getArrayValue();
      /**
       * <code>optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;</code>
       */
      ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArrayOrBuilder getArrayValueOrBuilder();

      // optional uint32 reference_value_id = 3;
      /**
       * <code>optional uint32 reference_value_id = 3;</code>
       */
      boolean hasReferenceValueId();
      /**
       * <code>optional uint32 reference_value_id = 3;</code>
       */
      int getReferenceValueId();

      // optional uint32 reference_value_link_id = 4;
      /**
       * <code>optional uint32 reference_value_link_id = 4;</code>
       */
      boolean hasReferenceValueLinkId();
      /**
       * <code>optional uint32 reference_value_link_id = 4;</code>
       */
      int getReferenceValueLinkId();

      // optional string reference_id = 5;
      /**
       * <code>optional string reference_id = 5;</code>
       */
      boolean hasReferenceId();
      /**
       * <code>optional string reference_id = 5;</code>
       */
      java.lang.String getReferenceId();
      /**
       * <code>optional string reference_id = 5;</code>
       */
      com.google.protobuf.ByteString
          getReferenceIdBytes();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord}
     */
    public static final class UpdGeneralPurposeReferenceRecord extends
        com.google.protobuf.GeneratedMessage
        implements UpdGeneralPurposeReferenceRecordOrBuilder {
      // Use UpdGeneralPurposeReferenceRecord.newBuilder() to construct.
      private UpdGeneralPurposeReferenceRecord(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private UpdGeneralPurposeReferenceRecord(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final UpdGeneralPurposeReferenceRecord defaultInstance;
      public static UpdGeneralPurposeReferenceRecord getDefaultInstance() {
        return defaultInstance;
      }

      public UpdGeneralPurposeReferenceRecord getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private UpdGeneralPurposeReferenceRecord(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = keyValue_.toBuilder();
                }
                keyValue_ = input.readMessage(ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(keyValue_);
                  keyValue_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
              case 18: {
                ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                  subBuilder = arrayValue_.toBuilder();
                }
                arrayValue_ = input.readMessage(ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(arrayValue_);
                  arrayValue_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                referenceValueId_ = input.readUInt32();
                break;
              }
              case 32: {
                bitField0_ |= 0x00000008;
                referenceValueLinkId_ = input.readUInt32();
                break;
              }
              case 42: {
                bitField0_ |= 0x00000010;
                referenceId_ = input.readBytes();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdGeneralPurposeReferenceRecord_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdGeneralPurposeReferenceRecord_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord.Builder.class);
      }

      public static com.google.protobuf.Parser<UpdGeneralPurposeReferenceRecord> PARSER =
          new com.google.protobuf.AbstractParser<UpdGeneralPurposeReferenceRecord>() {
        public UpdGeneralPurposeReferenceRecord parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new UpdGeneralPurposeReferenceRecord(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<UpdGeneralPurposeReferenceRecord> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .almaz2.domain_objects.FieldTypeValue key_value = 1;
      public static final int KEY_VALUE_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue keyValue_;
      /**
       * <code>optional .almaz2.domain_objects.FieldTypeValue key_value = 1;</code>
       */
      public boolean hasKeyValue() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.domain_objects.FieldTypeValue key_value = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue getKeyValue() {
        return keyValue_;
      }
      /**
       * <code>optional .almaz2.domain_objects.FieldTypeValue key_value = 1;</code>
       */
      public ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueOrBuilder getKeyValueOrBuilder() {
        return keyValue_;
      }

      // optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;
      public static final int ARRAY_VALUE_FIELD_NUMBER = 2;
      private ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray arrayValue_;
      /**
       * <code>optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;</code>
       */
      public boolean hasArrayValue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;</code>
       */
      public ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray getArrayValue() {
        return arrayValue_;
      }
      /**
       * <code>optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;</code>
       */
      public ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArrayOrBuilder getArrayValueOrBuilder() {
        return arrayValue_;
      }

      // optional uint32 reference_value_id = 3;
      public static final int REFERENCE_VALUE_ID_FIELD_NUMBER = 3;
      private int referenceValueId_;
      /**
       * <code>optional uint32 reference_value_id = 3;</code>
       */
      public boolean hasReferenceValueId() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 reference_value_id = 3;</code>
       */
      public int getReferenceValueId() {
        return referenceValueId_;
      }

      // optional uint32 reference_value_link_id = 4;
      public static final int REFERENCE_VALUE_LINK_ID_FIELD_NUMBER = 4;
      private int referenceValueLinkId_;
      /**
       * <code>optional uint32 reference_value_link_id = 4;</code>
       */
      public boolean hasReferenceValueLinkId() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 reference_value_link_id = 4;</code>
       */
      public int getReferenceValueLinkId() {
        return referenceValueLinkId_;
      }

      // optional string reference_id = 5;
      public static final int REFERENCE_ID_FIELD_NUMBER = 5;
      private java.lang.Object referenceId_;
      /**
       * <code>optional string reference_id = 5;</code>
       */
      public boolean hasReferenceId() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional string reference_id = 5;</code>
       */
      public java.lang.String getReferenceId() {
        java.lang.Object ref = referenceId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            referenceId_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string reference_id = 5;</code>
       */
      public com.google.protobuf.ByteString
          getReferenceIdBytes() {
        java.lang.Object ref = referenceId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          referenceId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private void initFields() {
        keyValue_ = ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue.getDefaultInstance();
        arrayValue_ = ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray.getDefaultInstance();
        referenceValueId_ = 0;
        referenceValueLinkId_ = 0;
        referenceId_ = "";
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, keyValue_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeMessage(2, arrayValue_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeUInt32(3, referenceValueId_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeUInt32(4, referenceValueLinkId_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          output.writeBytes(5, getReferenceIdBytes());
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, keyValue_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, arrayValue_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(3, referenceValueId_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(4, referenceValueLinkId_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(5, getReferenceIdBytes());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecordOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdGeneralPurposeReferenceRecord_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdGeneralPurposeReferenceRecord_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getKeyValueFieldBuilder();
            getArrayValueFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (keyValueBuilder_ == null) {
            keyValue_ = ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue.getDefaultInstance();
          } else {
            keyValueBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          if (arrayValueBuilder_ == null) {
            arrayValue_ = ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray.getDefaultInstance();
          } else {
            arrayValueBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          referenceValueId_ = 0;
          bitField0_ = (bitField0_ & ~0x00000004);
          referenceValueLinkId_ = 0;
          bitField0_ = (bitField0_ & ~0x00000008);
          referenceId_ = "";
          bitField0_ = (bitField0_ & ~0x00000010);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_UpdGeneralPurposeReferenceRecord_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (keyValueBuilder_ == null) {
            result.keyValue_ = keyValue_;
          } else {
            result.keyValue_ = keyValueBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          if (arrayValueBuilder_ == null) {
            result.arrayValue_ = arrayValue_;
          } else {
            result.arrayValue_ = arrayValueBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.referenceValueId_ = referenceValueId_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          result.referenceValueLinkId_ = referenceValueLinkId_;
          if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
            to_bitField0_ |= 0x00000010;
          }
          result.referenceId_ = referenceId_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord.getDefaultInstance()) return this;
          if (other.hasKeyValue()) {
            mergeKeyValue(other.getKeyValue());
          }
          if (other.hasArrayValue()) {
            mergeArrayValue(other.getArrayValue());
          }
          if (other.hasReferenceValueId()) {
            setReferenceValueId(other.getReferenceValueId());
          }
          if (other.hasReferenceValueLinkId()) {
            setReferenceValueLinkId(other.getReferenceValueLinkId());
          }
          if (other.hasReferenceId()) {
            bitField0_ |= 0x00000010;
            referenceId_ = other.referenceId_;
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .almaz2.domain_objects.FieldTypeValue key_value = 1;
        private ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue keyValue_ = ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue, ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue.Builder, ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueOrBuilder> keyValueBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValue key_value = 1;</code>
         */
        public boolean hasKeyValue() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValue key_value = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue getKeyValue() {
          if (keyValueBuilder_ == null) {
            return keyValue_;
          } else {
            return keyValueBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValue key_value = 1;</code>
         */
        public Builder setKeyValue(ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue value) {
          if (keyValueBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            keyValue_ = value;
            onChanged();
          } else {
            keyValueBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValue key_value = 1;</code>
         */
        public Builder setKeyValue(
            ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue.Builder builderForValue) {
          if (keyValueBuilder_ == null) {
            keyValue_ = builderForValue.build();
            onChanged();
          } else {
            keyValueBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValue key_value = 1;</code>
         */
        public Builder mergeKeyValue(ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue value) {
          if (keyValueBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                keyValue_ != ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue.getDefaultInstance()) {
              keyValue_ =
                ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue.newBuilder(keyValue_).mergeFrom(value).buildPartial();
            } else {
              keyValue_ = value;
            }
            onChanged();
          } else {
            keyValueBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValue key_value = 1;</code>
         */
        public Builder clearKeyValue() {
          if (keyValueBuilder_ == null) {
            keyValue_ = ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue.getDefaultInstance();
            onChanged();
          } else {
            keyValueBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValue key_value = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue.Builder getKeyValueBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getKeyValueFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValue key_value = 1;</code>
         */
        public ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueOrBuilder getKeyValueOrBuilder() {
          if (keyValueBuilder_ != null) {
            return keyValueBuilder_.getMessageOrBuilder();
          } else {
            return keyValue_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValue key_value = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue, ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue.Builder, ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueOrBuilder> 
            getKeyValueFieldBuilder() {
          if (keyValueBuilder_ == null) {
            keyValueBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue, ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValue.Builder, ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueOrBuilder>(
                    keyValue_,
                    getParentForChildren(),
                    isClean());
            keyValue_ = null;
          }
          return keyValueBuilder_;
        }

        // optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;
        private ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray arrayValue_ = ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray, ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray.Builder, ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArrayOrBuilder> arrayValueBuilder_;
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;</code>
         */
        public boolean hasArrayValue() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;</code>
         */
        public ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray getArrayValue() {
          if (arrayValueBuilder_ == null) {
            return arrayValue_;
          } else {
            return arrayValueBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;</code>
         */
        public Builder setArrayValue(ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray value) {
          if (arrayValueBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            arrayValue_ = value;
            onChanged();
          } else {
            arrayValueBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;</code>
         */
        public Builder setArrayValue(
            ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray.Builder builderForValue) {
          if (arrayValueBuilder_ == null) {
            arrayValue_ = builderForValue.build();
            onChanged();
          } else {
            arrayValueBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;</code>
         */
        public Builder mergeArrayValue(ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray value) {
          if (arrayValueBuilder_ == null) {
            if (((bitField0_ & 0x00000002) == 0x00000002) &&
                arrayValue_ != ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray.getDefaultInstance()) {
              arrayValue_ =
                ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray.newBuilder(arrayValue_).mergeFrom(value).buildPartial();
            } else {
              arrayValue_ = value;
            }
            onChanged();
          } else {
            arrayValueBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;</code>
         */
        public Builder clearArrayValue() {
          if (arrayValueBuilder_ == null) {
            arrayValue_ = ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray.getDefaultInstance();
            onChanged();
          } else {
            arrayValueBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;</code>
         */
        public ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray.Builder getArrayValueBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getArrayValueFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;</code>
         */
        public ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArrayOrBuilder getArrayValueOrBuilder() {
          if (arrayValueBuilder_ != null) {
            return arrayValueBuilder_.getMessageOrBuilder();
          } else {
            return arrayValue_;
          }
        }
        /**
         * <code>optional .almaz2.domain_objects.FieldTypeValueArray array_value = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray, ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray.Builder, ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArrayOrBuilder> 
            getArrayValueFieldBuilder() {
          if (arrayValueBuilder_ == null) {
            arrayValueBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray, ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArray.Builder, ru.kodos.almaz2.domain_objects.PropertiesClass.FieldTypeValueArrayOrBuilder>(
                    arrayValue_,
                    getParentForChildren(),
                    isClean());
            arrayValue_ = null;
          }
          return arrayValueBuilder_;
        }

        // optional uint32 reference_value_id = 3;
        private int referenceValueId_ ;
        /**
         * <code>optional uint32 reference_value_id = 3;</code>
         */
        public boolean hasReferenceValueId() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional uint32 reference_value_id = 3;</code>
         */
        public int getReferenceValueId() {
          return referenceValueId_;
        }
        /**
         * <code>optional uint32 reference_value_id = 3;</code>
         */
        public Builder setReferenceValueId(int value) {
          bitField0_ |= 0x00000004;
          referenceValueId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 reference_value_id = 3;</code>
         */
        public Builder clearReferenceValueId() {
          bitField0_ = (bitField0_ & ~0x00000004);
          referenceValueId_ = 0;
          onChanged();
          return this;
        }

        // optional uint32 reference_value_link_id = 4;
        private int referenceValueLinkId_ ;
        /**
         * <code>optional uint32 reference_value_link_id = 4;</code>
         */
        public boolean hasReferenceValueLinkId() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional uint32 reference_value_link_id = 4;</code>
         */
        public int getReferenceValueLinkId() {
          return referenceValueLinkId_;
        }
        /**
         * <code>optional uint32 reference_value_link_id = 4;</code>
         */
        public Builder setReferenceValueLinkId(int value) {
          bitField0_ |= 0x00000008;
          referenceValueLinkId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 reference_value_link_id = 4;</code>
         */
        public Builder clearReferenceValueLinkId() {
          bitField0_ = (bitField0_ & ~0x00000008);
          referenceValueLinkId_ = 0;
          onChanged();
          return this;
        }

        // optional string reference_id = 5;
        private java.lang.Object referenceId_ = "";
        /**
         * <code>optional string reference_id = 5;</code>
         */
        public boolean hasReferenceId() {
          return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        /**
         * <code>optional string reference_id = 5;</code>
         */
        public java.lang.String getReferenceId() {
          java.lang.Object ref = referenceId_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            referenceId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string reference_id = 5;</code>
         */
        public com.google.protobuf.ByteString
            getReferenceIdBytes() {
          java.lang.Object ref = referenceId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            referenceId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string reference_id = 5;</code>
         */
        public Builder setReferenceId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
          referenceId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string reference_id = 5;</code>
         */
        public Builder clearReferenceId() {
          bitField0_ = (bitField0_ & ~0x00000010);
          referenceId_ = getDefaultInstance().getReferenceId();
          onChanged();
          return this;
        }
        /**
         * <code>optional string reference_id = 5;</code>
         */
        public Builder setReferenceIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
          referenceId_ = value;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord)
      }

      static {
        defaultInstance = new UpdGeneralPurposeReferenceRecord(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord)
    }

    public interface DelGeneralPurposeReferenceRecordOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional uint32 reference_value_id = 1;
      /**
       * <code>optional uint32 reference_value_id = 1;</code>
       */
      boolean hasReferenceValueId();
      /**
       * <code>optional uint32 reference_value_id = 1;</code>
       */
      int getReferenceValueId();

      // optional string reference_id = 2;
      /**
       * <code>optional string reference_id = 2;</code>
       */
      boolean hasReferenceId();
      /**
       * <code>optional string reference_id = 2;</code>
       */
      java.lang.String getReferenceId();
      /**
       * <code>optional string reference_id = 2;</code>
       */
      com.google.protobuf.ByteString
          getReferenceIdBytes();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord}
     */
    public static final class DelGeneralPurposeReferenceRecord extends
        com.google.protobuf.GeneratedMessage
        implements DelGeneralPurposeReferenceRecordOrBuilder {
      // Use DelGeneralPurposeReferenceRecord.newBuilder() to construct.
      private DelGeneralPurposeReferenceRecord(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private DelGeneralPurposeReferenceRecord(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final DelGeneralPurposeReferenceRecord defaultInstance;
      public static DelGeneralPurposeReferenceRecord getDefaultInstance() {
        return defaultInstance;
      }

      public DelGeneralPurposeReferenceRecord getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private DelGeneralPurposeReferenceRecord(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                referenceValueId_ = input.readUInt32();
                break;
              }
              case 18: {
                bitField0_ |= 0x00000002;
                referenceId_ = input.readBytes();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelGeneralPurposeReferenceRecord_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelGeneralPurposeReferenceRecord_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord.Builder.class);
      }

      public static com.google.protobuf.Parser<DelGeneralPurposeReferenceRecord> PARSER =
          new com.google.protobuf.AbstractParser<DelGeneralPurposeReferenceRecord>() {
        public DelGeneralPurposeReferenceRecord parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new DelGeneralPurposeReferenceRecord(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<DelGeneralPurposeReferenceRecord> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional uint32 reference_value_id = 1;
      public static final int REFERENCE_VALUE_ID_FIELD_NUMBER = 1;
      private int referenceValueId_;
      /**
       * <code>optional uint32 reference_value_id = 1;</code>
       */
      public boolean hasReferenceValueId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 reference_value_id = 1;</code>
       */
      public int getReferenceValueId() {
        return referenceValueId_;
      }

      // optional string reference_id = 2;
      public static final int REFERENCE_ID_FIELD_NUMBER = 2;
      private java.lang.Object referenceId_;
      /**
       * <code>optional string reference_id = 2;</code>
       */
      public boolean hasReferenceId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string reference_id = 2;</code>
       */
      public java.lang.String getReferenceId() {
        java.lang.Object ref = referenceId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            referenceId_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string reference_id = 2;</code>
       */
      public com.google.protobuf.ByteString
          getReferenceIdBytes() {
        java.lang.Object ref = referenceId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          referenceId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private void initFields() {
        referenceValueId_ = 0;
        referenceId_ = "";
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, referenceValueId_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeBytes(2, getReferenceIdBytes());
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, referenceValueId_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(2, getReferenceIdBytes());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecordOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelGeneralPurposeReferenceRecord_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelGeneralPurposeReferenceRecord_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          referenceValueId_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          referenceId_ = "";
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_DelGeneralPurposeReferenceRecord_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.referenceValueId_ = referenceValueId_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.referenceId_ = referenceId_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord.getDefaultInstance()) return this;
          if (other.hasReferenceValueId()) {
            setReferenceValueId(other.getReferenceValueId());
          }
          if (other.hasReferenceId()) {
            bitField0_ |= 0x00000002;
            referenceId_ = other.referenceId_;
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional uint32 reference_value_id = 1;
        private int referenceValueId_ ;
        /**
         * <code>optional uint32 reference_value_id = 1;</code>
         */
        public boolean hasReferenceValueId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint32 reference_value_id = 1;</code>
         */
        public int getReferenceValueId() {
          return referenceValueId_;
        }
        /**
         * <code>optional uint32 reference_value_id = 1;</code>
         */
        public Builder setReferenceValueId(int value) {
          bitField0_ |= 0x00000001;
          referenceValueId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 reference_value_id = 1;</code>
         */
        public Builder clearReferenceValueId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          referenceValueId_ = 0;
          onChanged();
          return this;
        }

        // optional string reference_id = 2;
        private java.lang.Object referenceId_ = "";
        /**
         * <code>optional string reference_id = 2;</code>
         */
        public boolean hasReferenceId() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional string reference_id = 2;</code>
         */
        public java.lang.String getReferenceId() {
          java.lang.Object ref = referenceId_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            referenceId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string reference_id = 2;</code>
         */
        public com.google.protobuf.ByteString
            getReferenceIdBytes() {
          java.lang.Object ref = referenceId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            referenceId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string reference_id = 2;</code>
         */
        public Builder setReferenceId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          referenceId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string reference_id = 2;</code>
         */
        public Builder clearReferenceId() {
          bitField0_ = (bitField0_ & ~0x00000002);
          referenceId_ = getDefaultInstance().getReferenceId();
          onChanged();
          return this;
        }
        /**
         * <code>optional string reference_id = 2;</code>
         */
        public Builder setReferenceIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          referenceId_ = value;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord)
      }

      static {
        defaultInstance = new DelGeneralPurposeReferenceRecord(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord)
    }

    public interface RequestBaseOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;</code>
       */
      boolean hasHeader();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header getHeader();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.HeaderOrBuilder getHeaderOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AuthRequest auth = 2;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AuthRequest auth = 2;</code>
       */
      boolean hasAuth();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AuthRequest auth = 2;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest getAuth();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AuthRequest auth = 2;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequestOrBuilder getAuthOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UserLoginRequest user_login = 3;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginRequest user_login = 3;</code>
       */
      boolean hasUserLogin();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginRequest user_login = 3;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest getUserLogin();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginRequest user_login = 3;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequestOrBuilder getUserLoginOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UserLogoutRequest user_logout = 4;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLogoutRequest user_logout = 4;</code>
       */
      boolean hasUserLogout();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLogoutRequest user_logout = 4;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest getUserLogout();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLogoutRequest user_logout = 4;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequestOrBuilder getUserLogoutOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;</code>
       */
      boolean hasAddControlObjectPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport getAddControlObjectPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportOrBuilder getAddControlObjectPassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 6;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 6;</code>
       */
      boolean hasUpdControlObjectPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 6;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport getUpdControlObjectPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 6;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportOrBuilder getUpdControlObjectPassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 7;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 7;</code>
       */
      boolean hasDelControlObjectPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 7;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport getDelControlObjectPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 7;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportOrBuilder getDelControlObjectPassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 8;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 8;</code>
       */
      boolean hasAddEquipmentPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 8;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport getAddEquipmentPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 8;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportOrBuilder getAddEquipmentPassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 9;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 9;</code>
       */
      boolean hasUpdEquipmentPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 9;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport getUpdEquipmentPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 9;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportOrBuilder getUpdEquipmentPassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 10;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 10;</code>
       */
      boolean hasDelEquipmentPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 10;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport getDelEquipmentPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 10;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportOrBuilder getDelEquipmentPassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AckAnswer ack_answer = 11;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AckAnswer ack_answer = 11;</code>
       *
       * <pre>
       * ответ на аск объект
       * </pre>
       */
      boolean hasAckAnswer();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AckAnswer ack_answer = 11;</code>
       *
       * <pre>
       * ответ на аск объект
       * </pre>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer getAckAnswer();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AckAnswer ack_answer = 11;</code>
       *
       * <pre>
       * ответ на аск объект
       * </pre>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswerOrBuilder getAckAnswerOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 12;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 12;</code>
       */
      boolean hasAddZone();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 12;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone getAddZone();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 12;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZoneOrBuilder getAddZoneOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 13;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 13;</code>
       */
      boolean hasUpdZone();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 13;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone getUpdZone();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 13;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZoneOrBuilder getUpdZoneOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 14;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 14;</code>
       */
      boolean hasDelZone();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 14;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone getDelZone();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 14;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZoneOrBuilder getDelZoneOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 15;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 15;</code>
       */
      boolean hasAddClientPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 15;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport getAddClientPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 15;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassportOrBuilder getAddClientPassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 16;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 16;</code>
       */
      boolean hasUpdClientPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 16;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport getUpdClientPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 16;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassportOrBuilder getUpdClientPassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 17;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 17;</code>
       */
      boolean hasDelClientPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 17;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport getDelClientPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 17;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassportOrBuilder getDelClientPassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 19;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 19;</code>
       */
      boolean hasAddUserPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 19;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport getAddUserPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 19;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassportOrBuilder getAddUserPassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 20;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 20;</code>
       */
      boolean hasUpdUserPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 20;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport getUpdUserPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 20;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassportOrBuilder getUpdUserPassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 21;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 21;</code>
       */
      boolean hasDelUserPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 21;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport getDelUserPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 21;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassportOrBuilder getDelUserPassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 22;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 22;</code>
       */
      boolean hasAddInterfacePassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 22;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport getAddInterfacePassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 22;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportOrBuilder getAddInterfacePassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 23;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 23;</code>
       */
      boolean hasUpdInterfacePassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 23;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport getUpdInterfacePassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 23;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportOrBuilder getUpdInterfacePassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 24;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 24;</code>
       */
      boolean hasDelInterfacePassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 24;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport getDelInterfacePassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 24;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportOrBuilder getDelInterfacePassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 25;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 25;</code>
       */
      boolean hasAddControlObjectPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 25;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType getAddControlObjectPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 25;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportTypeOrBuilder getAddControlObjectPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 26;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 26;</code>
       */
      boolean hasUpdControlObjectPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 26;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType getUpdControlObjectPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 26;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportTypeOrBuilder getUpdControlObjectPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 27;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 27;</code>
       */
      boolean hasDelControlObjectPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 27;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType getDelControlObjectPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 27;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportTypeOrBuilder getDelControlObjectPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 28;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 28;</code>
       */
      boolean hasAddControlElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 28;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType getAddControlElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 28;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportTypeOrBuilder getAddControlElementPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 29;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 29;</code>
       */
      boolean hasUpdControlElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 29;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType getUpdControlElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 29;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportTypeOrBuilder getUpdControlElementPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 30;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 30;</code>
       */
      boolean hasDelControlElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 30;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType getDelControlElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 30;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportTypeOrBuilder getDelControlElementPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 31;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 31;</code>
       */
      boolean hasAddEquipmentPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 31;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType getAddEquipmentPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 31;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportTypeOrBuilder getAddEquipmentPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 32;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 32;</code>
       */
      boolean hasUpdEquipmentPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 32;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType getUpdEquipmentPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 32;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportTypeOrBuilder getUpdEquipmentPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 33;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 33;</code>
       */
      boolean hasDelEquipmentPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 33;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType getDelEquipmentPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 33;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportTypeOrBuilder getDelEquipmentPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 34;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 34;</code>
       */
      boolean hasAddManagedElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 34;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType getAddManagedElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 34;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportTypeOrBuilder getAddManagedElementPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 35;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 35;</code>
       */
      boolean hasUpdManagedElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 35;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType getUpdManagedElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 35;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportTypeOrBuilder getUpdManagedElementPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 36;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 36;</code>
       */
      boolean hasDelManagedElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 36;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType getDelManagedElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 36;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportTypeOrBuilder getDelManagedElementPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 37;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 37;</code>
       */
      boolean hasAddSensorControlElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 37;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType getAddSensorControlElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 37;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportTypeOrBuilder getAddSensorControlElementPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 38;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 38;</code>
       */
      boolean hasUpdSensorControlElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 38;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType getUpdSensorControlElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 38;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportTypeOrBuilder getUpdSensorControlElementPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 39;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 39;</code>
       */
      boolean hasDelSensorControlElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 39;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType getDelSensorControlElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 39;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportTypeOrBuilder getDelSensorControlElementPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 40;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 40;</code>
       */
      boolean hasAddGeneralPurposeReference();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 40;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference getAddGeneralPurposeReference();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 40;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceOrBuilder getAddGeneralPurposeReferenceOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 42;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 42;</code>
       *
       * <pre>
       *optional UpdGeneralPurposeReference upd_general_purpose_reference = 41;
       * </pre>
       */
      boolean hasDelGeneralPurposeReference();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 42;</code>
       *
       * <pre>
       *optional UpdGeneralPurposeReference upd_general_purpose_reference = 41;
       * </pre>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference getDelGeneralPurposeReference();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 42;</code>
       *
       * <pre>
       *optional UpdGeneralPurposeReference upd_general_purpose_reference = 41;
       * </pre>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceOrBuilder getDelGeneralPurposeReferenceOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 43;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 43;</code>
       */
      boolean hasAddGeneralPurposeReferenceRecord();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 43;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord getAddGeneralPurposeReferenceRecord();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 43;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecordOrBuilder getAddGeneralPurposeReferenceRecordOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 44;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 44;</code>
       */
      boolean hasUpdGeneralPurposeReferenceRecord();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 44;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord getUpdGeneralPurposeReferenceRecord();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 44;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecordOrBuilder getUpdGeneralPurposeReferenceRecordOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 45;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 45;</code>
       */
      boolean hasDelGeneralPurposeReferenceRecord();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 45;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord getDelGeneralPurposeReferenceRecord();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 45;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecordOrBuilder getDelGeneralPurposeReferenceRecordOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.SendConfigurationRequest send_configuration = 46;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.SendConfigurationRequest send_configuration = 46;</code>
       */
      boolean hasSendConfiguration();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.SendConfigurationRequest send_configuration = 46;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest getSendConfiguration();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.SendConfigurationRequest send_configuration = 46;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequestOrBuilder getSendConfigurationOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 47;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 47;</code>
       */
      boolean hasAddEquipmentLogicalInputPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 47;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType getAddEquipmentLogicalInputPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 47;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportTypeOrBuilder getAddEquipmentLogicalInputPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 48;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 48;</code>
       */
      boolean hasUpdEquipmentLogicalInputPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 48;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType getUpdEquipmentLogicalInputPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 48;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportTypeOrBuilder getUpdEquipmentLogicalInputPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 49;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 49;</code>
       */
      boolean hasDelEquipmentLogicalInputPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 49;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType getDelEquipmentLogicalInputPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 49;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportTypeOrBuilder getDelEquipmentLogicalInputPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 50;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 50;</code>
       */
      boolean hasAddEquipmentLogicalOutputPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 50;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType getAddEquipmentLogicalOutputPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 50;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportTypeOrBuilder getAddEquipmentLogicalOutputPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 51;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 51;</code>
       */
      boolean hasUpdEquipmentLogicalOutputPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 51;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType getUpdEquipmentLogicalOutputPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 51;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportTypeOrBuilder getUpdEquipmentLogicalOutputPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 52;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 52;</code>
       */
      boolean hasDelEquipmentLogicalOutputPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 52;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType getDelEquipmentLogicalOutputPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 52;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportTypeOrBuilder getDelEquipmentLogicalOutputPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 53;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 53;</code>
       */
      boolean hasAddEquipmentFirmwarePassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 53;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport getAddEquipmentFirmwarePassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 53;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassportOrBuilder getAddEquipmentFirmwarePassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 54;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 54;</code>
       */
      boolean hasUpdEquipmentFirmwarePassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 54;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport getUpdEquipmentFirmwarePassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 54;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassportOrBuilder getUpdEquipmentFirmwarePassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 55;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 55;</code>
       */
      boolean hasDelEquipmentFirmwarePassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 55;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport getDelEquipmentFirmwarePassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 55;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassportOrBuilder getDelEquipmentFirmwarePassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthRequest primary_auth = 99;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthRequest primary_auth = 99;</code>
       *
       * <pre>
       * Первичная авторизация клиента.
       * </pre>
       */
      boolean hasPrimaryAuth();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthRequest primary_auth = 99;</code>
       *
       * <pre>
       * Первичная авторизация клиента.
       * </pre>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest getPrimaryAuth();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthRequest primary_auth = 99;</code>
       *
       * <pre>
       * Первичная авторизация клиента.
       * </pre>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequestOrBuilder getPrimaryAuthOrBuilder();

      // optional .almaz2.rpc.commands.EquipmentCommandBase equipment_command = 100;
      /**
       * <code>optional .almaz2.rpc.commands.EquipmentCommandBase equipment_command = 100;</code>
       *
       * <pre>
       * Команды для оборудования объекта.
       * </pre>
       */
      boolean hasEquipmentCommand();
      /**
       * <code>optional .almaz2.rpc.commands.EquipmentCommandBase equipment_command = 100;</code>
       *
       * <pre>
       * Команды для оборудования объекта.
       * </pre>
       */
      ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentCommandBase getEquipmentCommand();
      /**
       * <code>optional .almaz2.rpc.commands.EquipmentCommandBase equipment_command = 100;</code>
       *
       * <pre>
       * Команды для оборудования объекта.
       * </pre>
       */
      ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentCommandBaseOrBuilder getEquipmentCommandOrBuilder();

      // optional .almaz2.rpc.commands.DatabaseQueryBase database_query = 200;
      /**
       * <code>optional .almaz2.rpc.commands.DatabaseQueryBase database_query = 200;</code>
       *
       * <pre>
       * Команды для базы данных.
       * </pre>
       */
      boolean hasDatabaseQuery();
      /**
       * <code>optional .almaz2.rpc.commands.DatabaseQueryBase database_query = 200;</code>
       *
       * <pre>
       * Команды для базы данных.
       * </pre>
       */
      ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase getDatabaseQuery();
      /**
       * <code>optional .almaz2.rpc.commands.DatabaseQueryBase database_query = 200;</code>
       *
       * <pre>
       * Команды для базы данных.
       * </pre>
       */
      ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBaseOrBuilder getDatabaseQueryOrBuilder();

      // optional .almaz2.rpc.commands.ControlObjectCommandBase control_object_command = 300;
      /**
       * <code>optional .almaz2.rpc.commands.ControlObjectCommandBase control_object_command = 300;</code>
       *
       * <pre>
       * Команды для контролируемого объекта.
       * </pre>
       */
      boolean hasControlObjectCommand();
      /**
       * <code>optional .almaz2.rpc.commands.ControlObjectCommandBase control_object_command = 300;</code>
       *
       * <pre>
       * Команды для контролируемого объекта.
       * </pre>
       */
      ru.kodos.almaz2.rpc.commands.ControlObjectCommandsClass.ControlObjectCommandBase getControlObjectCommand();
      /**
       * <code>optional .almaz2.rpc.commands.ControlObjectCommandBase control_object_command = 300;</code>
       *
       * <pre>
       * Команды для контролируемого объекта.
       * </pre>
       */
      ru.kodos.almaz2.rpc.commands.ControlObjectCommandsClass.ControlObjectCommandBaseOrBuilder getControlObjectCommandOrBuilder();

      // optional .almaz2.rpc.commands.ActionCommandBase action_command = 350;
      /**
       * <code>optional .almaz2.rpc.commands.ActionCommandBase action_command = 350;</code>
       *
       * <pre>
       * Команды для действий (оператора)
       * </pre>
       */
      boolean hasActionCommand();
      /**
       * <code>optional .almaz2.rpc.commands.ActionCommandBase action_command = 350;</code>
       *
       * <pre>
       * Команды для действий (оператора)
       * </pre>
       */
      ru.kodos.almaz2.rpc.commands.ActionCommandsClass.ActionCommandBase getActionCommand();
      /**
       * <code>optional .almaz2.rpc.commands.ActionCommandBase action_command = 350;</code>
       *
       * <pre>
       * Команды для действий (оператора)
       * </pre>
       */
      ru.kodos.almaz2.rpc.commands.ActionCommandsClass.ActionCommandBaseOrBuilder getActionCommandOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.RequestBase}
     */
    public static final class RequestBase extends
        com.google.protobuf.GeneratedMessage
        implements RequestBaseOrBuilder {
      // Use RequestBase.newBuilder() to construct.
      private RequestBase(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private RequestBase(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final RequestBase defaultInstance;
      public static RequestBase getDefaultInstance() {
        return defaultInstance;
      }

      public RequestBase getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private RequestBase(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        int mutable_bitField1_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = header_.toBuilder();
                }
                header_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(header_);
                  header_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
              case 18: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                  subBuilder = auth_.toBuilder();
                }
                auth_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(auth_);
                  auth_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
              case 26: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest.Builder subBuilder = null;
                if (((bitField0_ & 0x00000004) == 0x00000004)) {
                  subBuilder = userLogin_.toBuilder();
                }
                userLogin_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(userLogin_);
                  userLogin_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000004;
                break;
              }
              case 34: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest.Builder subBuilder = null;
                if (((bitField0_ & 0x00000008) == 0x00000008)) {
                  subBuilder = userLogout_.toBuilder();
                }
                userLogout_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(userLogout_);
                  userLogout_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000008;
                break;
              }
              case 42: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport.Builder subBuilder = null;
                if (((bitField0_ & 0x00000010) == 0x00000010)) {
                  subBuilder = addControlObjectPassport_.toBuilder();
                }
                addControlObjectPassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addControlObjectPassport_);
                  addControlObjectPassport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000010;
                break;
              }
              case 50: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport.Builder subBuilder = null;
                if (((bitField0_ & 0x00000020) == 0x00000020)) {
                  subBuilder = updControlObjectPassport_.toBuilder();
                }
                updControlObjectPassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updControlObjectPassport_);
                  updControlObjectPassport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000020;
                break;
              }
              case 58: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport.Builder subBuilder = null;
                if (((bitField0_ & 0x00000040) == 0x00000040)) {
                  subBuilder = delControlObjectPassport_.toBuilder();
                }
                delControlObjectPassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(delControlObjectPassport_);
                  delControlObjectPassport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000040;
                break;
              }
              case 66: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport.Builder subBuilder = null;
                if (((bitField0_ & 0x00000080) == 0x00000080)) {
                  subBuilder = addEquipmentPassport_.toBuilder();
                }
                addEquipmentPassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addEquipmentPassport_);
                  addEquipmentPassport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000080;
                break;
              }
              case 74: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport.Builder subBuilder = null;
                if (((bitField0_ & 0x00000100) == 0x00000100)) {
                  subBuilder = updEquipmentPassport_.toBuilder();
                }
                updEquipmentPassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updEquipmentPassport_);
                  updEquipmentPassport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000100;
                break;
              }
              case 82: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport.Builder subBuilder = null;
                if (((bitField0_ & 0x00000200) == 0x00000200)) {
                  subBuilder = delEquipmentPassport_.toBuilder();
                }
                delEquipmentPassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(delEquipmentPassport_);
                  delEquipmentPassport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000200;
                break;
              }
              case 90: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer.Builder subBuilder = null;
                if (((bitField0_ & 0x00000400) == 0x00000400)) {
                  subBuilder = ackAnswer_.toBuilder();
                }
                ackAnswer_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(ackAnswer_);
                  ackAnswer_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000400;
                break;
              }
              case 98: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone.Builder subBuilder = null;
                if (((bitField0_ & 0x00000800) == 0x00000800)) {
                  subBuilder = addZone_.toBuilder();
                }
                addZone_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addZone_);
                  addZone_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000800;
                break;
              }
              case 106: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone.Builder subBuilder = null;
                if (((bitField0_ & 0x00001000) == 0x00001000)) {
                  subBuilder = updZone_.toBuilder();
                }
                updZone_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updZone_);
                  updZone_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00001000;
                break;
              }
              case 114: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone.Builder subBuilder = null;
                if (((bitField0_ & 0x00002000) == 0x00002000)) {
                  subBuilder = delZone_.toBuilder();
                }
                delZone_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(delZone_);
                  delZone_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00002000;
                break;
              }
              case 122: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport.Builder subBuilder = null;
                if (((bitField0_ & 0x00004000) == 0x00004000)) {
                  subBuilder = addClientPassport_.toBuilder();
                }
                addClientPassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addClientPassport_);
                  addClientPassport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00004000;
                break;
              }
              case 130: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport.Builder subBuilder = null;
                if (((bitField0_ & 0x00008000) == 0x00008000)) {
                  subBuilder = updClientPassport_.toBuilder();
                }
                updClientPassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updClientPassport_);
                  updClientPassport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00008000;
                break;
              }
              case 138: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport.Builder subBuilder = null;
                if (((bitField0_ & 0x00010000) == 0x00010000)) {
                  subBuilder = delClientPassport_.toBuilder();
                }
                delClientPassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(delClientPassport_);
                  delClientPassport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00010000;
                break;
              }
              case 154: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport.Builder subBuilder = null;
                if (((bitField0_ & 0x00020000) == 0x00020000)) {
                  subBuilder = addUserPassport_.toBuilder();
                }
                addUserPassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addUserPassport_);
                  addUserPassport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00020000;
                break;
              }
              case 162: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport.Builder subBuilder = null;
                if (((bitField0_ & 0x00040000) == 0x00040000)) {
                  subBuilder = updUserPassport_.toBuilder();
                }
                updUserPassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updUserPassport_);
                  updUserPassport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00040000;
                break;
              }
              case 170: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport.Builder subBuilder = null;
                if (((bitField0_ & 0x00080000) == 0x00080000)) {
                  subBuilder = delUserPassport_.toBuilder();
                }
                delUserPassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(delUserPassport_);
                  delUserPassport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00080000;
                break;
              }
              case 178: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport.Builder subBuilder = null;
                if (((bitField0_ & 0x00100000) == 0x00100000)) {
                  subBuilder = addInterfacePassport_.toBuilder();
                }
                addInterfacePassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addInterfacePassport_);
                  addInterfacePassport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00100000;
                break;
              }
              case 186: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport.Builder subBuilder = null;
                if (((bitField0_ & 0x00200000) == 0x00200000)) {
                  subBuilder = updInterfacePassport_.toBuilder();
                }
                updInterfacePassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updInterfacePassport_);
                  updInterfacePassport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00200000;
                break;
              }
              case 194: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport.Builder subBuilder = null;
                if (((bitField0_ & 0x00400000) == 0x00400000)) {
                  subBuilder = delInterfacePassport_.toBuilder();
                }
                delInterfacePassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(delInterfacePassport_);
                  delInterfacePassport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00400000;
                break;
              }
              case 202: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType.Builder subBuilder = null;
                if (((bitField0_ & 0x00800000) == 0x00800000)) {
                  subBuilder = addControlObjectPassportType_.toBuilder();
                }
                addControlObjectPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addControlObjectPassportType_);
                  addControlObjectPassportType_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00800000;
                break;
              }
              case 210: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType.Builder subBuilder = null;
                if (((bitField0_ & 0x01000000) == 0x01000000)) {
                  subBuilder = updControlObjectPassportType_.toBuilder();
                }
                updControlObjectPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updControlObjectPassportType_);
                  updControlObjectPassportType_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x01000000;
                break;
              }
              case 218: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType.Builder subBuilder = null;
                if (((bitField0_ & 0x02000000) == 0x02000000)) {
                  subBuilder = delControlObjectPassportType_.toBuilder();
                }
                delControlObjectPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(delControlObjectPassportType_);
                  delControlObjectPassportType_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x02000000;
                break;
              }
              case 226: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType.Builder subBuilder = null;
                if (((bitField0_ & 0x04000000) == 0x04000000)) {
                  subBuilder = addControlElementPassportType_.toBuilder();
                }
                addControlElementPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addControlElementPassportType_);
                  addControlElementPassportType_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x04000000;
                break;
              }
              case 234: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType.Builder subBuilder = null;
                if (((bitField0_ & 0x08000000) == 0x08000000)) {
                  subBuilder = updControlElementPassportType_.toBuilder();
                }
                updControlElementPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updControlElementPassportType_);
                  updControlElementPassportType_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x08000000;
                break;
              }
              case 242: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType.Builder subBuilder = null;
                if (((bitField0_ & 0x10000000) == 0x10000000)) {
                  subBuilder = delControlElementPassportType_.toBuilder();
                }
                delControlElementPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(delControlElementPassportType_);
                  delControlElementPassportType_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x10000000;
                break;
              }
              case 250: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType.Builder subBuilder = null;
                if (((bitField0_ & 0x20000000) == 0x20000000)) {
                  subBuilder = addEquipmentPassportType_.toBuilder();
                }
                addEquipmentPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addEquipmentPassportType_);
                  addEquipmentPassportType_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x20000000;
                break;
              }
              case 258: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType.Builder subBuilder = null;
                if (((bitField0_ & 0x40000000) == 0x40000000)) {
                  subBuilder = updEquipmentPassportType_.toBuilder();
                }
                updEquipmentPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updEquipmentPassportType_);
                  updEquipmentPassportType_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x40000000;
                break;
              }
              case 266: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType.Builder subBuilder = null;
                if (((bitField0_ & 0x80000000) == 0x80000000)) {
                  subBuilder = delEquipmentPassportType_.toBuilder();
                }
                delEquipmentPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(delEquipmentPassportType_);
                  delEquipmentPassportType_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x80000000;
                break;
              }
              case 274: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x00000001) == 0x00000001)) {
                  subBuilder = addManagedElementPassportType_.toBuilder();
                }
                addManagedElementPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addManagedElementPassportType_);
                  addManagedElementPassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00000001;
                break;
              }
              case 282: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x00000002) == 0x00000002)) {
                  subBuilder = updManagedElementPassportType_.toBuilder();
                }
                updManagedElementPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updManagedElementPassportType_);
                  updManagedElementPassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00000002;
                break;
              }
              case 290: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x00000004) == 0x00000004)) {
                  subBuilder = delManagedElementPassportType_.toBuilder();
                }
                delManagedElementPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(delManagedElementPassportType_);
                  delManagedElementPassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00000004;
                break;
              }
              case 298: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x00000008) == 0x00000008)) {
                  subBuilder = addSensorControlElementPassportType_.toBuilder();
                }
                addSensorControlElementPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addSensorControlElementPassportType_);
                  addSensorControlElementPassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00000008;
                break;
              }
              case 306: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x00000010) == 0x00000010)) {
                  subBuilder = updSensorControlElementPassportType_.toBuilder();
                }
                updSensorControlElementPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updSensorControlElementPassportType_);
                  updSensorControlElementPassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00000010;
                break;
              }
              case 314: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x00000020) == 0x00000020)) {
                  subBuilder = delSensorControlElementPassportType_.toBuilder();
                }
                delSensorControlElementPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(delSensorControlElementPassportType_);
                  delSensorControlElementPassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00000020;
                break;
              }
              case 322: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference.Builder subBuilder = null;
                if (((bitField1_ & 0x00000040) == 0x00000040)) {
                  subBuilder = addGeneralPurposeReference_.toBuilder();
                }
                addGeneralPurposeReference_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addGeneralPurposeReference_);
                  addGeneralPurposeReference_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00000040;
                break;
              }
              case 338: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference.Builder subBuilder = null;
                if (((bitField1_ & 0x00000080) == 0x00000080)) {
                  subBuilder = delGeneralPurposeReference_.toBuilder();
                }
                delGeneralPurposeReference_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(delGeneralPurposeReference_);
                  delGeneralPurposeReference_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00000080;
                break;
              }
              case 346: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord.Builder subBuilder = null;
                if (((bitField1_ & 0x00000100) == 0x00000100)) {
                  subBuilder = addGeneralPurposeReferenceRecord_.toBuilder();
                }
                addGeneralPurposeReferenceRecord_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addGeneralPurposeReferenceRecord_);
                  addGeneralPurposeReferenceRecord_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00000100;
                break;
              }
              case 354: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord.Builder subBuilder = null;
                if (((bitField1_ & 0x00000200) == 0x00000200)) {
                  subBuilder = updGeneralPurposeReferenceRecord_.toBuilder();
                }
                updGeneralPurposeReferenceRecord_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updGeneralPurposeReferenceRecord_);
                  updGeneralPurposeReferenceRecord_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00000200;
                break;
              }
              case 362: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord.Builder subBuilder = null;
                if (((bitField1_ & 0x00000400) == 0x00000400)) {
                  subBuilder = delGeneralPurposeReferenceRecord_.toBuilder();
                }
                delGeneralPurposeReferenceRecord_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(delGeneralPurposeReferenceRecord_);
                  delGeneralPurposeReferenceRecord_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00000400;
                break;
              }
              case 370: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest.Builder subBuilder = null;
                if (((bitField1_ & 0x00000800) == 0x00000800)) {
                  subBuilder = sendConfiguration_.toBuilder();
                }
                sendConfiguration_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(sendConfiguration_);
                  sendConfiguration_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00000800;
                break;
              }
              case 378: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x00001000) == 0x00001000)) {
                  subBuilder = addEquipmentLogicalInputPassportType_.toBuilder();
                }
                addEquipmentLogicalInputPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addEquipmentLogicalInputPassportType_);
                  addEquipmentLogicalInputPassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00001000;
                break;
              }
              case 386: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x00002000) == 0x00002000)) {
                  subBuilder = updEquipmentLogicalInputPassportType_.toBuilder();
                }
                updEquipmentLogicalInputPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updEquipmentLogicalInputPassportType_);
                  updEquipmentLogicalInputPassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00002000;
                break;
              }
              case 394: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x00004000) == 0x00004000)) {
                  subBuilder = delEquipmentLogicalInputPassportType_.toBuilder();
                }
                delEquipmentLogicalInputPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(delEquipmentLogicalInputPassportType_);
                  delEquipmentLogicalInputPassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00004000;
                break;
              }
              case 402: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x00008000) == 0x00008000)) {
                  subBuilder = addEquipmentLogicalOutputPassportType_.toBuilder();
                }
                addEquipmentLogicalOutputPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addEquipmentLogicalOutputPassportType_);
                  addEquipmentLogicalOutputPassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00008000;
                break;
              }
              case 410: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x00010000) == 0x00010000)) {
                  subBuilder = updEquipmentLogicalOutputPassportType_.toBuilder();
                }
                updEquipmentLogicalOutputPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updEquipmentLogicalOutputPassportType_);
                  updEquipmentLogicalOutputPassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00010000;
                break;
              }
              case 418: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x00020000) == 0x00020000)) {
                  subBuilder = delEquipmentLogicalOutputPassportType_.toBuilder();
                }
                delEquipmentLogicalOutputPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(delEquipmentLogicalOutputPassportType_);
                  delEquipmentLogicalOutputPassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00020000;
                break;
              }
              case 426: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport.Builder subBuilder = null;
                if (((bitField1_ & 0x00040000) == 0x00040000)) {
                  subBuilder = addEquipmentFirmwarePassport_.toBuilder();
                }
                addEquipmentFirmwarePassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addEquipmentFirmwarePassport_);
                  addEquipmentFirmwarePassport_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00040000;
                break;
              }
              case 434: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport.Builder subBuilder = null;
                if (((bitField1_ & 0x00080000) == 0x00080000)) {
                  subBuilder = updEquipmentFirmwarePassport_.toBuilder();
                }
                updEquipmentFirmwarePassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updEquipmentFirmwarePassport_);
                  updEquipmentFirmwarePassport_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00080000;
                break;
              }
              case 442: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport.Builder subBuilder = null;
                if (((bitField1_ & 0x00100000) == 0x00100000)) {
                  subBuilder = delEquipmentFirmwarePassport_.toBuilder();
                }
                delEquipmentFirmwarePassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(delEquipmentFirmwarePassport_);
                  delEquipmentFirmwarePassport_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00100000;
                break;
              }
              case 794: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest.Builder subBuilder = null;
                if (((bitField1_ & 0x00200000) == 0x00200000)) {
                  subBuilder = primaryAuth_.toBuilder();
                }
                primaryAuth_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(primaryAuth_);
                  primaryAuth_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00200000;
                break;
              }
              case 802: {
                ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentCommandBase.Builder subBuilder = null;
                if (((bitField1_ & 0x00400000) == 0x00400000)) {
                  subBuilder = equipmentCommand_.toBuilder();
                }
                equipmentCommand_ = input.readMessage(ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentCommandBase.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(equipmentCommand_);
                  equipmentCommand_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00400000;
                break;
              }
              case 1602: {
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase.Builder subBuilder = null;
                if (((bitField1_ & 0x00800000) == 0x00800000)) {
                  subBuilder = databaseQuery_.toBuilder();
                }
                databaseQuery_ = input.readMessage(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(databaseQuery_);
                  databaseQuery_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00800000;
                break;
              }
              case 2402: {
                ru.kodos.almaz2.rpc.commands.ControlObjectCommandsClass.ControlObjectCommandBase.Builder subBuilder = null;
                if (((bitField1_ & 0x01000000) == 0x01000000)) {
                  subBuilder = controlObjectCommand_.toBuilder();
                }
                controlObjectCommand_ = input.readMessage(ru.kodos.almaz2.rpc.commands.ControlObjectCommandsClass.ControlObjectCommandBase.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(controlObjectCommand_);
                  controlObjectCommand_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x01000000;
                break;
              }
              case 2802: {
                ru.kodos.almaz2.rpc.commands.ActionCommandsClass.ActionCommandBase.Builder subBuilder = null;
                if (((bitField1_ & 0x02000000) == 0x02000000)) {
                  subBuilder = actionCommand_.toBuilder();
                }
                actionCommand_ = input.readMessage(ru.kodos.almaz2.rpc.commands.ActionCommandsClass.ActionCommandBase.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(actionCommand_);
                  actionCommand_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x02000000;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_RequestBase_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_RequestBase_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase.Builder.class);
      }

      public static com.google.protobuf.Parser<RequestBase> PARSER =
          new com.google.protobuf.AbstractParser<RequestBase>() {
        public RequestBase parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new RequestBase(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<RequestBase> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      private int bitField1_;
      // optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;
      public static final int HEADER_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header header_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;</code>
       */
      public boolean hasHeader() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header getHeader() {
        return header_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.HeaderOrBuilder getHeaderOrBuilder() {
        return header_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AuthRequest auth = 2;
      public static final int AUTH_FIELD_NUMBER = 2;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest auth_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AuthRequest auth = 2;</code>
       */
      public boolean hasAuth() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AuthRequest auth = 2;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest getAuth() {
        return auth_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AuthRequest auth = 2;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequestOrBuilder getAuthOrBuilder() {
        return auth_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UserLoginRequest user_login = 3;
      public static final int USER_LOGIN_FIELD_NUMBER = 3;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest userLogin_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginRequest user_login = 3;</code>
       */
      public boolean hasUserLogin() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginRequest user_login = 3;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest getUserLogin() {
        return userLogin_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginRequest user_login = 3;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequestOrBuilder getUserLoginOrBuilder() {
        return userLogin_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UserLogoutRequest user_logout = 4;
      public static final int USER_LOGOUT_FIELD_NUMBER = 4;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest userLogout_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLogoutRequest user_logout = 4;</code>
       */
      public boolean hasUserLogout() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLogoutRequest user_logout = 4;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest getUserLogout() {
        return userLogout_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLogoutRequest user_logout = 4;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequestOrBuilder getUserLogoutOrBuilder() {
        return userLogout_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;
      public static final int ADD_CONTROL_OBJECT_PASSPORT_FIELD_NUMBER = 5;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport addControlObjectPassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;</code>
       */
      public boolean hasAddControlObjectPassport() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport getAddControlObjectPassport() {
        return addControlObjectPassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportOrBuilder getAddControlObjectPassportOrBuilder() {
        return addControlObjectPassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 6;
      public static final int UPD_CONTROL_OBJECT_PASSPORT_FIELD_NUMBER = 6;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport updControlObjectPassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 6;</code>
       */
      public boolean hasUpdControlObjectPassport() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 6;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport getUpdControlObjectPassport() {
        return updControlObjectPassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 6;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportOrBuilder getUpdControlObjectPassportOrBuilder() {
        return updControlObjectPassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 7;
      public static final int DEL_CONTROL_OBJECT_PASSPORT_FIELD_NUMBER = 7;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport delControlObjectPassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 7;</code>
       */
      public boolean hasDelControlObjectPassport() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 7;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport getDelControlObjectPassport() {
        return delControlObjectPassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 7;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportOrBuilder getDelControlObjectPassportOrBuilder() {
        return delControlObjectPassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 8;
      public static final int ADD_EQUIPMENT_PASSPORT_FIELD_NUMBER = 8;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport addEquipmentPassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 8;</code>
       */
      public boolean hasAddEquipmentPassport() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 8;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport getAddEquipmentPassport() {
        return addEquipmentPassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 8;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportOrBuilder getAddEquipmentPassportOrBuilder() {
        return addEquipmentPassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 9;
      public static final int UPD_EQUIPMENT_PASSPORT_FIELD_NUMBER = 9;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport updEquipmentPassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 9;</code>
       */
      public boolean hasUpdEquipmentPassport() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 9;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport getUpdEquipmentPassport() {
        return updEquipmentPassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 9;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportOrBuilder getUpdEquipmentPassportOrBuilder() {
        return updEquipmentPassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 10;
      public static final int DEL_EQUIPMENT_PASSPORT_FIELD_NUMBER = 10;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport delEquipmentPassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 10;</code>
       */
      public boolean hasDelEquipmentPassport() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 10;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport getDelEquipmentPassport() {
        return delEquipmentPassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 10;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportOrBuilder getDelEquipmentPassportOrBuilder() {
        return delEquipmentPassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AckAnswer ack_answer = 11;
      public static final int ACK_ANSWER_FIELD_NUMBER = 11;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer ackAnswer_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AckAnswer ack_answer = 11;</code>
       *
       * <pre>
       * ответ на аск объект
       * </pre>
       */
      public boolean hasAckAnswer() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AckAnswer ack_answer = 11;</code>
       *
       * <pre>
       * ответ на аск объект
       * </pre>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer getAckAnswer() {
        return ackAnswer_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AckAnswer ack_answer = 11;</code>
       *
       * <pre>
       * ответ на аск объект
       * </pre>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswerOrBuilder getAckAnswerOrBuilder() {
        return ackAnswer_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 12;
      public static final int ADD_ZONE_FIELD_NUMBER = 12;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone addZone_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 12;</code>
       */
      public boolean hasAddZone() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 12;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone getAddZone() {
        return addZone_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 12;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZoneOrBuilder getAddZoneOrBuilder() {
        return addZone_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 13;
      public static final int UPD_ZONE_FIELD_NUMBER = 13;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone updZone_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 13;</code>
       */
      public boolean hasUpdZone() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 13;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone getUpdZone() {
        return updZone_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 13;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZoneOrBuilder getUpdZoneOrBuilder() {
        return updZone_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 14;
      public static final int DEL_ZONE_FIELD_NUMBER = 14;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone delZone_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 14;</code>
       */
      public boolean hasDelZone() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 14;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone getDelZone() {
        return delZone_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 14;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZoneOrBuilder getDelZoneOrBuilder() {
        return delZone_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 15;
      public static final int ADD_CLIENT_PASSPORT_FIELD_NUMBER = 15;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport addClientPassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 15;</code>
       */
      public boolean hasAddClientPassport() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 15;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport getAddClientPassport() {
        return addClientPassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 15;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassportOrBuilder getAddClientPassportOrBuilder() {
        return addClientPassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 16;
      public static final int UPD_CLIENT_PASSPORT_FIELD_NUMBER = 16;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport updClientPassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 16;</code>
       */
      public boolean hasUpdClientPassport() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 16;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport getUpdClientPassport() {
        return updClientPassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 16;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassportOrBuilder getUpdClientPassportOrBuilder() {
        return updClientPassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 17;
      public static final int DEL_CLIENT_PASSPORT_FIELD_NUMBER = 17;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport delClientPassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 17;</code>
       */
      public boolean hasDelClientPassport() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 17;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport getDelClientPassport() {
        return delClientPassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 17;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassportOrBuilder getDelClientPassportOrBuilder() {
        return delClientPassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 19;
      public static final int ADD_USER_PASSPORT_FIELD_NUMBER = 19;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport addUserPassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 19;</code>
       */
      public boolean hasAddUserPassport() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 19;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport getAddUserPassport() {
        return addUserPassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 19;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassportOrBuilder getAddUserPassportOrBuilder() {
        return addUserPassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 20;
      public static final int UPD_USER_PASSPORT_FIELD_NUMBER = 20;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport updUserPassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 20;</code>
       */
      public boolean hasUpdUserPassport() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 20;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport getUpdUserPassport() {
        return updUserPassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 20;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassportOrBuilder getUpdUserPassportOrBuilder() {
        return updUserPassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 21;
      public static final int DEL_USER_PASSPORT_FIELD_NUMBER = 21;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport delUserPassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 21;</code>
       */
      public boolean hasDelUserPassport() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 21;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport getDelUserPassport() {
        return delUserPassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 21;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassportOrBuilder getDelUserPassportOrBuilder() {
        return delUserPassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 22;
      public static final int ADD_INTERFACE_PASSPORT_FIELD_NUMBER = 22;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport addInterfacePassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 22;</code>
       */
      public boolean hasAddInterfacePassport() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 22;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport getAddInterfacePassport() {
        return addInterfacePassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 22;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportOrBuilder getAddInterfacePassportOrBuilder() {
        return addInterfacePassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 23;
      public static final int UPD_INTERFACE_PASSPORT_FIELD_NUMBER = 23;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport updInterfacePassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 23;</code>
       */
      public boolean hasUpdInterfacePassport() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 23;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport getUpdInterfacePassport() {
        return updInterfacePassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 23;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportOrBuilder getUpdInterfacePassportOrBuilder() {
        return updInterfacePassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 24;
      public static final int DEL_INTERFACE_PASSPORT_FIELD_NUMBER = 24;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport delInterfacePassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 24;</code>
       */
      public boolean hasDelInterfacePassport() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 24;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport getDelInterfacePassport() {
        return delInterfacePassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 24;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportOrBuilder getDelInterfacePassportOrBuilder() {
        return delInterfacePassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 25;
      public static final int ADD_CONTROL_OBJECT_PASSPORT_TYPE_FIELD_NUMBER = 25;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType addControlObjectPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 25;</code>
       */
      public boolean hasAddControlObjectPassportType() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 25;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType getAddControlObjectPassportType() {
        return addControlObjectPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 25;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportTypeOrBuilder getAddControlObjectPassportTypeOrBuilder() {
        return addControlObjectPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 26;
      public static final int UPD_CONTROL_OBJECT_PASSPORT_TYPE_FIELD_NUMBER = 26;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType updControlObjectPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 26;</code>
       */
      public boolean hasUpdControlObjectPassportType() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 26;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType getUpdControlObjectPassportType() {
        return updControlObjectPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 26;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportTypeOrBuilder getUpdControlObjectPassportTypeOrBuilder() {
        return updControlObjectPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 27;
      public static final int DEL_CONTROL_OBJECT_PASSPORT_TYPE_FIELD_NUMBER = 27;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType delControlObjectPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 27;</code>
       */
      public boolean hasDelControlObjectPassportType() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 27;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType getDelControlObjectPassportType() {
        return delControlObjectPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 27;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportTypeOrBuilder getDelControlObjectPassportTypeOrBuilder() {
        return delControlObjectPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 28;
      public static final int ADD_CONTROL_ELEMENT_PASSPORT_TYPE_FIELD_NUMBER = 28;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType addControlElementPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 28;</code>
       */
      public boolean hasAddControlElementPassportType() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 28;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType getAddControlElementPassportType() {
        return addControlElementPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 28;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportTypeOrBuilder getAddControlElementPassportTypeOrBuilder() {
        return addControlElementPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 29;
      public static final int UPD_CONTROL_ELEMENT_PASSPORT_TYPE_FIELD_NUMBER = 29;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType updControlElementPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 29;</code>
       */
      public boolean hasUpdControlElementPassportType() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 29;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType getUpdControlElementPassportType() {
        return updControlElementPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 29;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportTypeOrBuilder getUpdControlElementPassportTypeOrBuilder() {
        return updControlElementPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 30;
      public static final int DEL_CONTROL_ELEMENT_PASSPORT_TYPE_FIELD_NUMBER = 30;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType delControlElementPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 30;</code>
       */
      public boolean hasDelControlElementPassportType() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 30;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType getDelControlElementPassportType() {
        return delControlElementPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 30;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportTypeOrBuilder getDelControlElementPassportTypeOrBuilder() {
        return delControlElementPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 31;
      public static final int ADD_EQUIPMENT_PASSPORT_TYPE_FIELD_NUMBER = 31;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType addEquipmentPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 31;</code>
       */
      public boolean hasAddEquipmentPassportType() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 31;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType getAddEquipmentPassportType() {
        return addEquipmentPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 31;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportTypeOrBuilder getAddEquipmentPassportTypeOrBuilder() {
        return addEquipmentPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 32;
      public static final int UPD_EQUIPMENT_PASSPORT_TYPE_FIELD_NUMBER = 32;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType updEquipmentPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 32;</code>
       */
      public boolean hasUpdEquipmentPassportType() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 32;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType getUpdEquipmentPassportType() {
        return updEquipmentPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 32;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportTypeOrBuilder getUpdEquipmentPassportTypeOrBuilder() {
        return updEquipmentPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 33;
      public static final int DEL_EQUIPMENT_PASSPORT_TYPE_FIELD_NUMBER = 33;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType delEquipmentPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 33;</code>
       */
      public boolean hasDelEquipmentPassportType() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 33;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType getDelEquipmentPassportType() {
        return delEquipmentPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 33;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportTypeOrBuilder getDelEquipmentPassportTypeOrBuilder() {
        return delEquipmentPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 34;
      public static final int ADD_MANAGED_ELEMENT_PASSPORT_TYPE_FIELD_NUMBER = 34;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType addManagedElementPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 34;</code>
       */
      public boolean hasAddManagedElementPassportType() {
        return ((bitField1_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 34;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType getAddManagedElementPassportType() {
        return addManagedElementPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 34;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportTypeOrBuilder getAddManagedElementPassportTypeOrBuilder() {
        return addManagedElementPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 35;
      public static final int UPD_MANAGED_ELEMENT_PASSPORT_TYPE_FIELD_NUMBER = 35;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType updManagedElementPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 35;</code>
       */
      public boolean hasUpdManagedElementPassportType() {
        return ((bitField1_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 35;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType getUpdManagedElementPassportType() {
        return updManagedElementPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 35;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportTypeOrBuilder getUpdManagedElementPassportTypeOrBuilder() {
        return updManagedElementPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 36;
      public static final int DEL_MANAGED_ELEMENT_PASSPORT_TYPE_FIELD_NUMBER = 36;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType delManagedElementPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 36;</code>
       */
      public boolean hasDelManagedElementPassportType() {
        return ((bitField1_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 36;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType getDelManagedElementPassportType() {
        return delManagedElementPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 36;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportTypeOrBuilder getDelManagedElementPassportTypeOrBuilder() {
        return delManagedElementPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 37;
      public static final int ADD_SENSOR_CONTROL_ELEMENT_PASSPORT_TYPE_FIELD_NUMBER = 37;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType addSensorControlElementPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 37;</code>
       */
      public boolean hasAddSensorControlElementPassportType() {
        return ((bitField1_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 37;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType getAddSensorControlElementPassportType() {
        return addSensorControlElementPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 37;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportTypeOrBuilder getAddSensorControlElementPassportTypeOrBuilder() {
        return addSensorControlElementPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 38;
      public static final int UPD_SENSOR_CONTROL_ELEMENT_PASSPORT_TYPE_FIELD_NUMBER = 38;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType updSensorControlElementPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 38;</code>
       */
      public boolean hasUpdSensorControlElementPassportType() {
        return ((bitField1_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 38;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType getUpdSensorControlElementPassportType() {
        return updSensorControlElementPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 38;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportTypeOrBuilder getUpdSensorControlElementPassportTypeOrBuilder() {
        return updSensorControlElementPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 39;
      public static final int DEL_SENSOR_CONTROL_ELEMENT_PASSPORT_TYPE_FIELD_NUMBER = 39;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType delSensorControlElementPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 39;</code>
       */
      public boolean hasDelSensorControlElementPassportType() {
        return ((bitField1_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 39;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType getDelSensorControlElementPassportType() {
        return delSensorControlElementPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 39;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportTypeOrBuilder getDelSensorControlElementPassportTypeOrBuilder() {
        return delSensorControlElementPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 40;
      public static final int ADD_GENERAL_PURPOSE_REFERENCE_FIELD_NUMBER = 40;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference addGeneralPurposeReference_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 40;</code>
       */
      public boolean hasAddGeneralPurposeReference() {
        return ((bitField1_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 40;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference getAddGeneralPurposeReference() {
        return addGeneralPurposeReference_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 40;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceOrBuilder getAddGeneralPurposeReferenceOrBuilder() {
        return addGeneralPurposeReference_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 42;
      public static final int DEL_GENERAL_PURPOSE_REFERENCE_FIELD_NUMBER = 42;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference delGeneralPurposeReference_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 42;</code>
       *
       * <pre>
       *optional UpdGeneralPurposeReference upd_general_purpose_reference = 41;
       * </pre>
       */
      public boolean hasDelGeneralPurposeReference() {
        return ((bitField1_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 42;</code>
       *
       * <pre>
       *optional UpdGeneralPurposeReference upd_general_purpose_reference = 41;
       * </pre>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference getDelGeneralPurposeReference() {
        return delGeneralPurposeReference_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 42;</code>
       *
       * <pre>
       *optional UpdGeneralPurposeReference upd_general_purpose_reference = 41;
       * </pre>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceOrBuilder getDelGeneralPurposeReferenceOrBuilder() {
        return delGeneralPurposeReference_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 43;
      public static final int ADD_GENERAL_PURPOSE_REFERENCE_RECORD_FIELD_NUMBER = 43;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord addGeneralPurposeReferenceRecord_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 43;</code>
       */
      public boolean hasAddGeneralPurposeReferenceRecord() {
        return ((bitField1_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 43;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord getAddGeneralPurposeReferenceRecord() {
        return addGeneralPurposeReferenceRecord_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 43;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecordOrBuilder getAddGeneralPurposeReferenceRecordOrBuilder() {
        return addGeneralPurposeReferenceRecord_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 44;
      public static final int UPD_GENERAL_PURPOSE_REFERENCE_RECORD_FIELD_NUMBER = 44;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord updGeneralPurposeReferenceRecord_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 44;</code>
       */
      public boolean hasUpdGeneralPurposeReferenceRecord() {
        return ((bitField1_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 44;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord getUpdGeneralPurposeReferenceRecord() {
        return updGeneralPurposeReferenceRecord_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 44;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecordOrBuilder getUpdGeneralPurposeReferenceRecordOrBuilder() {
        return updGeneralPurposeReferenceRecord_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 45;
      public static final int DEL_GENERAL_PURPOSE_REFERENCE_RECORD_FIELD_NUMBER = 45;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord delGeneralPurposeReferenceRecord_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 45;</code>
       */
      public boolean hasDelGeneralPurposeReferenceRecord() {
        return ((bitField1_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 45;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord getDelGeneralPurposeReferenceRecord() {
        return delGeneralPurposeReferenceRecord_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 45;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecordOrBuilder getDelGeneralPurposeReferenceRecordOrBuilder() {
        return delGeneralPurposeReferenceRecord_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.SendConfigurationRequest send_configuration = 46;
      public static final int SEND_CONFIGURATION_FIELD_NUMBER = 46;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest sendConfiguration_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.SendConfigurationRequest send_configuration = 46;</code>
       */
      public boolean hasSendConfiguration() {
        return ((bitField1_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.SendConfigurationRequest send_configuration = 46;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest getSendConfiguration() {
        return sendConfiguration_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.SendConfigurationRequest send_configuration = 46;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequestOrBuilder getSendConfigurationOrBuilder() {
        return sendConfiguration_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 47;
      public static final int ADD_EQUIPMENT_LOGICAL_INPUT_PASSPORT_TYPE_FIELD_NUMBER = 47;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType addEquipmentLogicalInputPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 47;</code>
       */
      public boolean hasAddEquipmentLogicalInputPassportType() {
        return ((bitField1_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 47;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType getAddEquipmentLogicalInputPassportType() {
        return addEquipmentLogicalInputPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 47;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportTypeOrBuilder getAddEquipmentLogicalInputPassportTypeOrBuilder() {
        return addEquipmentLogicalInputPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 48;
      public static final int UPD_EQUIPMENT_LOGICAL_INPUT_PASSPORT_TYPE_FIELD_NUMBER = 48;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType updEquipmentLogicalInputPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 48;</code>
       */
      public boolean hasUpdEquipmentLogicalInputPassportType() {
        return ((bitField1_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 48;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType getUpdEquipmentLogicalInputPassportType() {
        return updEquipmentLogicalInputPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 48;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportTypeOrBuilder getUpdEquipmentLogicalInputPassportTypeOrBuilder() {
        return updEquipmentLogicalInputPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 49;
      public static final int DEL_EQUIPMENT_LOGICAL_INPUT_PASSPORT_TYPE_FIELD_NUMBER = 49;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType delEquipmentLogicalInputPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 49;</code>
       */
      public boolean hasDelEquipmentLogicalInputPassportType() {
        return ((bitField1_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 49;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType getDelEquipmentLogicalInputPassportType() {
        return delEquipmentLogicalInputPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 49;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportTypeOrBuilder getDelEquipmentLogicalInputPassportTypeOrBuilder() {
        return delEquipmentLogicalInputPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 50;
      public static final int ADD_EQUIPMENT_LOGICAL_OUTPUT_PASSPORT_TYPE_FIELD_NUMBER = 50;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType addEquipmentLogicalOutputPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 50;</code>
       */
      public boolean hasAddEquipmentLogicalOutputPassportType() {
        return ((bitField1_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 50;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType getAddEquipmentLogicalOutputPassportType() {
        return addEquipmentLogicalOutputPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 50;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportTypeOrBuilder getAddEquipmentLogicalOutputPassportTypeOrBuilder() {
        return addEquipmentLogicalOutputPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 51;
      public static final int UPD_EQUIPMENT_LOGICAL_OUTPUT_PASSPORT_TYPE_FIELD_NUMBER = 51;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType updEquipmentLogicalOutputPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 51;</code>
       */
      public boolean hasUpdEquipmentLogicalOutputPassportType() {
        return ((bitField1_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 51;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType getUpdEquipmentLogicalOutputPassportType() {
        return updEquipmentLogicalOutputPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 51;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportTypeOrBuilder getUpdEquipmentLogicalOutputPassportTypeOrBuilder() {
        return updEquipmentLogicalOutputPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 52;
      public static final int DEL_EQUIPMENT_LOGICAL_OUTPUT_PASSPORT_TYPE_FIELD_NUMBER = 52;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType delEquipmentLogicalOutputPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 52;</code>
       */
      public boolean hasDelEquipmentLogicalOutputPassportType() {
        return ((bitField1_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 52;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType getDelEquipmentLogicalOutputPassportType() {
        return delEquipmentLogicalOutputPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 52;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportTypeOrBuilder getDelEquipmentLogicalOutputPassportTypeOrBuilder() {
        return delEquipmentLogicalOutputPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 53;
      public static final int ADD_EQUIPMENT_FIRMWARE_PASSPORT_FIELD_NUMBER = 53;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport addEquipmentFirmwarePassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 53;</code>
       */
      public boolean hasAddEquipmentFirmwarePassport() {
        return ((bitField1_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 53;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport getAddEquipmentFirmwarePassport() {
        return addEquipmentFirmwarePassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 53;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassportOrBuilder getAddEquipmentFirmwarePassportOrBuilder() {
        return addEquipmentFirmwarePassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 54;
      public static final int UPD_EQUIPMENT_FIRMWARE_PASSPORT_FIELD_NUMBER = 54;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport updEquipmentFirmwarePassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 54;</code>
       */
      public boolean hasUpdEquipmentFirmwarePassport() {
        return ((bitField1_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 54;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport getUpdEquipmentFirmwarePassport() {
        return updEquipmentFirmwarePassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 54;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassportOrBuilder getUpdEquipmentFirmwarePassportOrBuilder() {
        return updEquipmentFirmwarePassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 55;
      public static final int DEL_EQUIPMENT_FIRMWARE_PASSPORT_FIELD_NUMBER = 55;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport delEquipmentFirmwarePassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 55;</code>
       */
      public boolean hasDelEquipmentFirmwarePassport() {
        return ((bitField1_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 55;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport getDelEquipmentFirmwarePassport() {
        return delEquipmentFirmwarePassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 55;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassportOrBuilder getDelEquipmentFirmwarePassportOrBuilder() {
        return delEquipmentFirmwarePassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthRequest primary_auth = 99;
      public static final int PRIMARY_AUTH_FIELD_NUMBER = 99;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest primaryAuth_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthRequest primary_auth = 99;</code>
       *
       * <pre>
       * Первичная авторизация клиента.
       * </pre>
       */
      public boolean hasPrimaryAuth() {
        return ((bitField1_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthRequest primary_auth = 99;</code>
       *
       * <pre>
       * Первичная авторизация клиента.
       * </pre>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest getPrimaryAuth() {
        return primaryAuth_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthRequest primary_auth = 99;</code>
       *
       * <pre>
       * Первичная авторизация клиента.
       * </pre>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequestOrBuilder getPrimaryAuthOrBuilder() {
        return primaryAuth_;
      }

      // optional .almaz2.rpc.commands.EquipmentCommandBase equipment_command = 100;
      public static final int EQUIPMENT_COMMAND_FIELD_NUMBER = 100;
      private ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentCommandBase equipmentCommand_;
      /**
       * <code>optional .almaz2.rpc.commands.EquipmentCommandBase equipment_command = 100;</code>
       *
       * <pre>
       * Команды для оборудования объекта.
       * </pre>
       */
      public boolean hasEquipmentCommand() {
        return ((bitField1_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.EquipmentCommandBase equipment_command = 100;</code>
       *
       * <pre>
       * Команды для оборудования объекта.
       * </pre>
       */
      public ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentCommandBase getEquipmentCommand() {
        return equipmentCommand_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.EquipmentCommandBase equipment_command = 100;</code>
       *
       * <pre>
       * Команды для оборудования объекта.
       * </pre>
       */
      public ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentCommandBaseOrBuilder getEquipmentCommandOrBuilder() {
        return equipmentCommand_;
      }

      // optional .almaz2.rpc.commands.DatabaseQueryBase database_query = 200;
      public static final int DATABASE_QUERY_FIELD_NUMBER = 200;
      private ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase databaseQuery_;
      /**
       * <code>optional .almaz2.rpc.commands.DatabaseQueryBase database_query = 200;</code>
       *
       * <pre>
       * Команды для базы данных.
       * </pre>
       */
      public boolean hasDatabaseQuery() {
        return ((bitField1_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.DatabaseQueryBase database_query = 200;</code>
       *
       * <pre>
       * Команды для базы данных.
       * </pre>
       */
      public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase getDatabaseQuery() {
        return databaseQuery_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.DatabaseQueryBase database_query = 200;</code>
       *
       * <pre>
       * Команды для базы данных.
       * </pre>
       */
      public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBaseOrBuilder getDatabaseQueryOrBuilder() {
        return databaseQuery_;
      }

      // optional .almaz2.rpc.commands.ControlObjectCommandBase control_object_command = 300;
      public static final int CONTROL_OBJECT_COMMAND_FIELD_NUMBER = 300;
      private ru.kodos.almaz2.rpc.commands.ControlObjectCommandsClass.ControlObjectCommandBase controlObjectCommand_;
      /**
       * <code>optional .almaz2.rpc.commands.ControlObjectCommandBase control_object_command = 300;</code>
       *
       * <pre>
       * Команды для контролируемого объекта.
       * </pre>
       */
      public boolean hasControlObjectCommand() {
        return ((bitField1_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.ControlObjectCommandBase control_object_command = 300;</code>
       *
       * <pre>
       * Команды для контролируемого объекта.
       * </pre>
       */
      public ru.kodos.almaz2.rpc.commands.ControlObjectCommandsClass.ControlObjectCommandBase getControlObjectCommand() {
        return controlObjectCommand_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.ControlObjectCommandBase control_object_command = 300;</code>
       *
       * <pre>
       * Команды для контролируемого объекта.
       * </pre>
       */
      public ru.kodos.almaz2.rpc.commands.ControlObjectCommandsClass.ControlObjectCommandBaseOrBuilder getControlObjectCommandOrBuilder() {
        return controlObjectCommand_;
      }

      // optional .almaz2.rpc.commands.ActionCommandBase action_command = 350;
      public static final int ACTION_COMMAND_FIELD_NUMBER = 350;
      private ru.kodos.almaz2.rpc.commands.ActionCommandsClass.ActionCommandBase actionCommand_;
      /**
       * <code>optional .almaz2.rpc.commands.ActionCommandBase action_command = 350;</code>
       *
       * <pre>
       * Команды для действий (оператора)
       * </pre>
       */
      public boolean hasActionCommand() {
        return ((bitField1_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.ActionCommandBase action_command = 350;</code>
       *
       * <pre>
       * Команды для действий (оператора)
       * </pre>
       */
      public ru.kodos.almaz2.rpc.commands.ActionCommandsClass.ActionCommandBase getActionCommand() {
        return actionCommand_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.ActionCommandBase action_command = 350;</code>
       *
       * <pre>
       * Команды для действий (оператора)
       * </pre>
       */
      public ru.kodos.almaz2.rpc.commands.ActionCommandsClass.ActionCommandBaseOrBuilder getActionCommandOrBuilder() {
        return actionCommand_;
      }

      private void initFields() {
        header_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header.getDefaultInstance();
        auth_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest.getDefaultInstance();
        userLogin_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest.getDefaultInstance();
        userLogout_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest.getDefaultInstance();
        addControlObjectPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport.getDefaultInstance();
        updControlObjectPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport.getDefaultInstance();
        delControlObjectPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport.getDefaultInstance();
        addEquipmentPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport.getDefaultInstance();
        updEquipmentPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport.getDefaultInstance();
        delEquipmentPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport.getDefaultInstance();
        ackAnswer_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer.getDefaultInstance();
        addZone_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone.getDefaultInstance();
        updZone_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone.getDefaultInstance();
        delZone_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone.getDefaultInstance();
        addClientPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport.getDefaultInstance();
        updClientPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport.getDefaultInstance();
        delClientPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport.getDefaultInstance();
        addUserPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport.getDefaultInstance();
        updUserPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport.getDefaultInstance();
        delUserPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport.getDefaultInstance();
        addInterfacePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport.getDefaultInstance();
        updInterfacePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport.getDefaultInstance();
        delInterfacePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport.getDefaultInstance();
        addControlObjectPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType.getDefaultInstance();
        updControlObjectPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType.getDefaultInstance();
        delControlObjectPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType.getDefaultInstance();
        addControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType.getDefaultInstance();
        updControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType.getDefaultInstance();
        delControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType.getDefaultInstance();
        addEquipmentPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType.getDefaultInstance();
        updEquipmentPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType.getDefaultInstance();
        delEquipmentPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType.getDefaultInstance();
        addManagedElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType.getDefaultInstance();
        updManagedElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType.getDefaultInstance();
        delManagedElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType.getDefaultInstance();
        addSensorControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType.getDefaultInstance();
        updSensorControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType.getDefaultInstance();
        delSensorControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType.getDefaultInstance();
        addGeneralPurposeReference_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference.getDefaultInstance();
        delGeneralPurposeReference_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference.getDefaultInstance();
        addGeneralPurposeReferenceRecord_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord.getDefaultInstance();
        updGeneralPurposeReferenceRecord_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord.getDefaultInstance();
        delGeneralPurposeReferenceRecord_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord.getDefaultInstance();
        sendConfiguration_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest.getDefaultInstance();
        addEquipmentLogicalInputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType.getDefaultInstance();
        updEquipmentLogicalInputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType.getDefaultInstance();
        delEquipmentLogicalInputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType.getDefaultInstance();
        addEquipmentLogicalOutputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType.getDefaultInstance();
        updEquipmentLogicalOutputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType.getDefaultInstance();
        delEquipmentLogicalOutputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType.getDefaultInstance();
        addEquipmentFirmwarePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport.getDefaultInstance();
        updEquipmentFirmwarePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport.getDefaultInstance();
        delEquipmentFirmwarePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport.getDefaultInstance();
        primaryAuth_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest.getDefaultInstance();
        equipmentCommand_ = ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentCommandBase.getDefaultInstance();
        databaseQuery_ = ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase.getDefaultInstance();
        controlObjectCommand_ = ru.kodos.almaz2.rpc.commands.ControlObjectCommandsClass.ControlObjectCommandBase.getDefaultInstance();
        actionCommand_ = ru.kodos.almaz2.rpc.commands.ActionCommandsClass.ActionCommandBase.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasAddControlObjectPassport()) {
          if (!getAddControlObjectPassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasUpdControlObjectPassport()) {
          if (!getUpdControlObjectPassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasAddEquipmentPassport()) {
          if (!getAddEquipmentPassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasUpdEquipmentPassport()) {
          if (!getUpdEquipmentPassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasAddClientPassport()) {
          if (!getAddClientPassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasUpdClientPassport()) {
          if (!getUpdClientPassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasAddUserPassport()) {
          if (!getAddUserPassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasUpdUserPassport()) {
          if (!getUpdUserPassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasAddInterfacePassport()) {
          if (!getAddInterfacePassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasUpdInterfacePassport()) {
          if (!getUpdInterfacePassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasAddControlObjectPassportType()) {
          if (!getAddControlObjectPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasUpdControlObjectPassportType()) {
          if (!getUpdControlObjectPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasAddControlElementPassportType()) {
          if (!getAddControlElementPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasUpdControlElementPassportType()) {
          if (!getUpdControlElementPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasAddEquipmentPassportType()) {
          if (!getAddEquipmentPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasUpdEquipmentPassportType()) {
          if (!getUpdEquipmentPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasAddManagedElementPassportType()) {
          if (!getAddManagedElementPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasUpdManagedElementPassportType()) {
          if (!getUpdManagedElementPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasAddSensorControlElementPassportType()) {
          if (!getAddSensorControlElementPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasUpdSensorControlElementPassportType()) {
          if (!getUpdSensorControlElementPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasAddGeneralPurposeReference()) {
          if (!getAddGeneralPurposeReference().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasAddEquipmentLogicalInputPassportType()) {
          if (!getAddEquipmentLogicalInputPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasUpdEquipmentLogicalInputPassportType()) {
          if (!getUpdEquipmentLogicalInputPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasAddEquipmentLogicalOutputPassportType()) {
          if (!getAddEquipmentLogicalOutputPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasUpdEquipmentLogicalOutputPassportType()) {
          if (!getUpdEquipmentLogicalOutputPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasAddEquipmentFirmwarePassport()) {
          if (!getAddEquipmentFirmwarePassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasUpdEquipmentFirmwarePassport()) {
          if (!getUpdEquipmentFirmwarePassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, header_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeMessage(2, auth_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeMessage(3, userLogin_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeMessage(4, userLogout_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          output.writeMessage(5, addControlObjectPassport_);
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          output.writeMessage(6, updControlObjectPassport_);
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          output.writeMessage(7, delControlObjectPassport_);
        }
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          output.writeMessage(8, addEquipmentPassport_);
        }
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          output.writeMessage(9, updEquipmentPassport_);
        }
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          output.writeMessage(10, delEquipmentPassport_);
        }
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          output.writeMessage(11, ackAnswer_);
        }
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          output.writeMessage(12, addZone_);
        }
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          output.writeMessage(13, updZone_);
        }
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          output.writeMessage(14, delZone_);
        }
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          output.writeMessage(15, addClientPassport_);
        }
        if (((bitField0_ & 0x00008000) == 0x00008000)) {
          output.writeMessage(16, updClientPassport_);
        }
        if (((bitField0_ & 0x00010000) == 0x00010000)) {
          output.writeMessage(17, delClientPassport_);
        }
        if (((bitField0_ & 0x00020000) == 0x00020000)) {
          output.writeMessage(19, addUserPassport_);
        }
        if (((bitField0_ & 0x00040000) == 0x00040000)) {
          output.writeMessage(20, updUserPassport_);
        }
        if (((bitField0_ & 0x00080000) == 0x00080000)) {
          output.writeMessage(21, delUserPassport_);
        }
        if (((bitField0_ & 0x00100000) == 0x00100000)) {
          output.writeMessage(22, addInterfacePassport_);
        }
        if (((bitField0_ & 0x00200000) == 0x00200000)) {
          output.writeMessage(23, updInterfacePassport_);
        }
        if (((bitField0_ & 0x00400000) == 0x00400000)) {
          output.writeMessage(24, delInterfacePassport_);
        }
        if (((bitField0_ & 0x00800000) == 0x00800000)) {
          output.writeMessage(25, addControlObjectPassportType_);
        }
        if (((bitField0_ & 0x01000000) == 0x01000000)) {
          output.writeMessage(26, updControlObjectPassportType_);
        }
        if (((bitField0_ & 0x02000000) == 0x02000000)) {
          output.writeMessage(27, delControlObjectPassportType_);
        }
        if (((bitField0_ & 0x04000000) == 0x04000000)) {
          output.writeMessage(28, addControlElementPassportType_);
        }
        if (((bitField0_ & 0x08000000) == 0x08000000)) {
          output.writeMessage(29, updControlElementPassportType_);
        }
        if (((bitField0_ & 0x10000000) == 0x10000000)) {
          output.writeMessage(30, delControlElementPassportType_);
        }
        if (((bitField0_ & 0x20000000) == 0x20000000)) {
          output.writeMessage(31, addEquipmentPassportType_);
        }
        if (((bitField0_ & 0x40000000) == 0x40000000)) {
          output.writeMessage(32, updEquipmentPassportType_);
        }
        if (((bitField0_ & 0x80000000) == 0x80000000)) {
          output.writeMessage(33, delEquipmentPassportType_);
        }
        if (((bitField1_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(34, addManagedElementPassportType_);
        }
        if (((bitField1_ & 0x00000002) == 0x00000002)) {
          output.writeMessage(35, updManagedElementPassportType_);
        }
        if (((bitField1_ & 0x00000004) == 0x00000004)) {
          output.writeMessage(36, delManagedElementPassportType_);
        }
        if (((bitField1_ & 0x00000008) == 0x00000008)) {
          output.writeMessage(37, addSensorControlElementPassportType_);
        }
        if (((bitField1_ & 0x00000010) == 0x00000010)) {
          output.writeMessage(38, updSensorControlElementPassportType_);
        }
        if (((bitField1_ & 0x00000020) == 0x00000020)) {
          output.writeMessage(39, delSensorControlElementPassportType_);
        }
        if (((bitField1_ & 0x00000040) == 0x00000040)) {
          output.writeMessage(40, addGeneralPurposeReference_);
        }
        if (((bitField1_ & 0x00000080) == 0x00000080)) {
          output.writeMessage(42, delGeneralPurposeReference_);
        }
        if (((bitField1_ & 0x00000100) == 0x00000100)) {
          output.writeMessage(43, addGeneralPurposeReferenceRecord_);
        }
        if (((bitField1_ & 0x00000200) == 0x00000200)) {
          output.writeMessage(44, updGeneralPurposeReferenceRecord_);
        }
        if (((bitField1_ & 0x00000400) == 0x00000400)) {
          output.writeMessage(45, delGeneralPurposeReferenceRecord_);
        }
        if (((bitField1_ & 0x00000800) == 0x00000800)) {
          output.writeMessage(46, sendConfiguration_);
        }
        if (((bitField1_ & 0x00001000) == 0x00001000)) {
          output.writeMessage(47, addEquipmentLogicalInputPassportType_);
        }
        if (((bitField1_ & 0x00002000) == 0x00002000)) {
          output.writeMessage(48, updEquipmentLogicalInputPassportType_);
        }
        if (((bitField1_ & 0x00004000) == 0x00004000)) {
          output.writeMessage(49, delEquipmentLogicalInputPassportType_);
        }
        if (((bitField1_ & 0x00008000) == 0x00008000)) {
          output.writeMessage(50, addEquipmentLogicalOutputPassportType_);
        }
        if (((bitField1_ & 0x00010000) == 0x00010000)) {
          output.writeMessage(51, updEquipmentLogicalOutputPassportType_);
        }
        if (((bitField1_ & 0x00020000) == 0x00020000)) {
          output.writeMessage(52, delEquipmentLogicalOutputPassportType_);
        }
        if (((bitField1_ & 0x00040000) == 0x00040000)) {
          output.writeMessage(53, addEquipmentFirmwarePassport_);
        }
        if (((bitField1_ & 0x00080000) == 0x00080000)) {
          output.writeMessage(54, updEquipmentFirmwarePassport_);
        }
        if (((bitField1_ & 0x00100000) == 0x00100000)) {
          output.writeMessage(55, delEquipmentFirmwarePassport_);
        }
        if (((bitField1_ & 0x00200000) == 0x00200000)) {
          output.writeMessage(99, primaryAuth_);
        }
        if (((bitField1_ & 0x00400000) == 0x00400000)) {
          output.writeMessage(100, equipmentCommand_);
        }
        if (((bitField1_ & 0x00800000) == 0x00800000)) {
          output.writeMessage(200, databaseQuery_);
        }
        if (((bitField1_ & 0x01000000) == 0x01000000)) {
          output.writeMessage(300, controlObjectCommand_);
        }
        if (((bitField1_ & 0x02000000) == 0x02000000)) {
          output.writeMessage(350, actionCommand_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, header_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, auth_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, userLogin_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, userLogout_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(5, addControlObjectPassport_);
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(6, updControlObjectPassport_);
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(7, delControlObjectPassport_);
        }
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(8, addEquipmentPassport_);
        }
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(9, updEquipmentPassport_);
        }
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10, delEquipmentPassport_);
        }
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(11, ackAnswer_);
        }
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(12, addZone_);
        }
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(13, updZone_);
        }
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(14, delZone_);
        }
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(15, addClientPassport_);
        }
        if (((bitField0_ & 0x00008000) == 0x00008000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(16, updClientPassport_);
        }
        if (((bitField0_ & 0x00010000) == 0x00010000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(17, delClientPassport_);
        }
        if (((bitField0_ & 0x00020000) == 0x00020000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(19, addUserPassport_);
        }
        if (((bitField0_ & 0x00040000) == 0x00040000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(20, updUserPassport_);
        }
        if (((bitField0_ & 0x00080000) == 0x00080000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(21, delUserPassport_);
        }
        if (((bitField0_ & 0x00100000) == 0x00100000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(22, addInterfacePassport_);
        }
        if (((bitField0_ & 0x00200000) == 0x00200000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(23, updInterfacePassport_);
        }
        if (((bitField0_ & 0x00400000) == 0x00400000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(24, delInterfacePassport_);
        }
        if (((bitField0_ & 0x00800000) == 0x00800000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(25, addControlObjectPassportType_);
        }
        if (((bitField0_ & 0x01000000) == 0x01000000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(26, updControlObjectPassportType_);
        }
        if (((bitField0_ & 0x02000000) == 0x02000000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(27, delControlObjectPassportType_);
        }
        if (((bitField0_ & 0x04000000) == 0x04000000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(28, addControlElementPassportType_);
        }
        if (((bitField0_ & 0x08000000) == 0x08000000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(29, updControlElementPassportType_);
        }
        if (((bitField0_ & 0x10000000) == 0x10000000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(30, delControlElementPassportType_);
        }
        if (((bitField0_ & 0x20000000) == 0x20000000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(31, addEquipmentPassportType_);
        }
        if (((bitField0_ & 0x40000000) == 0x40000000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(32, updEquipmentPassportType_);
        }
        if (((bitField0_ & 0x80000000) == 0x80000000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(33, delEquipmentPassportType_);
        }
        if (((bitField1_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(34, addManagedElementPassportType_);
        }
        if (((bitField1_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(35, updManagedElementPassportType_);
        }
        if (((bitField1_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(36, delManagedElementPassportType_);
        }
        if (((bitField1_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(37, addSensorControlElementPassportType_);
        }
        if (((bitField1_ & 0x00000010) == 0x00000010)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(38, updSensorControlElementPassportType_);
        }
        if (((bitField1_ & 0x00000020) == 0x00000020)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(39, delSensorControlElementPassportType_);
        }
        if (((bitField1_ & 0x00000040) == 0x00000040)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(40, addGeneralPurposeReference_);
        }
        if (((bitField1_ & 0x00000080) == 0x00000080)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(42, delGeneralPurposeReference_);
        }
        if (((bitField1_ & 0x00000100) == 0x00000100)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(43, addGeneralPurposeReferenceRecord_);
        }
        if (((bitField1_ & 0x00000200) == 0x00000200)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(44, updGeneralPurposeReferenceRecord_);
        }
        if (((bitField1_ & 0x00000400) == 0x00000400)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(45, delGeneralPurposeReferenceRecord_);
        }
        if (((bitField1_ & 0x00000800) == 0x00000800)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(46, sendConfiguration_);
        }
        if (((bitField1_ & 0x00001000) == 0x00001000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(47, addEquipmentLogicalInputPassportType_);
        }
        if (((bitField1_ & 0x00002000) == 0x00002000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(48, updEquipmentLogicalInputPassportType_);
        }
        if (((bitField1_ & 0x00004000) == 0x00004000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(49, delEquipmentLogicalInputPassportType_);
        }
        if (((bitField1_ & 0x00008000) == 0x00008000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(50, addEquipmentLogicalOutputPassportType_);
        }
        if (((bitField1_ & 0x00010000) == 0x00010000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(51, updEquipmentLogicalOutputPassportType_);
        }
        if (((bitField1_ & 0x00020000) == 0x00020000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(52, delEquipmentLogicalOutputPassportType_);
        }
        if (((bitField1_ & 0x00040000) == 0x00040000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(53, addEquipmentFirmwarePassport_);
        }
        if (((bitField1_ & 0x00080000) == 0x00080000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(54, updEquipmentFirmwarePassport_);
        }
        if (((bitField1_ & 0x00100000) == 0x00100000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(55, delEquipmentFirmwarePassport_);
        }
        if (((bitField1_ & 0x00200000) == 0x00200000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(99, primaryAuth_);
        }
        if (((bitField1_ & 0x00400000) == 0x00400000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(100, equipmentCommand_);
        }
        if (((bitField1_ & 0x00800000) == 0x00800000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(200, databaseQuery_);
        }
        if (((bitField1_ & 0x01000000) == 0x01000000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(300, controlObjectCommand_);
        }
        if (((bitField1_ & 0x02000000) == 0x02000000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(350, actionCommand_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.RequestBase}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBaseOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_RequestBase_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_RequestBase_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getHeaderFieldBuilder();
            getAuthFieldBuilder();
            getUserLoginFieldBuilder();
            getUserLogoutFieldBuilder();
            getAddControlObjectPassportFieldBuilder();
            getUpdControlObjectPassportFieldBuilder();
            getDelControlObjectPassportFieldBuilder();
            getAddEquipmentPassportFieldBuilder();
            getUpdEquipmentPassportFieldBuilder();
            getDelEquipmentPassportFieldBuilder();
            getAckAnswerFieldBuilder();
            getAddZoneFieldBuilder();
            getUpdZoneFieldBuilder();
            getDelZoneFieldBuilder();
            getAddClientPassportFieldBuilder();
            getUpdClientPassportFieldBuilder();
            getDelClientPassportFieldBuilder();
            getAddUserPassportFieldBuilder();
            getUpdUserPassportFieldBuilder();
            getDelUserPassportFieldBuilder();
            getAddInterfacePassportFieldBuilder();
            getUpdInterfacePassportFieldBuilder();
            getDelInterfacePassportFieldBuilder();
            getAddControlObjectPassportTypeFieldBuilder();
            getUpdControlObjectPassportTypeFieldBuilder();
            getDelControlObjectPassportTypeFieldBuilder();
            getAddControlElementPassportTypeFieldBuilder();
            getUpdControlElementPassportTypeFieldBuilder();
            getDelControlElementPassportTypeFieldBuilder();
            getAddEquipmentPassportTypeFieldBuilder();
            getUpdEquipmentPassportTypeFieldBuilder();
            getDelEquipmentPassportTypeFieldBuilder();
            getAddManagedElementPassportTypeFieldBuilder();
            getUpdManagedElementPassportTypeFieldBuilder();
            getDelManagedElementPassportTypeFieldBuilder();
            getAddSensorControlElementPassportTypeFieldBuilder();
            getUpdSensorControlElementPassportTypeFieldBuilder();
            getDelSensorControlElementPassportTypeFieldBuilder();
            getAddGeneralPurposeReferenceFieldBuilder();
            getDelGeneralPurposeReferenceFieldBuilder();
            getAddGeneralPurposeReferenceRecordFieldBuilder();
            getUpdGeneralPurposeReferenceRecordFieldBuilder();
            getDelGeneralPurposeReferenceRecordFieldBuilder();
            getSendConfigurationFieldBuilder();
            getAddEquipmentLogicalInputPassportTypeFieldBuilder();
            getUpdEquipmentLogicalInputPassportTypeFieldBuilder();
            getDelEquipmentLogicalInputPassportTypeFieldBuilder();
            getAddEquipmentLogicalOutputPassportTypeFieldBuilder();
            getUpdEquipmentLogicalOutputPassportTypeFieldBuilder();
            getDelEquipmentLogicalOutputPassportTypeFieldBuilder();
            getAddEquipmentFirmwarePassportFieldBuilder();
            getUpdEquipmentFirmwarePassportFieldBuilder();
            getDelEquipmentFirmwarePassportFieldBuilder();
            getPrimaryAuthFieldBuilder();
            getEquipmentCommandFieldBuilder();
            getDatabaseQueryFieldBuilder();
            getControlObjectCommandFieldBuilder();
            getActionCommandFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (headerBuilder_ == null) {
            header_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header.getDefaultInstance();
          } else {
            headerBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          if (authBuilder_ == null) {
            auth_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest.getDefaultInstance();
          } else {
            authBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          if (userLoginBuilder_ == null) {
            userLogin_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest.getDefaultInstance();
          } else {
            userLoginBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000004);
          if (userLogoutBuilder_ == null) {
            userLogout_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest.getDefaultInstance();
          } else {
            userLogoutBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000008);
          if (addControlObjectPassportBuilder_ == null) {
            addControlObjectPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport.getDefaultInstance();
          } else {
            addControlObjectPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000010);
          if (updControlObjectPassportBuilder_ == null) {
            updControlObjectPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport.getDefaultInstance();
          } else {
            updControlObjectPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000020);
          if (delControlObjectPassportBuilder_ == null) {
            delControlObjectPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport.getDefaultInstance();
          } else {
            delControlObjectPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000040);
          if (addEquipmentPassportBuilder_ == null) {
            addEquipmentPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport.getDefaultInstance();
          } else {
            addEquipmentPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000080);
          if (updEquipmentPassportBuilder_ == null) {
            updEquipmentPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport.getDefaultInstance();
          } else {
            updEquipmentPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000100);
          if (delEquipmentPassportBuilder_ == null) {
            delEquipmentPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport.getDefaultInstance();
          } else {
            delEquipmentPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000200);
          if (ackAnswerBuilder_ == null) {
            ackAnswer_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer.getDefaultInstance();
          } else {
            ackAnswerBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000400);
          if (addZoneBuilder_ == null) {
            addZone_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone.getDefaultInstance();
          } else {
            addZoneBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000800);
          if (updZoneBuilder_ == null) {
            updZone_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone.getDefaultInstance();
          } else {
            updZoneBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00001000);
          if (delZoneBuilder_ == null) {
            delZone_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone.getDefaultInstance();
          } else {
            delZoneBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00002000);
          if (addClientPassportBuilder_ == null) {
            addClientPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport.getDefaultInstance();
          } else {
            addClientPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00004000);
          if (updClientPassportBuilder_ == null) {
            updClientPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport.getDefaultInstance();
          } else {
            updClientPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00008000);
          if (delClientPassportBuilder_ == null) {
            delClientPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport.getDefaultInstance();
          } else {
            delClientPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00010000);
          if (addUserPassportBuilder_ == null) {
            addUserPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport.getDefaultInstance();
          } else {
            addUserPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00020000);
          if (updUserPassportBuilder_ == null) {
            updUserPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport.getDefaultInstance();
          } else {
            updUserPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00040000);
          if (delUserPassportBuilder_ == null) {
            delUserPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport.getDefaultInstance();
          } else {
            delUserPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00080000);
          if (addInterfacePassportBuilder_ == null) {
            addInterfacePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport.getDefaultInstance();
          } else {
            addInterfacePassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00100000);
          if (updInterfacePassportBuilder_ == null) {
            updInterfacePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport.getDefaultInstance();
          } else {
            updInterfacePassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00200000);
          if (delInterfacePassportBuilder_ == null) {
            delInterfacePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport.getDefaultInstance();
          } else {
            delInterfacePassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00400000);
          if (addControlObjectPassportTypeBuilder_ == null) {
            addControlObjectPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType.getDefaultInstance();
          } else {
            addControlObjectPassportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00800000);
          if (updControlObjectPassportTypeBuilder_ == null) {
            updControlObjectPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType.getDefaultInstance();
          } else {
            updControlObjectPassportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x01000000);
          if (delControlObjectPassportTypeBuilder_ == null) {
            delControlObjectPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType.getDefaultInstance();
          } else {
            delControlObjectPassportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x02000000);
          if (addControlElementPassportTypeBuilder_ == null) {
            addControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType.getDefaultInstance();
          } else {
            addControlElementPassportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x04000000);
          if (updControlElementPassportTypeBuilder_ == null) {
            updControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType.getDefaultInstance();
          } else {
            updControlElementPassportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x08000000);
          if (delControlElementPassportTypeBuilder_ == null) {
            delControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType.getDefaultInstance();
          } else {
            delControlElementPassportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x10000000);
          if (addEquipmentPassportTypeBuilder_ == null) {
            addEquipmentPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType.getDefaultInstance();
          } else {
            addEquipmentPassportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x20000000);
          if (updEquipmentPassportTypeBuilder_ == null) {
            updEquipmentPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType.getDefaultInstance();
          } else {
            updEquipmentPassportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x40000000);
          if (delEquipmentPassportTypeBuilder_ == null) {
            delEquipmentPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType.getDefaultInstance();
          } else {
            delEquipmentPassportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x80000000);
          if (addManagedElementPassportTypeBuilder_ == null) {
            addManagedElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType.getDefaultInstance();
          } else {
            addManagedElementPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000001);
          if (updManagedElementPassportTypeBuilder_ == null) {
            updManagedElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType.getDefaultInstance();
          } else {
            updManagedElementPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000002);
          if (delManagedElementPassportTypeBuilder_ == null) {
            delManagedElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType.getDefaultInstance();
          } else {
            delManagedElementPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000004);
          if (addSensorControlElementPassportTypeBuilder_ == null) {
            addSensorControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType.getDefaultInstance();
          } else {
            addSensorControlElementPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000008);
          if (updSensorControlElementPassportTypeBuilder_ == null) {
            updSensorControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType.getDefaultInstance();
          } else {
            updSensorControlElementPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000010);
          if (delSensorControlElementPassportTypeBuilder_ == null) {
            delSensorControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType.getDefaultInstance();
          } else {
            delSensorControlElementPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000020);
          if (addGeneralPurposeReferenceBuilder_ == null) {
            addGeneralPurposeReference_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference.getDefaultInstance();
          } else {
            addGeneralPurposeReferenceBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000040);
          if (delGeneralPurposeReferenceBuilder_ == null) {
            delGeneralPurposeReference_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference.getDefaultInstance();
          } else {
            delGeneralPurposeReferenceBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000080);
          if (addGeneralPurposeReferenceRecordBuilder_ == null) {
            addGeneralPurposeReferenceRecord_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord.getDefaultInstance();
          } else {
            addGeneralPurposeReferenceRecordBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000100);
          if (updGeneralPurposeReferenceRecordBuilder_ == null) {
            updGeneralPurposeReferenceRecord_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord.getDefaultInstance();
          } else {
            updGeneralPurposeReferenceRecordBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000200);
          if (delGeneralPurposeReferenceRecordBuilder_ == null) {
            delGeneralPurposeReferenceRecord_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord.getDefaultInstance();
          } else {
            delGeneralPurposeReferenceRecordBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000400);
          if (sendConfigurationBuilder_ == null) {
            sendConfiguration_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest.getDefaultInstance();
          } else {
            sendConfigurationBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000800);
          if (addEquipmentLogicalInputPassportTypeBuilder_ == null) {
            addEquipmentLogicalInputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType.getDefaultInstance();
          } else {
            addEquipmentLogicalInputPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00001000);
          if (updEquipmentLogicalInputPassportTypeBuilder_ == null) {
            updEquipmentLogicalInputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType.getDefaultInstance();
          } else {
            updEquipmentLogicalInputPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00002000);
          if (delEquipmentLogicalInputPassportTypeBuilder_ == null) {
            delEquipmentLogicalInputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType.getDefaultInstance();
          } else {
            delEquipmentLogicalInputPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00004000);
          if (addEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            addEquipmentLogicalOutputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType.getDefaultInstance();
          } else {
            addEquipmentLogicalOutputPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00008000);
          if (updEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            updEquipmentLogicalOutputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType.getDefaultInstance();
          } else {
            updEquipmentLogicalOutputPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00010000);
          if (delEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            delEquipmentLogicalOutputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType.getDefaultInstance();
          } else {
            delEquipmentLogicalOutputPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00020000);
          if (addEquipmentFirmwarePassportBuilder_ == null) {
            addEquipmentFirmwarePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport.getDefaultInstance();
          } else {
            addEquipmentFirmwarePassportBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00040000);
          if (updEquipmentFirmwarePassportBuilder_ == null) {
            updEquipmentFirmwarePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport.getDefaultInstance();
          } else {
            updEquipmentFirmwarePassportBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00080000);
          if (delEquipmentFirmwarePassportBuilder_ == null) {
            delEquipmentFirmwarePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport.getDefaultInstance();
          } else {
            delEquipmentFirmwarePassportBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00100000);
          if (primaryAuthBuilder_ == null) {
            primaryAuth_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest.getDefaultInstance();
          } else {
            primaryAuthBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00200000);
          if (equipmentCommandBuilder_ == null) {
            equipmentCommand_ = ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentCommandBase.getDefaultInstance();
          } else {
            equipmentCommandBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00400000);
          if (databaseQueryBuilder_ == null) {
            databaseQuery_ = ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase.getDefaultInstance();
          } else {
            databaseQueryBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00800000);
          if (controlObjectCommandBuilder_ == null) {
            controlObjectCommand_ = ru.kodos.almaz2.rpc.commands.ControlObjectCommandsClass.ControlObjectCommandBase.getDefaultInstance();
          } else {
            controlObjectCommandBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x01000000);
          if (actionCommandBuilder_ == null) {
            actionCommand_ = ru.kodos.almaz2.rpc.commands.ActionCommandsClass.ActionCommandBase.getDefaultInstance();
          } else {
            actionCommandBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x02000000);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_RequestBase_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase(this);
          int from_bitField0_ = bitField0_;
          int from_bitField1_ = bitField1_;
          int to_bitField0_ = 0;
          int to_bitField1_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (headerBuilder_ == null) {
            result.header_ = header_;
          } else {
            result.header_ = headerBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          if (authBuilder_ == null) {
            result.auth_ = auth_;
          } else {
            result.auth_ = authBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          if (userLoginBuilder_ == null) {
            result.userLogin_ = userLogin_;
          } else {
            result.userLogin_ = userLoginBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          if (userLogoutBuilder_ == null) {
            result.userLogout_ = userLogout_;
          } else {
            result.userLogout_ = userLogoutBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
            to_bitField0_ |= 0x00000010;
          }
          if (addControlObjectPassportBuilder_ == null) {
            result.addControlObjectPassport_ = addControlObjectPassport_;
          } else {
            result.addControlObjectPassport_ = addControlObjectPassportBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
            to_bitField0_ |= 0x00000020;
          }
          if (updControlObjectPassportBuilder_ == null) {
            result.updControlObjectPassport_ = updControlObjectPassport_;
          } else {
            result.updControlObjectPassport_ = updControlObjectPassportBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
            to_bitField0_ |= 0x00000040;
          }
          if (delControlObjectPassportBuilder_ == null) {
            result.delControlObjectPassport_ = delControlObjectPassport_;
          } else {
            result.delControlObjectPassport_ = delControlObjectPassportBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
            to_bitField0_ |= 0x00000080;
          }
          if (addEquipmentPassportBuilder_ == null) {
            result.addEquipmentPassport_ = addEquipmentPassport_;
          } else {
            result.addEquipmentPassport_ = addEquipmentPassportBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
            to_bitField0_ |= 0x00000100;
          }
          if (updEquipmentPassportBuilder_ == null) {
            result.updEquipmentPassport_ = updEquipmentPassport_;
          } else {
            result.updEquipmentPassport_ = updEquipmentPassportBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
            to_bitField0_ |= 0x00000200;
          }
          if (delEquipmentPassportBuilder_ == null) {
            result.delEquipmentPassport_ = delEquipmentPassport_;
          } else {
            result.delEquipmentPassport_ = delEquipmentPassportBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
            to_bitField0_ |= 0x00000400;
          }
          if (ackAnswerBuilder_ == null) {
            result.ackAnswer_ = ackAnswer_;
          } else {
            result.ackAnswer_ = ackAnswerBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
            to_bitField0_ |= 0x00000800;
          }
          if (addZoneBuilder_ == null) {
            result.addZone_ = addZone_;
          } else {
            result.addZone_ = addZoneBuilder_.build();
          }
          if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
            to_bitField0_ |= 0x00001000;
          }
          if (updZoneBuilder_ == null) {
            result.updZone_ = updZone_;
          } else {
            result.updZone_ = updZoneBuilder_.build();
          }
          if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
            to_bitField0_ |= 0x00002000;
          }
          if (delZoneBuilder_ == null) {
            result.delZone_ = delZone_;
          } else {
            result.delZone_ = delZoneBuilder_.build();
          }
          if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
            to_bitField0_ |= 0x00004000;
          }
          if (addClientPassportBuilder_ == null) {
            result.addClientPassport_ = addClientPassport_;
          } else {
            result.addClientPassport_ = addClientPassportBuilder_.build();
          }
          if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
            to_bitField0_ |= 0x00008000;
          }
          if (updClientPassportBuilder_ == null) {
            result.updClientPassport_ = updClientPassport_;
          } else {
            result.updClientPassport_ = updClientPassportBuilder_.build();
          }
          if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
            to_bitField0_ |= 0x00010000;
          }
          if (delClientPassportBuilder_ == null) {
            result.delClientPassport_ = delClientPassport_;
          } else {
            result.delClientPassport_ = delClientPassportBuilder_.build();
          }
          if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
            to_bitField0_ |= 0x00020000;
          }
          if (addUserPassportBuilder_ == null) {
            result.addUserPassport_ = addUserPassport_;
          } else {
            result.addUserPassport_ = addUserPassportBuilder_.build();
          }
          if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
            to_bitField0_ |= 0x00040000;
          }
          if (updUserPassportBuilder_ == null) {
            result.updUserPassport_ = updUserPassport_;
          } else {
            result.updUserPassport_ = updUserPassportBuilder_.build();
          }
          if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
            to_bitField0_ |= 0x00080000;
          }
          if (delUserPassportBuilder_ == null) {
            result.delUserPassport_ = delUserPassport_;
          } else {
            result.delUserPassport_ = delUserPassportBuilder_.build();
          }
          if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
            to_bitField0_ |= 0x00100000;
          }
          if (addInterfacePassportBuilder_ == null) {
            result.addInterfacePassport_ = addInterfacePassport_;
          } else {
            result.addInterfacePassport_ = addInterfacePassportBuilder_.build();
          }
          if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
            to_bitField0_ |= 0x00200000;
          }
          if (updInterfacePassportBuilder_ == null) {
            result.updInterfacePassport_ = updInterfacePassport_;
          } else {
            result.updInterfacePassport_ = updInterfacePassportBuilder_.build();
          }
          if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
            to_bitField0_ |= 0x00400000;
          }
          if (delInterfacePassportBuilder_ == null) {
            result.delInterfacePassport_ = delInterfacePassport_;
          } else {
            result.delInterfacePassport_ = delInterfacePassportBuilder_.build();
          }
          if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
            to_bitField0_ |= 0x00800000;
          }
          if (addControlObjectPassportTypeBuilder_ == null) {
            result.addControlObjectPassportType_ = addControlObjectPassportType_;
          } else {
            result.addControlObjectPassportType_ = addControlObjectPassportTypeBuilder_.build();
          }
          if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
            to_bitField0_ |= 0x01000000;
          }
          if (updControlObjectPassportTypeBuilder_ == null) {
            result.updControlObjectPassportType_ = updControlObjectPassportType_;
          } else {
            result.updControlObjectPassportType_ = updControlObjectPassportTypeBuilder_.build();
          }
          if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
            to_bitField0_ |= 0x02000000;
          }
          if (delControlObjectPassportTypeBuilder_ == null) {
            result.delControlObjectPassportType_ = delControlObjectPassportType_;
          } else {
            result.delControlObjectPassportType_ = delControlObjectPassportTypeBuilder_.build();
          }
          if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
            to_bitField0_ |= 0x04000000;
          }
          if (addControlElementPassportTypeBuilder_ == null) {
            result.addControlElementPassportType_ = addControlElementPassportType_;
          } else {
            result.addControlElementPassportType_ = addControlElementPassportTypeBuilder_.build();
          }
          if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
            to_bitField0_ |= 0x08000000;
          }
          if (updControlElementPassportTypeBuilder_ == null) {
            result.updControlElementPassportType_ = updControlElementPassportType_;
          } else {
            result.updControlElementPassportType_ = updControlElementPassportTypeBuilder_.build();
          }
          if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
            to_bitField0_ |= 0x10000000;
          }
          if (delControlElementPassportTypeBuilder_ == null) {
            result.delControlElementPassportType_ = delControlElementPassportType_;
          } else {
            result.delControlElementPassportType_ = delControlElementPassportTypeBuilder_.build();
          }
          if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
            to_bitField0_ |= 0x20000000;
          }
          if (addEquipmentPassportTypeBuilder_ == null) {
            result.addEquipmentPassportType_ = addEquipmentPassportType_;
          } else {
            result.addEquipmentPassportType_ = addEquipmentPassportTypeBuilder_.build();
          }
          if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
            to_bitField0_ |= 0x40000000;
          }
          if (updEquipmentPassportTypeBuilder_ == null) {
            result.updEquipmentPassportType_ = updEquipmentPassportType_;
          } else {
            result.updEquipmentPassportType_ = updEquipmentPassportTypeBuilder_.build();
          }
          if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
            to_bitField0_ |= 0x80000000;
          }
          if (delEquipmentPassportTypeBuilder_ == null) {
            result.delEquipmentPassportType_ = delEquipmentPassportType_;
          } else {
            result.delEquipmentPassportType_ = delEquipmentPassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
            to_bitField1_ |= 0x00000001;
          }
          if (addManagedElementPassportTypeBuilder_ == null) {
            result.addManagedElementPassportType_ = addManagedElementPassportType_;
          } else {
            result.addManagedElementPassportType_ = addManagedElementPassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
            to_bitField1_ |= 0x00000002;
          }
          if (updManagedElementPassportTypeBuilder_ == null) {
            result.updManagedElementPassportType_ = updManagedElementPassportType_;
          } else {
            result.updManagedElementPassportType_ = updManagedElementPassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x00000004) == 0x00000004)) {
            to_bitField1_ |= 0x00000004;
          }
          if (delManagedElementPassportTypeBuilder_ == null) {
            result.delManagedElementPassportType_ = delManagedElementPassportType_;
          } else {
            result.delManagedElementPassportType_ = delManagedElementPassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x00000008) == 0x00000008)) {
            to_bitField1_ |= 0x00000008;
          }
          if (addSensorControlElementPassportTypeBuilder_ == null) {
            result.addSensorControlElementPassportType_ = addSensorControlElementPassportType_;
          } else {
            result.addSensorControlElementPassportType_ = addSensorControlElementPassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
            to_bitField1_ |= 0x00000010;
          }
          if (updSensorControlElementPassportTypeBuilder_ == null) {
            result.updSensorControlElementPassportType_ = updSensorControlElementPassportType_;
          } else {
            result.updSensorControlElementPassportType_ = updSensorControlElementPassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x00000020) == 0x00000020)) {
            to_bitField1_ |= 0x00000020;
          }
          if (delSensorControlElementPassportTypeBuilder_ == null) {
            result.delSensorControlElementPassportType_ = delSensorControlElementPassportType_;
          } else {
            result.delSensorControlElementPassportType_ = delSensorControlElementPassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x00000040) == 0x00000040)) {
            to_bitField1_ |= 0x00000040;
          }
          if (addGeneralPurposeReferenceBuilder_ == null) {
            result.addGeneralPurposeReference_ = addGeneralPurposeReference_;
          } else {
            result.addGeneralPurposeReference_ = addGeneralPurposeReferenceBuilder_.build();
          }
          if (((from_bitField1_ & 0x00000080) == 0x00000080)) {
            to_bitField1_ |= 0x00000080;
          }
          if (delGeneralPurposeReferenceBuilder_ == null) {
            result.delGeneralPurposeReference_ = delGeneralPurposeReference_;
          } else {
            result.delGeneralPurposeReference_ = delGeneralPurposeReferenceBuilder_.build();
          }
          if (((from_bitField1_ & 0x00000100) == 0x00000100)) {
            to_bitField1_ |= 0x00000100;
          }
          if (addGeneralPurposeReferenceRecordBuilder_ == null) {
            result.addGeneralPurposeReferenceRecord_ = addGeneralPurposeReferenceRecord_;
          } else {
            result.addGeneralPurposeReferenceRecord_ = addGeneralPurposeReferenceRecordBuilder_.build();
          }
          if (((from_bitField1_ & 0x00000200) == 0x00000200)) {
            to_bitField1_ |= 0x00000200;
          }
          if (updGeneralPurposeReferenceRecordBuilder_ == null) {
            result.updGeneralPurposeReferenceRecord_ = updGeneralPurposeReferenceRecord_;
          } else {
            result.updGeneralPurposeReferenceRecord_ = updGeneralPurposeReferenceRecordBuilder_.build();
          }
          if (((from_bitField1_ & 0x00000400) == 0x00000400)) {
            to_bitField1_ |= 0x00000400;
          }
          if (delGeneralPurposeReferenceRecordBuilder_ == null) {
            result.delGeneralPurposeReferenceRecord_ = delGeneralPurposeReferenceRecord_;
          } else {
            result.delGeneralPurposeReferenceRecord_ = delGeneralPurposeReferenceRecordBuilder_.build();
          }
          if (((from_bitField1_ & 0x00000800) == 0x00000800)) {
            to_bitField1_ |= 0x00000800;
          }
          if (sendConfigurationBuilder_ == null) {
            result.sendConfiguration_ = sendConfiguration_;
          } else {
            result.sendConfiguration_ = sendConfigurationBuilder_.build();
          }
          if (((from_bitField1_ & 0x00001000) == 0x00001000)) {
            to_bitField1_ |= 0x00001000;
          }
          if (addEquipmentLogicalInputPassportTypeBuilder_ == null) {
            result.addEquipmentLogicalInputPassportType_ = addEquipmentLogicalInputPassportType_;
          } else {
            result.addEquipmentLogicalInputPassportType_ = addEquipmentLogicalInputPassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x00002000) == 0x00002000)) {
            to_bitField1_ |= 0x00002000;
          }
          if (updEquipmentLogicalInputPassportTypeBuilder_ == null) {
            result.updEquipmentLogicalInputPassportType_ = updEquipmentLogicalInputPassportType_;
          } else {
            result.updEquipmentLogicalInputPassportType_ = updEquipmentLogicalInputPassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x00004000) == 0x00004000)) {
            to_bitField1_ |= 0x00004000;
          }
          if (delEquipmentLogicalInputPassportTypeBuilder_ == null) {
            result.delEquipmentLogicalInputPassportType_ = delEquipmentLogicalInputPassportType_;
          } else {
            result.delEquipmentLogicalInputPassportType_ = delEquipmentLogicalInputPassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x00008000) == 0x00008000)) {
            to_bitField1_ |= 0x00008000;
          }
          if (addEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            result.addEquipmentLogicalOutputPassportType_ = addEquipmentLogicalOutputPassportType_;
          } else {
            result.addEquipmentLogicalOutputPassportType_ = addEquipmentLogicalOutputPassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x00010000) == 0x00010000)) {
            to_bitField1_ |= 0x00010000;
          }
          if (updEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            result.updEquipmentLogicalOutputPassportType_ = updEquipmentLogicalOutputPassportType_;
          } else {
            result.updEquipmentLogicalOutputPassportType_ = updEquipmentLogicalOutputPassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x00020000) == 0x00020000)) {
            to_bitField1_ |= 0x00020000;
          }
          if (delEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            result.delEquipmentLogicalOutputPassportType_ = delEquipmentLogicalOutputPassportType_;
          } else {
            result.delEquipmentLogicalOutputPassportType_ = delEquipmentLogicalOutputPassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x00040000) == 0x00040000)) {
            to_bitField1_ |= 0x00040000;
          }
          if (addEquipmentFirmwarePassportBuilder_ == null) {
            result.addEquipmentFirmwarePassport_ = addEquipmentFirmwarePassport_;
          } else {
            result.addEquipmentFirmwarePassport_ = addEquipmentFirmwarePassportBuilder_.build();
          }
          if (((from_bitField1_ & 0x00080000) == 0x00080000)) {
            to_bitField1_ |= 0x00080000;
          }
          if (updEquipmentFirmwarePassportBuilder_ == null) {
            result.updEquipmentFirmwarePassport_ = updEquipmentFirmwarePassport_;
          } else {
            result.updEquipmentFirmwarePassport_ = updEquipmentFirmwarePassportBuilder_.build();
          }
          if (((from_bitField1_ & 0x00100000) == 0x00100000)) {
            to_bitField1_ |= 0x00100000;
          }
          if (delEquipmentFirmwarePassportBuilder_ == null) {
            result.delEquipmentFirmwarePassport_ = delEquipmentFirmwarePassport_;
          } else {
            result.delEquipmentFirmwarePassport_ = delEquipmentFirmwarePassportBuilder_.build();
          }
          if (((from_bitField1_ & 0x00200000) == 0x00200000)) {
            to_bitField1_ |= 0x00200000;
          }
          if (primaryAuthBuilder_ == null) {
            result.primaryAuth_ = primaryAuth_;
          } else {
            result.primaryAuth_ = primaryAuthBuilder_.build();
          }
          if (((from_bitField1_ & 0x00400000) == 0x00400000)) {
            to_bitField1_ |= 0x00400000;
          }
          if (equipmentCommandBuilder_ == null) {
            result.equipmentCommand_ = equipmentCommand_;
          } else {
            result.equipmentCommand_ = equipmentCommandBuilder_.build();
          }
          if (((from_bitField1_ & 0x00800000) == 0x00800000)) {
            to_bitField1_ |= 0x00800000;
          }
          if (databaseQueryBuilder_ == null) {
            result.databaseQuery_ = databaseQuery_;
          } else {
            result.databaseQuery_ = databaseQueryBuilder_.build();
          }
          if (((from_bitField1_ & 0x01000000) == 0x01000000)) {
            to_bitField1_ |= 0x01000000;
          }
          if (controlObjectCommandBuilder_ == null) {
            result.controlObjectCommand_ = controlObjectCommand_;
          } else {
            result.controlObjectCommand_ = controlObjectCommandBuilder_.build();
          }
          if (((from_bitField1_ & 0x02000000) == 0x02000000)) {
            to_bitField1_ |= 0x02000000;
          }
          if (actionCommandBuilder_ == null) {
            result.actionCommand_ = actionCommand_;
          } else {
            result.actionCommand_ = actionCommandBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          result.bitField1_ = to_bitField1_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase.getDefaultInstance()) return this;
          if (other.hasHeader()) {
            mergeHeader(other.getHeader());
          }
          if (other.hasAuth()) {
            mergeAuth(other.getAuth());
          }
          if (other.hasUserLogin()) {
            mergeUserLogin(other.getUserLogin());
          }
          if (other.hasUserLogout()) {
            mergeUserLogout(other.getUserLogout());
          }
          if (other.hasAddControlObjectPassport()) {
            mergeAddControlObjectPassport(other.getAddControlObjectPassport());
          }
          if (other.hasUpdControlObjectPassport()) {
            mergeUpdControlObjectPassport(other.getUpdControlObjectPassport());
          }
          if (other.hasDelControlObjectPassport()) {
            mergeDelControlObjectPassport(other.getDelControlObjectPassport());
          }
          if (other.hasAddEquipmentPassport()) {
            mergeAddEquipmentPassport(other.getAddEquipmentPassport());
          }
          if (other.hasUpdEquipmentPassport()) {
            mergeUpdEquipmentPassport(other.getUpdEquipmentPassport());
          }
          if (other.hasDelEquipmentPassport()) {
            mergeDelEquipmentPassport(other.getDelEquipmentPassport());
          }
          if (other.hasAckAnswer()) {
            mergeAckAnswer(other.getAckAnswer());
          }
          if (other.hasAddZone()) {
            mergeAddZone(other.getAddZone());
          }
          if (other.hasUpdZone()) {
            mergeUpdZone(other.getUpdZone());
          }
          if (other.hasDelZone()) {
            mergeDelZone(other.getDelZone());
          }
          if (other.hasAddClientPassport()) {
            mergeAddClientPassport(other.getAddClientPassport());
          }
          if (other.hasUpdClientPassport()) {
            mergeUpdClientPassport(other.getUpdClientPassport());
          }
          if (other.hasDelClientPassport()) {
            mergeDelClientPassport(other.getDelClientPassport());
          }
          if (other.hasAddUserPassport()) {
            mergeAddUserPassport(other.getAddUserPassport());
          }
          if (other.hasUpdUserPassport()) {
            mergeUpdUserPassport(other.getUpdUserPassport());
          }
          if (other.hasDelUserPassport()) {
            mergeDelUserPassport(other.getDelUserPassport());
          }
          if (other.hasAddInterfacePassport()) {
            mergeAddInterfacePassport(other.getAddInterfacePassport());
          }
          if (other.hasUpdInterfacePassport()) {
            mergeUpdInterfacePassport(other.getUpdInterfacePassport());
          }
          if (other.hasDelInterfacePassport()) {
            mergeDelInterfacePassport(other.getDelInterfacePassport());
          }
          if (other.hasAddControlObjectPassportType()) {
            mergeAddControlObjectPassportType(other.getAddControlObjectPassportType());
          }
          if (other.hasUpdControlObjectPassportType()) {
            mergeUpdControlObjectPassportType(other.getUpdControlObjectPassportType());
          }
          if (other.hasDelControlObjectPassportType()) {
            mergeDelControlObjectPassportType(other.getDelControlObjectPassportType());
          }
          if (other.hasAddControlElementPassportType()) {
            mergeAddControlElementPassportType(other.getAddControlElementPassportType());
          }
          if (other.hasUpdControlElementPassportType()) {
            mergeUpdControlElementPassportType(other.getUpdControlElementPassportType());
          }
          if (other.hasDelControlElementPassportType()) {
            mergeDelControlElementPassportType(other.getDelControlElementPassportType());
          }
          if (other.hasAddEquipmentPassportType()) {
            mergeAddEquipmentPassportType(other.getAddEquipmentPassportType());
          }
          if (other.hasUpdEquipmentPassportType()) {
            mergeUpdEquipmentPassportType(other.getUpdEquipmentPassportType());
          }
          if (other.hasDelEquipmentPassportType()) {
            mergeDelEquipmentPassportType(other.getDelEquipmentPassportType());
          }
          if (other.hasAddManagedElementPassportType()) {
            mergeAddManagedElementPassportType(other.getAddManagedElementPassportType());
          }
          if (other.hasUpdManagedElementPassportType()) {
            mergeUpdManagedElementPassportType(other.getUpdManagedElementPassportType());
          }
          if (other.hasDelManagedElementPassportType()) {
            mergeDelManagedElementPassportType(other.getDelManagedElementPassportType());
          }
          if (other.hasAddSensorControlElementPassportType()) {
            mergeAddSensorControlElementPassportType(other.getAddSensorControlElementPassportType());
          }
          if (other.hasUpdSensorControlElementPassportType()) {
            mergeUpdSensorControlElementPassportType(other.getUpdSensorControlElementPassportType());
          }
          if (other.hasDelSensorControlElementPassportType()) {
            mergeDelSensorControlElementPassportType(other.getDelSensorControlElementPassportType());
          }
          if (other.hasAddGeneralPurposeReference()) {
            mergeAddGeneralPurposeReference(other.getAddGeneralPurposeReference());
          }
          if (other.hasDelGeneralPurposeReference()) {
            mergeDelGeneralPurposeReference(other.getDelGeneralPurposeReference());
          }
          if (other.hasAddGeneralPurposeReferenceRecord()) {
            mergeAddGeneralPurposeReferenceRecord(other.getAddGeneralPurposeReferenceRecord());
          }
          if (other.hasUpdGeneralPurposeReferenceRecord()) {
            mergeUpdGeneralPurposeReferenceRecord(other.getUpdGeneralPurposeReferenceRecord());
          }
          if (other.hasDelGeneralPurposeReferenceRecord()) {
            mergeDelGeneralPurposeReferenceRecord(other.getDelGeneralPurposeReferenceRecord());
          }
          if (other.hasSendConfiguration()) {
            mergeSendConfiguration(other.getSendConfiguration());
          }
          if (other.hasAddEquipmentLogicalInputPassportType()) {
            mergeAddEquipmentLogicalInputPassportType(other.getAddEquipmentLogicalInputPassportType());
          }
          if (other.hasUpdEquipmentLogicalInputPassportType()) {
            mergeUpdEquipmentLogicalInputPassportType(other.getUpdEquipmentLogicalInputPassportType());
          }
          if (other.hasDelEquipmentLogicalInputPassportType()) {
            mergeDelEquipmentLogicalInputPassportType(other.getDelEquipmentLogicalInputPassportType());
          }
          if (other.hasAddEquipmentLogicalOutputPassportType()) {
            mergeAddEquipmentLogicalOutputPassportType(other.getAddEquipmentLogicalOutputPassportType());
          }
          if (other.hasUpdEquipmentLogicalOutputPassportType()) {
            mergeUpdEquipmentLogicalOutputPassportType(other.getUpdEquipmentLogicalOutputPassportType());
          }
          if (other.hasDelEquipmentLogicalOutputPassportType()) {
            mergeDelEquipmentLogicalOutputPassportType(other.getDelEquipmentLogicalOutputPassportType());
          }
          if (other.hasAddEquipmentFirmwarePassport()) {
            mergeAddEquipmentFirmwarePassport(other.getAddEquipmentFirmwarePassport());
          }
          if (other.hasUpdEquipmentFirmwarePassport()) {
            mergeUpdEquipmentFirmwarePassport(other.getUpdEquipmentFirmwarePassport());
          }
          if (other.hasDelEquipmentFirmwarePassport()) {
            mergeDelEquipmentFirmwarePassport(other.getDelEquipmentFirmwarePassport());
          }
          if (other.hasPrimaryAuth()) {
            mergePrimaryAuth(other.getPrimaryAuth());
          }
          if (other.hasEquipmentCommand()) {
            mergeEquipmentCommand(other.getEquipmentCommand());
          }
          if (other.hasDatabaseQuery()) {
            mergeDatabaseQuery(other.getDatabaseQuery());
          }
          if (other.hasControlObjectCommand()) {
            mergeControlObjectCommand(other.getControlObjectCommand());
          }
          if (other.hasActionCommand()) {
            mergeActionCommand(other.getActionCommand());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasAddControlObjectPassport()) {
            if (!getAddControlObjectPassport().isInitialized()) {
              
              return false;
            }
          }
          if (hasUpdControlObjectPassport()) {
            if (!getUpdControlObjectPassport().isInitialized()) {
              
              return false;
            }
          }
          if (hasAddEquipmentPassport()) {
            if (!getAddEquipmentPassport().isInitialized()) {
              
              return false;
            }
          }
          if (hasUpdEquipmentPassport()) {
            if (!getUpdEquipmentPassport().isInitialized()) {
              
              return false;
            }
          }
          if (hasAddClientPassport()) {
            if (!getAddClientPassport().isInitialized()) {
              
              return false;
            }
          }
          if (hasUpdClientPassport()) {
            if (!getUpdClientPassport().isInitialized()) {
              
              return false;
            }
          }
          if (hasAddUserPassport()) {
            if (!getAddUserPassport().isInitialized()) {
              
              return false;
            }
          }
          if (hasUpdUserPassport()) {
            if (!getUpdUserPassport().isInitialized()) {
              
              return false;
            }
          }
          if (hasAddInterfacePassport()) {
            if (!getAddInterfacePassport().isInitialized()) {
              
              return false;
            }
          }
          if (hasUpdInterfacePassport()) {
            if (!getUpdInterfacePassport().isInitialized()) {
              
              return false;
            }
          }
          if (hasAddControlObjectPassportType()) {
            if (!getAddControlObjectPassportType().isInitialized()) {
              
              return false;
            }
          }
          if (hasUpdControlObjectPassportType()) {
            if (!getUpdControlObjectPassportType().isInitialized()) {
              
              return false;
            }
          }
          if (hasAddControlElementPassportType()) {
            if (!getAddControlElementPassportType().isInitialized()) {
              
              return false;
            }
          }
          if (hasUpdControlElementPassportType()) {
            if (!getUpdControlElementPassportType().isInitialized()) {
              
              return false;
            }
          }
          if (hasAddEquipmentPassportType()) {
            if (!getAddEquipmentPassportType().isInitialized()) {
              
              return false;
            }
          }
          if (hasUpdEquipmentPassportType()) {
            if (!getUpdEquipmentPassportType().isInitialized()) {
              
              return false;
            }
          }
          if (hasAddManagedElementPassportType()) {
            if (!getAddManagedElementPassportType().isInitialized()) {
              
              return false;
            }
          }
          if (hasUpdManagedElementPassportType()) {
            if (!getUpdManagedElementPassportType().isInitialized()) {
              
              return false;
            }
          }
          if (hasAddSensorControlElementPassportType()) {
            if (!getAddSensorControlElementPassportType().isInitialized()) {
              
              return false;
            }
          }
          if (hasUpdSensorControlElementPassportType()) {
            if (!getUpdSensorControlElementPassportType().isInitialized()) {
              
              return false;
            }
          }
          if (hasAddGeneralPurposeReference()) {
            if (!getAddGeneralPurposeReference().isInitialized()) {
              
              return false;
            }
          }
          if (hasAddEquipmentLogicalInputPassportType()) {
            if (!getAddEquipmentLogicalInputPassportType().isInitialized()) {
              
              return false;
            }
          }
          if (hasUpdEquipmentLogicalInputPassportType()) {
            if (!getUpdEquipmentLogicalInputPassportType().isInitialized()) {
              
              return false;
            }
          }
          if (hasAddEquipmentLogicalOutputPassportType()) {
            if (!getAddEquipmentLogicalOutputPassportType().isInitialized()) {
              
              return false;
            }
          }
          if (hasUpdEquipmentLogicalOutputPassportType()) {
            if (!getUpdEquipmentLogicalOutputPassportType().isInitialized()) {
              
              return false;
            }
          }
          if (hasAddEquipmentFirmwarePassport()) {
            if (!getAddEquipmentFirmwarePassport().isInitialized()) {
              
              return false;
            }
          }
          if (hasUpdEquipmentFirmwarePassport()) {
            if (!getUpdEquipmentFirmwarePassport().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;
        private int bitField1_;

        // optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header header_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.HeaderOrBuilder> headerBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;</code>
         */
        public boolean hasHeader() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header getHeader() {
          if (headerBuilder_ == null) {
            return header_;
          } else {
            return headerBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;</code>
         */
        public Builder setHeader(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header value) {
          if (headerBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            header_ = value;
            onChanged();
          } else {
            headerBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;</code>
         */
        public Builder setHeader(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header.Builder builderForValue) {
          if (headerBuilder_ == null) {
            header_ = builderForValue.build();
            onChanged();
          } else {
            headerBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;</code>
         */
        public Builder mergeHeader(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header value) {
          if (headerBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                header_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header.getDefaultInstance()) {
              header_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header.newBuilder(header_).mergeFrom(value).buildPartial();
            } else {
              header_ = value;
            }
            onChanged();
          } else {
            headerBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;</code>
         */
        public Builder clearHeader() {
          if (headerBuilder_ == null) {
            header_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header.getDefaultInstance();
            onChanged();
          } else {
            headerBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header.Builder getHeaderBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getHeaderFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.HeaderOrBuilder getHeaderOrBuilder() {
          if (headerBuilder_ != null) {
            return headerBuilder_.getMessageOrBuilder();
          } else {
            return header_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.HeaderOrBuilder> 
            getHeaderFieldBuilder() {
          if (headerBuilder_ == null) {
            headerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.HeaderOrBuilder>(
                    header_,
                    getParentForChildren(),
                    isClean());
            header_ = null;
          }
          return headerBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AuthRequest auth = 2;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest auth_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequestOrBuilder> authBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AuthRequest auth = 2;</code>
         */
        public boolean hasAuth() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AuthRequest auth = 2;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest getAuth() {
          if (authBuilder_ == null) {
            return auth_;
          } else {
            return authBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AuthRequest auth = 2;</code>
         */
        public Builder setAuth(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest value) {
          if (authBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            auth_ = value;
            onChanged();
          } else {
            authBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AuthRequest auth = 2;</code>
         */
        public Builder setAuth(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest.Builder builderForValue) {
          if (authBuilder_ == null) {
            auth_ = builderForValue.build();
            onChanged();
          } else {
            authBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AuthRequest auth = 2;</code>
         */
        public Builder mergeAuth(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest value) {
          if (authBuilder_ == null) {
            if (((bitField0_ & 0x00000002) == 0x00000002) &&
                auth_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest.getDefaultInstance()) {
              auth_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest.newBuilder(auth_).mergeFrom(value).buildPartial();
            } else {
              auth_ = value;
            }
            onChanged();
          } else {
            authBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AuthRequest auth = 2;</code>
         */
        public Builder clearAuth() {
          if (authBuilder_ == null) {
            auth_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest.getDefaultInstance();
            onChanged();
          } else {
            authBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AuthRequest auth = 2;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest.Builder getAuthBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getAuthFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AuthRequest auth = 2;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequestOrBuilder getAuthOrBuilder() {
          if (authBuilder_ != null) {
            return authBuilder_.getMessageOrBuilder();
          } else {
            return auth_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AuthRequest auth = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequestOrBuilder> 
            getAuthFieldBuilder() {
          if (authBuilder_ == null) {
            authBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequest.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthRequestOrBuilder>(
                    auth_,
                    getParentForChildren(),
                    isClean());
            auth_ = null;
          }
          return authBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UserLoginRequest user_login = 3;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest userLogin_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequestOrBuilder> userLoginBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginRequest user_login = 3;</code>
         */
        public boolean hasUserLogin() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginRequest user_login = 3;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest getUserLogin() {
          if (userLoginBuilder_ == null) {
            return userLogin_;
          } else {
            return userLoginBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginRequest user_login = 3;</code>
         */
        public Builder setUserLogin(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest value) {
          if (userLoginBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            userLogin_ = value;
            onChanged();
          } else {
            userLoginBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginRequest user_login = 3;</code>
         */
        public Builder setUserLogin(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest.Builder builderForValue) {
          if (userLoginBuilder_ == null) {
            userLogin_ = builderForValue.build();
            onChanged();
          } else {
            userLoginBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginRequest user_login = 3;</code>
         */
        public Builder mergeUserLogin(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest value) {
          if (userLoginBuilder_ == null) {
            if (((bitField0_ & 0x00000004) == 0x00000004) &&
                userLogin_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest.getDefaultInstance()) {
              userLogin_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest.newBuilder(userLogin_).mergeFrom(value).buildPartial();
            } else {
              userLogin_ = value;
            }
            onChanged();
          } else {
            userLoginBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginRequest user_login = 3;</code>
         */
        public Builder clearUserLogin() {
          if (userLoginBuilder_ == null) {
            userLogin_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest.getDefaultInstance();
            onChanged();
          } else {
            userLoginBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginRequest user_login = 3;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest.Builder getUserLoginBuilder() {
          bitField0_ |= 0x00000004;
          onChanged();
          return getUserLoginFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginRequest user_login = 3;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequestOrBuilder getUserLoginOrBuilder() {
          if (userLoginBuilder_ != null) {
            return userLoginBuilder_.getMessageOrBuilder();
          } else {
            return userLogin_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginRequest user_login = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequestOrBuilder> 
            getUserLoginFieldBuilder() {
          if (userLoginBuilder_ == null) {
            userLoginBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequest.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginRequestOrBuilder>(
                    userLogin_,
                    getParentForChildren(),
                    isClean());
            userLogin_ = null;
          }
          return userLoginBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UserLogoutRequest user_logout = 4;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest userLogout_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequestOrBuilder> userLogoutBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLogoutRequest user_logout = 4;</code>
         */
        public boolean hasUserLogout() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLogoutRequest user_logout = 4;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest getUserLogout() {
          if (userLogoutBuilder_ == null) {
            return userLogout_;
          } else {
            return userLogoutBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLogoutRequest user_logout = 4;</code>
         */
        public Builder setUserLogout(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest value) {
          if (userLogoutBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            userLogout_ = value;
            onChanged();
          } else {
            userLogoutBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000008;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLogoutRequest user_logout = 4;</code>
         */
        public Builder setUserLogout(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest.Builder builderForValue) {
          if (userLogoutBuilder_ == null) {
            userLogout_ = builderForValue.build();
            onChanged();
          } else {
            userLogoutBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000008;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLogoutRequest user_logout = 4;</code>
         */
        public Builder mergeUserLogout(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest value) {
          if (userLogoutBuilder_ == null) {
            if (((bitField0_ & 0x00000008) == 0x00000008) &&
                userLogout_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest.getDefaultInstance()) {
              userLogout_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest.newBuilder(userLogout_).mergeFrom(value).buildPartial();
            } else {
              userLogout_ = value;
            }
            onChanged();
          } else {
            userLogoutBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000008;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLogoutRequest user_logout = 4;</code>
         */
        public Builder clearUserLogout() {
          if (userLogoutBuilder_ == null) {
            userLogout_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest.getDefaultInstance();
            onChanged();
          } else {
            userLogoutBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000008);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLogoutRequest user_logout = 4;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest.Builder getUserLogoutBuilder() {
          bitField0_ |= 0x00000008;
          onChanged();
          return getUserLogoutFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLogoutRequest user_logout = 4;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequestOrBuilder getUserLogoutOrBuilder() {
          if (userLogoutBuilder_ != null) {
            return userLogoutBuilder_.getMessageOrBuilder();
          } else {
            return userLogout_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLogoutRequest user_logout = 4;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequestOrBuilder> 
            getUserLogoutFieldBuilder() {
          if (userLogoutBuilder_ == null) {
            userLogoutBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequest.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLogoutRequestOrBuilder>(
                    userLogout_,
                    getParentForChildren(),
                    isClean());
            userLogout_ = null;
          }
          return userLogoutBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport addControlObjectPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportOrBuilder> addControlObjectPassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;</code>
         */
        public boolean hasAddControlObjectPassport() {
          return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport getAddControlObjectPassport() {
          if (addControlObjectPassportBuilder_ == null) {
            return addControlObjectPassport_;
          } else {
            return addControlObjectPassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;</code>
         */
        public Builder setAddControlObjectPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport value) {
          if (addControlObjectPassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addControlObjectPassport_ = value;
            onChanged();
          } else {
            addControlObjectPassportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000010;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;</code>
         */
        public Builder setAddControlObjectPassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport.Builder builderForValue) {
          if (addControlObjectPassportBuilder_ == null) {
            addControlObjectPassport_ = builderForValue.build();
            onChanged();
          } else {
            addControlObjectPassportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000010;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;</code>
         */
        public Builder mergeAddControlObjectPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport value) {
          if (addControlObjectPassportBuilder_ == null) {
            if (((bitField0_ & 0x00000010) == 0x00000010) &&
                addControlObjectPassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport.getDefaultInstance()) {
              addControlObjectPassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport.newBuilder(addControlObjectPassport_).mergeFrom(value).buildPartial();
            } else {
              addControlObjectPassport_ = value;
            }
            onChanged();
          } else {
            addControlObjectPassportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000010;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;</code>
         */
        public Builder clearAddControlObjectPassport() {
          if (addControlObjectPassportBuilder_ == null) {
            addControlObjectPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport.getDefaultInstance();
            onChanged();
          } else {
            addControlObjectPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000010);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport.Builder getAddControlObjectPassportBuilder() {
          bitField0_ |= 0x00000010;
          onChanged();
          return getAddControlObjectPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportOrBuilder getAddControlObjectPassportOrBuilder() {
          if (addControlObjectPassportBuilder_ != null) {
            return addControlObjectPassportBuilder_.getMessageOrBuilder();
          } else {
            return addControlObjectPassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportOrBuilder> 
            getAddControlObjectPassportFieldBuilder() {
          if (addControlObjectPassportBuilder_ == null) {
            addControlObjectPassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportOrBuilder>(
                    addControlObjectPassport_,
                    getParentForChildren(),
                    isClean());
            addControlObjectPassport_ = null;
          }
          return addControlObjectPassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 6;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport updControlObjectPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportOrBuilder> updControlObjectPassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 6;</code>
         */
        public boolean hasUpdControlObjectPassport() {
          return ((bitField0_ & 0x00000020) == 0x00000020);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 6;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport getUpdControlObjectPassport() {
          if (updControlObjectPassportBuilder_ == null) {
            return updControlObjectPassport_;
          } else {
            return updControlObjectPassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 6;</code>
         */
        public Builder setUpdControlObjectPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport value) {
          if (updControlObjectPassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updControlObjectPassport_ = value;
            onChanged();
          } else {
            updControlObjectPassportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000020;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 6;</code>
         */
        public Builder setUpdControlObjectPassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport.Builder builderForValue) {
          if (updControlObjectPassportBuilder_ == null) {
            updControlObjectPassport_ = builderForValue.build();
            onChanged();
          } else {
            updControlObjectPassportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000020;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 6;</code>
         */
        public Builder mergeUpdControlObjectPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport value) {
          if (updControlObjectPassportBuilder_ == null) {
            if (((bitField0_ & 0x00000020) == 0x00000020) &&
                updControlObjectPassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport.getDefaultInstance()) {
              updControlObjectPassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport.newBuilder(updControlObjectPassport_).mergeFrom(value).buildPartial();
            } else {
              updControlObjectPassport_ = value;
            }
            onChanged();
          } else {
            updControlObjectPassportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000020;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 6;</code>
         */
        public Builder clearUpdControlObjectPassport() {
          if (updControlObjectPassportBuilder_ == null) {
            updControlObjectPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport.getDefaultInstance();
            onChanged();
          } else {
            updControlObjectPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000020);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 6;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport.Builder getUpdControlObjectPassportBuilder() {
          bitField0_ |= 0x00000020;
          onChanged();
          return getUpdControlObjectPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 6;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportOrBuilder getUpdControlObjectPassportOrBuilder() {
          if (updControlObjectPassportBuilder_ != null) {
            return updControlObjectPassportBuilder_.getMessageOrBuilder();
          } else {
            return updControlObjectPassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 6;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportOrBuilder> 
            getUpdControlObjectPassportFieldBuilder() {
          if (updControlObjectPassportBuilder_ == null) {
            updControlObjectPassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportOrBuilder>(
                    updControlObjectPassport_,
                    getParentForChildren(),
                    isClean());
            updControlObjectPassport_ = null;
          }
          return updControlObjectPassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 7;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport delControlObjectPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportOrBuilder> delControlObjectPassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 7;</code>
         */
        public boolean hasDelControlObjectPassport() {
          return ((bitField0_ & 0x00000040) == 0x00000040);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 7;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport getDelControlObjectPassport() {
          if (delControlObjectPassportBuilder_ == null) {
            return delControlObjectPassport_;
          } else {
            return delControlObjectPassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 7;</code>
         */
        public Builder setDelControlObjectPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport value) {
          if (delControlObjectPassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            delControlObjectPassport_ = value;
            onChanged();
          } else {
            delControlObjectPassportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000040;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 7;</code>
         */
        public Builder setDelControlObjectPassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport.Builder builderForValue) {
          if (delControlObjectPassportBuilder_ == null) {
            delControlObjectPassport_ = builderForValue.build();
            onChanged();
          } else {
            delControlObjectPassportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000040;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 7;</code>
         */
        public Builder mergeDelControlObjectPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport value) {
          if (delControlObjectPassportBuilder_ == null) {
            if (((bitField0_ & 0x00000040) == 0x00000040) &&
                delControlObjectPassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport.getDefaultInstance()) {
              delControlObjectPassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport.newBuilder(delControlObjectPassport_).mergeFrom(value).buildPartial();
            } else {
              delControlObjectPassport_ = value;
            }
            onChanged();
          } else {
            delControlObjectPassportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000040;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 7;</code>
         */
        public Builder clearDelControlObjectPassport() {
          if (delControlObjectPassportBuilder_ == null) {
            delControlObjectPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport.getDefaultInstance();
            onChanged();
          } else {
            delControlObjectPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000040);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 7;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport.Builder getDelControlObjectPassportBuilder() {
          bitField0_ |= 0x00000040;
          onChanged();
          return getDelControlObjectPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 7;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportOrBuilder getDelControlObjectPassportOrBuilder() {
          if (delControlObjectPassportBuilder_ != null) {
            return delControlObjectPassportBuilder_.getMessageOrBuilder();
          } else {
            return delControlObjectPassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 7;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportOrBuilder> 
            getDelControlObjectPassportFieldBuilder() {
          if (delControlObjectPassportBuilder_ == null) {
            delControlObjectPassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportOrBuilder>(
                    delControlObjectPassport_,
                    getParentForChildren(),
                    isClean());
            delControlObjectPassport_ = null;
          }
          return delControlObjectPassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 8;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport addEquipmentPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportOrBuilder> addEquipmentPassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 8;</code>
         */
        public boolean hasAddEquipmentPassport() {
          return ((bitField0_ & 0x00000080) == 0x00000080);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 8;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport getAddEquipmentPassport() {
          if (addEquipmentPassportBuilder_ == null) {
            return addEquipmentPassport_;
          } else {
            return addEquipmentPassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 8;</code>
         */
        public Builder setAddEquipmentPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport value) {
          if (addEquipmentPassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addEquipmentPassport_ = value;
            onChanged();
          } else {
            addEquipmentPassportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000080;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 8;</code>
         */
        public Builder setAddEquipmentPassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport.Builder builderForValue) {
          if (addEquipmentPassportBuilder_ == null) {
            addEquipmentPassport_ = builderForValue.build();
            onChanged();
          } else {
            addEquipmentPassportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000080;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 8;</code>
         */
        public Builder mergeAddEquipmentPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport value) {
          if (addEquipmentPassportBuilder_ == null) {
            if (((bitField0_ & 0x00000080) == 0x00000080) &&
                addEquipmentPassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport.getDefaultInstance()) {
              addEquipmentPassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport.newBuilder(addEquipmentPassport_).mergeFrom(value).buildPartial();
            } else {
              addEquipmentPassport_ = value;
            }
            onChanged();
          } else {
            addEquipmentPassportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000080;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 8;</code>
         */
        public Builder clearAddEquipmentPassport() {
          if (addEquipmentPassportBuilder_ == null) {
            addEquipmentPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport.getDefaultInstance();
            onChanged();
          } else {
            addEquipmentPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000080);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 8;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport.Builder getAddEquipmentPassportBuilder() {
          bitField0_ |= 0x00000080;
          onChanged();
          return getAddEquipmentPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 8;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportOrBuilder getAddEquipmentPassportOrBuilder() {
          if (addEquipmentPassportBuilder_ != null) {
            return addEquipmentPassportBuilder_.getMessageOrBuilder();
          } else {
            return addEquipmentPassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 8;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportOrBuilder> 
            getAddEquipmentPassportFieldBuilder() {
          if (addEquipmentPassportBuilder_ == null) {
            addEquipmentPassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportOrBuilder>(
                    addEquipmentPassport_,
                    getParentForChildren(),
                    isClean());
            addEquipmentPassport_ = null;
          }
          return addEquipmentPassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 9;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport updEquipmentPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportOrBuilder> updEquipmentPassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 9;</code>
         */
        public boolean hasUpdEquipmentPassport() {
          return ((bitField0_ & 0x00000100) == 0x00000100);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 9;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport getUpdEquipmentPassport() {
          if (updEquipmentPassportBuilder_ == null) {
            return updEquipmentPassport_;
          } else {
            return updEquipmentPassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 9;</code>
         */
        public Builder setUpdEquipmentPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport value) {
          if (updEquipmentPassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updEquipmentPassport_ = value;
            onChanged();
          } else {
            updEquipmentPassportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000100;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 9;</code>
         */
        public Builder setUpdEquipmentPassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport.Builder builderForValue) {
          if (updEquipmentPassportBuilder_ == null) {
            updEquipmentPassport_ = builderForValue.build();
            onChanged();
          } else {
            updEquipmentPassportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000100;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 9;</code>
         */
        public Builder mergeUpdEquipmentPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport value) {
          if (updEquipmentPassportBuilder_ == null) {
            if (((bitField0_ & 0x00000100) == 0x00000100) &&
                updEquipmentPassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport.getDefaultInstance()) {
              updEquipmentPassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport.newBuilder(updEquipmentPassport_).mergeFrom(value).buildPartial();
            } else {
              updEquipmentPassport_ = value;
            }
            onChanged();
          } else {
            updEquipmentPassportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000100;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 9;</code>
         */
        public Builder clearUpdEquipmentPassport() {
          if (updEquipmentPassportBuilder_ == null) {
            updEquipmentPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport.getDefaultInstance();
            onChanged();
          } else {
            updEquipmentPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000100);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 9;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport.Builder getUpdEquipmentPassportBuilder() {
          bitField0_ |= 0x00000100;
          onChanged();
          return getUpdEquipmentPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 9;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportOrBuilder getUpdEquipmentPassportOrBuilder() {
          if (updEquipmentPassportBuilder_ != null) {
            return updEquipmentPassportBuilder_.getMessageOrBuilder();
          } else {
            return updEquipmentPassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 9;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportOrBuilder> 
            getUpdEquipmentPassportFieldBuilder() {
          if (updEquipmentPassportBuilder_ == null) {
            updEquipmentPassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportOrBuilder>(
                    updEquipmentPassport_,
                    getParentForChildren(),
                    isClean());
            updEquipmentPassport_ = null;
          }
          return updEquipmentPassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 10;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport delEquipmentPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportOrBuilder> delEquipmentPassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 10;</code>
         */
        public boolean hasDelEquipmentPassport() {
          return ((bitField0_ & 0x00000200) == 0x00000200);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 10;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport getDelEquipmentPassport() {
          if (delEquipmentPassportBuilder_ == null) {
            return delEquipmentPassport_;
          } else {
            return delEquipmentPassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 10;</code>
         */
        public Builder setDelEquipmentPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport value) {
          if (delEquipmentPassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            delEquipmentPassport_ = value;
            onChanged();
          } else {
            delEquipmentPassportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000200;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 10;</code>
         */
        public Builder setDelEquipmentPassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport.Builder builderForValue) {
          if (delEquipmentPassportBuilder_ == null) {
            delEquipmentPassport_ = builderForValue.build();
            onChanged();
          } else {
            delEquipmentPassportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000200;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 10;</code>
         */
        public Builder mergeDelEquipmentPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport value) {
          if (delEquipmentPassportBuilder_ == null) {
            if (((bitField0_ & 0x00000200) == 0x00000200) &&
                delEquipmentPassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport.getDefaultInstance()) {
              delEquipmentPassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport.newBuilder(delEquipmentPassport_).mergeFrom(value).buildPartial();
            } else {
              delEquipmentPassport_ = value;
            }
            onChanged();
          } else {
            delEquipmentPassportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000200;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 10;</code>
         */
        public Builder clearDelEquipmentPassport() {
          if (delEquipmentPassportBuilder_ == null) {
            delEquipmentPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport.getDefaultInstance();
            onChanged();
          } else {
            delEquipmentPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000200);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 10;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport.Builder getDelEquipmentPassportBuilder() {
          bitField0_ |= 0x00000200;
          onChanged();
          return getDelEquipmentPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 10;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportOrBuilder getDelEquipmentPassportOrBuilder() {
          if (delEquipmentPassportBuilder_ != null) {
            return delEquipmentPassportBuilder_.getMessageOrBuilder();
          } else {
            return delEquipmentPassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 10;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportOrBuilder> 
            getDelEquipmentPassportFieldBuilder() {
          if (delEquipmentPassportBuilder_ == null) {
            delEquipmentPassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportOrBuilder>(
                    delEquipmentPassport_,
                    getParentForChildren(),
                    isClean());
            delEquipmentPassport_ = null;
          }
          return delEquipmentPassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AckAnswer ack_answer = 11;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer ackAnswer_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswerOrBuilder> ackAnswerBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AckAnswer ack_answer = 11;</code>
         *
         * <pre>
         * ответ на аск объект
         * </pre>
         */
        public boolean hasAckAnswer() {
          return ((bitField0_ & 0x00000400) == 0x00000400);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AckAnswer ack_answer = 11;</code>
         *
         * <pre>
         * ответ на аск объект
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer getAckAnswer() {
          if (ackAnswerBuilder_ == null) {
            return ackAnswer_;
          } else {
            return ackAnswerBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AckAnswer ack_answer = 11;</code>
         *
         * <pre>
         * ответ на аск объект
         * </pre>
         */
        public Builder setAckAnswer(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer value) {
          if (ackAnswerBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ackAnswer_ = value;
            onChanged();
          } else {
            ackAnswerBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000400;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AckAnswer ack_answer = 11;</code>
         *
         * <pre>
         * ответ на аск объект
         * </pre>
         */
        public Builder setAckAnswer(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer.Builder builderForValue) {
          if (ackAnswerBuilder_ == null) {
            ackAnswer_ = builderForValue.build();
            onChanged();
          } else {
            ackAnswerBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000400;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AckAnswer ack_answer = 11;</code>
         *
         * <pre>
         * ответ на аск объект
         * </pre>
         */
        public Builder mergeAckAnswer(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer value) {
          if (ackAnswerBuilder_ == null) {
            if (((bitField0_ & 0x00000400) == 0x00000400) &&
                ackAnswer_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer.getDefaultInstance()) {
              ackAnswer_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer.newBuilder(ackAnswer_).mergeFrom(value).buildPartial();
            } else {
              ackAnswer_ = value;
            }
            onChanged();
          } else {
            ackAnswerBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000400;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AckAnswer ack_answer = 11;</code>
         *
         * <pre>
         * ответ на аск объект
         * </pre>
         */
        public Builder clearAckAnswer() {
          if (ackAnswerBuilder_ == null) {
            ackAnswer_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer.getDefaultInstance();
            onChanged();
          } else {
            ackAnswerBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000400);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AckAnswer ack_answer = 11;</code>
         *
         * <pre>
         * ответ на аск объект
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer.Builder getAckAnswerBuilder() {
          bitField0_ |= 0x00000400;
          onChanged();
          return getAckAnswerFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AckAnswer ack_answer = 11;</code>
         *
         * <pre>
         * ответ на аск объект
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswerOrBuilder getAckAnswerOrBuilder() {
          if (ackAnswerBuilder_ != null) {
            return ackAnswerBuilder_.getMessageOrBuilder();
          } else {
            return ackAnswer_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AckAnswer ack_answer = 11;</code>
         *
         * <pre>
         * ответ на аск объект
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswerOrBuilder> 
            getAckAnswerFieldBuilder() {
          if (ackAnswerBuilder_ == null) {
            ackAnswerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswer.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckAnswerOrBuilder>(
                    ackAnswer_,
                    getParentForChildren(),
                    isClean());
            ackAnswer_ = null;
          }
          return ackAnswerBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 12;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone addZone_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZoneOrBuilder> addZoneBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 12;</code>
         */
        public boolean hasAddZone() {
          return ((bitField0_ & 0x00000800) == 0x00000800);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 12;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone getAddZone() {
          if (addZoneBuilder_ == null) {
            return addZone_;
          } else {
            return addZoneBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 12;</code>
         */
        public Builder setAddZone(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone value) {
          if (addZoneBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addZone_ = value;
            onChanged();
          } else {
            addZoneBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000800;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 12;</code>
         */
        public Builder setAddZone(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone.Builder builderForValue) {
          if (addZoneBuilder_ == null) {
            addZone_ = builderForValue.build();
            onChanged();
          } else {
            addZoneBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000800;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 12;</code>
         */
        public Builder mergeAddZone(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone value) {
          if (addZoneBuilder_ == null) {
            if (((bitField0_ & 0x00000800) == 0x00000800) &&
                addZone_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone.getDefaultInstance()) {
              addZone_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone.newBuilder(addZone_).mergeFrom(value).buildPartial();
            } else {
              addZone_ = value;
            }
            onChanged();
          } else {
            addZoneBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000800;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 12;</code>
         */
        public Builder clearAddZone() {
          if (addZoneBuilder_ == null) {
            addZone_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone.getDefaultInstance();
            onChanged();
          } else {
            addZoneBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000800);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 12;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone.Builder getAddZoneBuilder() {
          bitField0_ |= 0x00000800;
          onChanged();
          return getAddZoneFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 12;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZoneOrBuilder getAddZoneOrBuilder() {
          if (addZoneBuilder_ != null) {
            return addZoneBuilder_.getMessageOrBuilder();
          } else {
            return addZone_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 12;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZoneOrBuilder> 
            getAddZoneFieldBuilder() {
          if (addZoneBuilder_ == null) {
            addZoneBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZoneOrBuilder>(
                    addZone_,
                    getParentForChildren(),
                    isClean());
            addZone_ = null;
          }
          return addZoneBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 13;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone updZone_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZoneOrBuilder> updZoneBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 13;</code>
         */
        public boolean hasUpdZone() {
          return ((bitField0_ & 0x00001000) == 0x00001000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 13;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone getUpdZone() {
          if (updZoneBuilder_ == null) {
            return updZone_;
          } else {
            return updZoneBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 13;</code>
         */
        public Builder setUpdZone(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone value) {
          if (updZoneBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updZone_ = value;
            onChanged();
          } else {
            updZoneBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00001000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 13;</code>
         */
        public Builder setUpdZone(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone.Builder builderForValue) {
          if (updZoneBuilder_ == null) {
            updZone_ = builderForValue.build();
            onChanged();
          } else {
            updZoneBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00001000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 13;</code>
         */
        public Builder mergeUpdZone(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone value) {
          if (updZoneBuilder_ == null) {
            if (((bitField0_ & 0x00001000) == 0x00001000) &&
                updZone_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone.getDefaultInstance()) {
              updZone_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone.newBuilder(updZone_).mergeFrom(value).buildPartial();
            } else {
              updZone_ = value;
            }
            onChanged();
          } else {
            updZoneBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00001000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 13;</code>
         */
        public Builder clearUpdZone() {
          if (updZoneBuilder_ == null) {
            updZone_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone.getDefaultInstance();
            onChanged();
          } else {
            updZoneBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00001000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 13;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone.Builder getUpdZoneBuilder() {
          bitField0_ |= 0x00001000;
          onChanged();
          return getUpdZoneFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 13;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZoneOrBuilder getUpdZoneOrBuilder() {
          if (updZoneBuilder_ != null) {
            return updZoneBuilder_.getMessageOrBuilder();
          } else {
            return updZone_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 13;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZoneOrBuilder> 
            getUpdZoneFieldBuilder() {
          if (updZoneBuilder_ == null) {
            updZoneBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZoneOrBuilder>(
                    updZone_,
                    getParentForChildren(),
                    isClean());
            updZone_ = null;
          }
          return updZoneBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 14;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone delZone_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZoneOrBuilder> delZoneBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 14;</code>
         */
        public boolean hasDelZone() {
          return ((bitField0_ & 0x00002000) == 0x00002000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 14;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone getDelZone() {
          if (delZoneBuilder_ == null) {
            return delZone_;
          } else {
            return delZoneBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 14;</code>
         */
        public Builder setDelZone(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone value) {
          if (delZoneBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            delZone_ = value;
            onChanged();
          } else {
            delZoneBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00002000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 14;</code>
         */
        public Builder setDelZone(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone.Builder builderForValue) {
          if (delZoneBuilder_ == null) {
            delZone_ = builderForValue.build();
            onChanged();
          } else {
            delZoneBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00002000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 14;</code>
         */
        public Builder mergeDelZone(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone value) {
          if (delZoneBuilder_ == null) {
            if (((bitField0_ & 0x00002000) == 0x00002000) &&
                delZone_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone.getDefaultInstance()) {
              delZone_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone.newBuilder(delZone_).mergeFrom(value).buildPartial();
            } else {
              delZone_ = value;
            }
            onChanged();
          } else {
            delZoneBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00002000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 14;</code>
         */
        public Builder clearDelZone() {
          if (delZoneBuilder_ == null) {
            delZone_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone.getDefaultInstance();
            onChanged();
          } else {
            delZoneBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00002000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 14;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone.Builder getDelZoneBuilder() {
          bitField0_ |= 0x00002000;
          onChanged();
          return getDelZoneFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 14;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZoneOrBuilder getDelZoneOrBuilder() {
          if (delZoneBuilder_ != null) {
            return delZoneBuilder_.getMessageOrBuilder();
          } else {
            return delZone_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 14;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZoneOrBuilder> 
            getDelZoneFieldBuilder() {
          if (delZoneBuilder_ == null) {
            delZoneBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZoneOrBuilder>(
                    delZone_,
                    getParentForChildren(),
                    isClean());
            delZone_ = null;
          }
          return delZoneBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 15;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport addClientPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassportOrBuilder> addClientPassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 15;</code>
         */
        public boolean hasAddClientPassport() {
          return ((bitField0_ & 0x00004000) == 0x00004000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 15;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport getAddClientPassport() {
          if (addClientPassportBuilder_ == null) {
            return addClientPassport_;
          } else {
            return addClientPassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 15;</code>
         */
        public Builder setAddClientPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport value) {
          if (addClientPassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addClientPassport_ = value;
            onChanged();
          } else {
            addClientPassportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00004000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 15;</code>
         */
        public Builder setAddClientPassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport.Builder builderForValue) {
          if (addClientPassportBuilder_ == null) {
            addClientPassport_ = builderForValue.build();
            onChanged();
          } else {
            addClientPassportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00004000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 15;</code>
         */
        public Builder mergeAddClientPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport value) {
          if (addClientPassportBuilder_ == null) {
            if (((bitField0_ & 0x00004000) == 0x00004000) &&
                addClientPassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport.getDefaultInstance()) {
              addClientPassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport.newBuilder(addClientPassport_).mergeFrom(value).buildPartial();
            } else {
              addClientPassport_ = value;
            }
            onChanged();
          } else {
            addClientPassportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00004000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 15;</code>
         */
        public Builder clearAddClientPassport() {
          if (addClientPassportBuilder_ == null) {
            addClientPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport.getDefaultInstance();
            onChanged();
          } else {
            addClientPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00004000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 15;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport.Builder getAddClientPassportBuilder() {
          bitField0_ |= 0x00004000;
          onChanged();
          return getAddClientPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 15;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassportOrBuilder getAddClientPassportOrBuilder() {
          if (addClientPassportBuilder_ != null) {
            return addClientPassportBuilder_.getMessageOrBuilder();
          } else {
            return addClientPassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 15;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassportOrBuilder> 
            getAddClientPassportFieldBuilder() {
          if (addClientPassportBuilder_ == null) {
            addClientPassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassportOrBuilder>(
                    addClientPassport_,
                    getParentForChildren(),
                    isClean());
            addClientPassport_ = null;
          }
          return addClientPassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 16;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport updClientPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassportOrBuilder> updClientPassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 16;</code>
         */
        public boolean hasUpdClientPassport() {
          return ((bitField0_ & 0x00008000) == 0x00008000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 16;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport getUpdClientPassport() {
          if (updClientPassportBuilder_ == null) {
            return updClientPassport_;
          } else {
            return updClientPassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 16;</code>
         */
        public Builder setUpdClientPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport value) {
          if (updClientPassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updClientPassport_ = value;
            onChanged();
          } else {
            updClientPassportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00008000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 16;</code>
         */
        public Builder setUpdClientPassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport.Builder builderForValue) {
          if (updClientPassportBuilder_ == null) {
            updClientPassport_ = builderForValue.build();
            onChanged();
          } else {
            updClientPassportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00008000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 16;</code>
         */
        public Builder mergeUpdClientPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport value) {
          if (updClientPassportBuilder_ == null) {
            if (((bitField0_ & 0x00008000) == 0x00008000) &&
                updClientPassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport.getDefaultInstance()) {
              updClientPassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport.newBuilder(updClientPassport_).mergeFrom(value).buildPartial();
            } else {
              updClientPassport_ = value;
            }
            onChanged();
          } else {
            updClientPassportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00008000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 16;</code>
         */
        public Builder clearUpdClientPassport() {
          if (updClientPassportBuilder_ == null) {
            updClientPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport.getDefaultInstance();
            onChanged();
          } else {
            updClientPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00008000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 16;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport.Builder getUpdClientPassportBuilder() {
          bitField0_ |= 0x00008000;
          onChanged();
          return getUpdClientPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 16;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassportOrBuilder getUpdClientPassportOrBuilder() {
          if (updClientPassportBuilder_ != null) {
            return updClientPassportBuilder_.getMessageOrBuilder();
          } else {
            return updClientPassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 16;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassportOrBuilder> 
            getUpdClientPassportFieldBuilder() {
          if (updClientPassportBuilder_ == null) {
            updClientPassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassportOrBuilder>(
                    updClientPassport_,
                    getParentForChildren(),
                    isClean());
            updClientPassport_ = null;
          }
          return updClientPassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 17;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport delClientPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassportOrBuilder> delClientPassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 17;</code>
         */
        public boolean hasDelClientPassport() {
          return ((bitField0_ & 0x00010000) == 0x00010000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 17;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport getDelClientPassport() {
          if (delClientPassportBuilder_ == null) {
            return delClientPassport_;
          } else {
            return delClientPassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 17;</code>
         */
        public Builder setDelClientPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport value) {
          if (delClientPassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            delClientPassport_ = value;
            onChanged();
          } else {
            delClientPassportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00010000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 17;</code>
         */
        public Builder setDelClientPassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport.Builder builderForValue) {
          if (delClientPassportBuilder_ == null) {
            delClientPassport_ = builderForValue.build();
            onChanged();
          } else {
            delClientPassportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00010000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 17;</code>
         */
        public Builder mergeDelClientPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport value) {
          if (delClientPassportBuilder_ == null) {
            if (((bitField0_ & 0x00010000) == 0x00010000) &&
                delClientPassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport.getDefaultInstance()) {
              delClientPassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport.newBuilder(delClientPassport_).mergeFrom(value).buildPartial();
            } else {
              delClientPassport_ = value;
            }
            onChanged();
          } else {
            delClientPassportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00010000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 17;</code>
         */
        public Builder clearDelClientPassport() {
          if (delClientPassportBuilder_ == null) {
            delClientPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport.getDefaultInstance();
            onChanged();
          } else {
            delClientPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00010000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 17;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport.Builder getDelClientPassportBuilder() {
          bitField0_ |= 0x00010000;
          onChanged();
          return getDelClientPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 17;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassportOrBuilder getDelClientPassportOrBuilder() {
          if (delClientPassportBuilder_ != null) {
            return delClientPassportBuilder_.getMessageOrBuilder();
          } else {
            return delClientPassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 17;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassportOrBuilder> 
            getDelClientPassportFieldBuilder() {
          if (delClientPassportBuilder_ == null) {
            delClientPassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassportOrBuilder>(
                    delClientPassport_,
                    getParentForChildren(),
                    isClean());
            delClientPassport_ = null;
          }
          return delClientPassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 19;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport addUserPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassportOrBuilder> addUserPassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 19;</code>
         */
        public boolean hasAddUserPassport() {
          return ((bitField0_ & 0x00020000) == 0x00020000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 19;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport getAddUserPassport() {
          if (addUserPassportBuilder_ == null) {
            return addUserPassport_;
          } else {
            return addUserPassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 19;</code>
         */
        public Builder setAddUserPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport value) {
          if (addUserPassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addUserPassport_ = value;
            onChanged();
          } else {
            addUserPassportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00020000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 19;</code>
         */
        public Builder setAddUserPassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport.Builder builderForValue) {
          if (addUserPassportBuilder_ == null) {
            addUserPassport_ = builderForValue.build();
            onChanged();
          } else {
            addUserPassportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00020000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 19;</code>
         */
        public Builder mergeAddUserPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport value) {
          if (addUserPassportBuilder_ == null) {
            if (((bitField0_ & 0x00020000) == 0x00020000) &&
                addUserPassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport.getDefaultInstance()) {
              addUserPassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport.newBuilder(addUserPassport_).mergeFrom(value).buildPartial();
            } else {
              addUserPassport_ = value;
            }
            onChanged();
          } else {
            addUserPassportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00020000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 19;</code>
         */
        public Builder clearAddUserPassport() {
          if (addUserPassportBuilder_ == null) {
            addUserPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport.getDefaultInstance();
            onChanged();
          } else {
            addUserPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00020000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 19;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport.Builder getAddUserPassportBuilder() {
          bitField0_ |= 0x00020000;
          onChanged();
          return getAddUserPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 19;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassportOrBuilder getAddUserPassportOrBuilder() {
          if (addUserPassportBuilder_ != null) {
            return addUserPassportBuilder_.getMessageOrBuilder();
          } else {
            return addUserPassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 19;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassportOrBuilder> 
            getAddUserPassportFieldBuilder() {
          if (addUserPassportBuilder_ == null) {
            addUserPassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassportOrBuilder>(
                    addUserPassport_,
                    getParentForChildren(),
                    isClean());
            addUserPassport_ = null;
          }
          return addUserPassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 20;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport updUserPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassportOrBuilder> updUserPassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 20;</code>
         */
        public boolean hasUpdUserPassport() {
          return ((bitField0_ & 0x00040000) == 0x00040000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 20;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport getUpdUserPassport() {
          if (updUserPassportBuilder_ == null) {
            return updUserPassport_;
          } else {
            return updUserPassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 20;</code>
         */
        public Builder setUpdUserPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport value) {
          if (updUserPassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updUserPassport_ = value;
            onChanged();
          } else {
            updUserPassportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00040000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 20;</code>
         */
        public Builder setUpdUserPassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport.Builder builderForValue) {
          if (updUserPassportBuilder_ == null) {
            updUserPassport_ = builderForValue.build();
            onChanged();
          } else {
            updUserPassportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00040000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 20;</code>
         */
        public Builder mergeUpdUserPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport value) {
          if (updUserPassportBuilder_ == null) {
            if (((bitField0_ & 0x00040000) == 0x00040000) &&
                updUserPassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport.getDefaultInstance()) {
              updUserPassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport.newBuilder(updUserPassport_).mergeFrom(value).buildPartial();
            } else {
              updUserPassport_ = value;
            }
            onChanged();
          } else {
            updUserPassportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00040000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 20;</code>
         */
        public Builder clearUpdUserPassport() {
          if (updUserPassportBuilder_ == null) {
            updUserPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport.getDefaultInstance();
            onChanged();
          } else {
            updUserPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00040000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 20;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport.Builder getUpdUserPassportBuilder() {
          bitField0_ |= 0x00040000;
          onChanged();
          return getUpdUserPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 20;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassportOrBuilder getUpdUserPassportOrBuilder() {
          if (updUserPassportBuilder_ != null) {
            return updUserPassportBuilder_.getMessageOrBuilder();
          } else {
            return updUserPassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 20;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassportOrBuilder> 
            getUpdUserPassportFieldBuilder() {
          if (updUserPassportBuilder_ == null) {
            updUserPassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassportOrBuilder>(
                    updUserPassport_,
                    getParentForChildren(),
                    isClean());
            updUserPassport_ = null;
          }
          return updUserPassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 21;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport delUserPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassportOrBuilder> delUserPassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 21;</code>
         */
        public boolean hasDelUserPassport() {
          return ((bitField0_ & 0x00080000) == 0x00080000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 21;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport getDelUserPassport() {
          if (delUserPassportBuilder_ == null) {
            return delUserPassport_;
          } else {
            return delUserPassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 21;</code>
         */
        public Builder setDelUserPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport value) {
          if (delUserPassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            delUserPassport_ = value;
            onChanged();
          } else {
            delUserPassportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00080000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 21;</code>
         */
        public Builder setDelUserPassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport.Builder builderForValue) {
          if (delUserPassportBuilder_ == null) {
            delUserPassport_ = builderForValue.build();
            onChanged();
          } else {
            delUserPassportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00080000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 21;</code>
         */
        public Builder mergeDelUserPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport value) {
          if (delUserPassportBuilder_ == null) {
            if (((bitField0_ & 0x00080000) == 0x00080000) &&
                delUserPassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport.getDefaultInstance()) {
              delUserPassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport.newBuilder(delUserPassport_).mergeFrom(value).buildPartial();
            } else {
              delUserPassport_ = value;
            }
            onChanged();
          } else {
            delUserPassportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00080000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 21;</code>
         */
        public Builder clearDelUserPassport() {
          if (delUserPassportBuilder_ == null) {
            delUserPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport.getDefaultInstance();
            onChanged();
          } else {
            delUserPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00080000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 21;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport.Builder getDelUserPassportBuilder() {
          bitField0_ |= 0x00080000;
          onChanged();
          return getDelUserPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 21;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassportOrBuilder getDelUserPassportOrBuilder() {
          if (delUserPassportBuilder_ != null) {
            return delUserPassportBuilder_.getMessageOrBuilder();
          } else {
            return delUserPassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 21;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassportOrBuilder> 
            getDelUserPassportFieldBuilder() {
          if (delUserPassportBuilder_ == null) {
            delUserPassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassportOrBuilder>(
                    delUserPassport_,
                    getParentForChildren(),
                    isClean());
            delUserPassport_ = null;
          }
          return delUserPassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 22;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport addInterfacePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportOrBuilder> addInterfacePassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 22;</code>
         */
        public boolean hasAddInterfacePassport() {
          return ((bitField0_ & 0x00100000) == 0x00100000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 22;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport getAddInterfacePassport() {
          if (addInterfacePassportBuilder_ == null) {
            return addInterfacePassport_;
          } else {
            return addInterfacePassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 22;</code>
         */
        public Builder setAddInterfacePassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport value) {
          if (addInterfacePassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addInterfacePassport_ = value;
            onChanged();
          } else {
            addInterfacePassportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00100000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 22;</code>
         */
        public Builder setAddInterfacePassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport.Builder builderForValue) {
          if (addInterfacePassportBuilder_ == null) {
            addInterfacePassport_ = builderForValue.build();
            onChanged();
          } else {
            addInterfacePassportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00100000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 22;</code>
         */
        public Builder mergeAddInterfacePassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport value) {
          if (addInterfacePassportBuilder_ == null) {
            if (((bitField0_ & 0x00100000) == 0x00100000) &&
                addInterfacePassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport.getDefaultInstance()) {
              addInterfacePassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport.newBuilder(addInterfacePassport_).mergeFrom(value).buildPartial();
            } else {
              addInterfacePassport_ = value;
            }
            onChanged();
          } else {
            addInterfacePassportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00100000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 22;</code>
         */
        public Builder clearAddInterfacePassport() {
          if (addInterfacePassportBuilder_ == null) {
            addInterfacePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport.getDefaultInstance();
            onChanged();
          } else {
            addInterfacePassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00100000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 22;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport.Builder getAddInterfacePassportBuilder() {
          bitField0_ |= 0x00100000;
          onChanged();
          return getAddInterfacePassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 22;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportOrBuilder getAddInterfacePassportOrBuilder() {
          if (addInterfacePassportBuilder_ != null) {
            return addInterfacePassportBuilder_.getMessageOrBuilder();
          } else {
            return addInterfacePassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 22;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportOrBuilder> 
            getAddInterfacePassportFieldBuilder() {
          if (addInterfacePassportBuilder_ == null) {
            addInterfacePassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportOrBuilder>(
                    addInterfacePassport_,
                    getParentForChildren(),
                    isClean());
            addInterfacePassport_ = null;
          }
          return addInterfacePassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 23;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport updInterfacePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportOrBuilder> updInterfacePassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 23;</code>
         */
        public boolean hasUpdInterfacePassport() {
          return ((bitField0_ & 0x00200000) == 0x00200000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 23;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport getUpdInterfacePassport() {
          if (updInterfacePassportBuilder_ == null) {
            return updInterfacePassport_;
          } else {
            return updInterfacePassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 23;</code>
         */
        public Builder setUpdInterfacePassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport value) {
          if (updInterfacePassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updInterfacePassport_ = value;
            onChanged();
          } else {
            updInterfacePassportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00200000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 23;</code>
         */
        public Builder setUpdInterfacePassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport.Builder builderForValue) {
          if (updInterfacePassportBuilder_ == null) {
            updInterfacePassport_ = builderForValue.build();
            onChanged();
          } else {
            updInterfacePassportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00200000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 23;</code>
         */
        public Builder mergeUpdInterfacePassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport value) {
          if (updInterfacePassportBuilder_ == null) {
            if (((bitField0_ & 0x00200000) == 0x00200000) &&
                updInterfacePassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport.getDefaultInstance()) {
              updInterfacePassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport.newBuilder(updInterfacePassport_).mergeFrom(value).buildPartial();
            } else {
              updInterfacePassport_ = value;
            }
            onChanged();
          } else {
            updInterfacePassportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00200000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 23;</code>
         */
        public Builder clearUpdInterfacePassport() {
          if (updInterfacePassportBuilder_ == null) {
            updInterfacePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport.getDefaultInstance();
            onChanged();
          } else {
            updInterfacePassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00200000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 23;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport.Builder getUpdInterfacePassportBuilder() {
          bitField0_ |= 0x00200000;
          onChanged();
          return getUpdInterfacePassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 23;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportOrBuilder getUpdInterfacePassportOrBuilder() {
          if (updInterfacePassportBuilder_ != null) {
            return updInterfacePassportBuilder_.getMessageOrBuilder();
          } else {
            return updInterfacePassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 23;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportOrBuilder> 
            getUpdInterfacePassportFieldBuilder() {
          if (updInterfacePassportBuilder_ == null) {
            updInterfacePassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportOrBuilder>(
                    updInterfacePassport_,
                    getParentForChildren(),
                    isClean());
            updInterfacePassport_ = null;
          }
          return updInterfacePassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 24;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport delInterfacePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportOrBuilder> delInterfacePassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 24;</code>
         */
        public boolean hasDelInterfacePassport() {
          return ((bitField0_ & 0x00400000) == 0x00400000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 24;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport getDelInterfacePassport() {
          if (delInterfacePassportBuilder_ == null) {
            return delInterfacePassport_;
          } else {
            return delInterfacePassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 24;</code>
         */
        public Builder setDelInterfacePassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport value) {
          if (delInterfacePassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            delInterfacePassport_ = value;
            onChanged();
          } else {
            delInterfacePassportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00400000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 24;</code>
         */
        public Builder setDelInterfacePassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport.Builder builderForValue) {
          if (delInterfacePassportBuilder_ == null) {
            delInterfacePassport_ = builderForValue.build();
            onChanged();
          } else {
            delInterfacePassportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00400000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 24;</code>
         */
        public Builder mergeDelInterfacePassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport value) {
          if (delInterfacePassportBuilder_ == null) {
            if (((bitField0_ & 0x00400000) == 0x00400000) &&
                delInterfacePassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport.getDefaultInstance()) {
              delInterfacePassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport.newBuilder(delInterfacePassport_).mergeFrom(value).buildPartial();
            } else {
              delInterfacePassport_ = value;
            }
            onChanged();
          } else {
            delInterfacePassportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00400000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 24;</code>
         */
        public Builder clearDelInterfacePassport() {
          if (delInterfacePassportBuilder_ == null) {
            delInterfacePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport.getDefaultInstance();
            onChanged();
          } else {
            delInterfacePassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00400000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 24;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport.Builder getDelInterfacePassportBuilder() {
          bitField0_ |= 0x00400000;
          onChanged();
          return getDelInterfacePassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 24;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportOrBuilder getDelInterfacePassportOrBuilder() {
          if (delInterfacePassportBuilder_ != null) {
            return delInterfacePassportBuilder_.getMessageOrBuilder();
          } else {
            return delInterfacePassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 24;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportOrBuilder> 
            getDelInterfacePassportFieldBuilder() {
          if (delInterfacePassportBuilder_ == null) {
            delInterfacePassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportOrBuilder>(
                    delInterfacePassport_,
                    getParentForChildren(),
                    isClean());
            delInterfacePassport_ = null;
          }
          return delInterfacePassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 25;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType addControlObjectPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportTypeOrBuilder> addControlObjectPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 25;</code>
         */
        public boolean hasAddControlObjectPassportType() {
          return ((bitField0_ & 0x00800000) == 0x00800000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 25;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType getAddControlObjectPassportType() {
          if (addControlObjectPassportTypeBuilder_ == null) {
            return addControlObjectPassportType_;
          } else {
            return addControlObjectPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 25;</code>
         */
        public Builder setAddControlObjectPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType value) {
          if (addControlObjectPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addControlObjectPassportType_ = value;
            onChanged();
          } else {
            addControlObjectPassportTypeBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00800000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 25;</code>
         */
        public Builder setAddControlObjectPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType.Builder builderForValue) {
          if (addControlObjectPassportTypeBuilder_ == null) {
            addControlObjectPassportType_ = builderForValue.build();
            onChanged();
          } else {
            addControlObjectPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00800000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 25;</code>
         */
        public Builder mergeAddControlObjectPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType value) {
          if (addControlObjectPassportTypeBuilder_ == null) {
            if (((bitField0_ & 0x00800000) == 0x00800000) &&
                addControlObjectPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType.getDefaultInstance()) {
              addControlObjectPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType.newBuilder(addControlObjectPassportType_).mergeFrom(value).buildPartial();
            } else {
              addControlObjectPassportType_ = value;
            }
            onChanged();
          } else {
            addControlObjectPassportTypeBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00800000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 25;</code>
         */
        public Builder clearAddControlObjectPassportType() {
          if (addControlObjectPassportTypeBuilder_ == null) {
            addControlObjectPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType.getDefaultInstance();
            onChanged();
          } else {
            addControlObjectPassportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00800000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 25;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType.Builder getAddControlObjectPassportTypeBuilder() {
          bitField0_ |= 0x00800000;
          onChanged();
          return getAddControlObjectPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 25;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportTypeOrBuilder getAddControlObjectPassportTypeOrBuilder() {
          if (addControlObjectPassportTypeBuilder_ != null) {
            return addControlObjectPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return addControlObjectPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 25;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportTypeOrBuilder> 
            getAddControlObjectPassportTypeFieldBuilder() {
          if (addControlObjectPassportTypeBuilder_ == null) {
            addControlObjectPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportTypeOrBuilder>(
                    addControlObjectPassportType_,
                    getParentForChildren(),
                    isClean());
            addControlObjectPassportType_ = null;
          }
          return addControlObjectPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 26;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType updControlObjectPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportTypeOrBuilder> updControlObjectPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 26;</code>
         */
        public boolean hasUpdControlObjectPassportType() {
          return ((bitField0_ & 0x01000000) == 0x01000000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 26;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType getUpdControlObjectPassportType() {
          if (updControlObjectPassportTypeBuilder_ == null) {
            return updControlObjectPassportType_;
          } else {
            return updControlObjectPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 26;</code>
         */
        public Builder setUpdControlObjectPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType value) {
          if (updControlObjectPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updControlObjectPassportType_ = value;
            onChanged();
          } else {
            updControlObjectPassportTypeBuilder_.setMessage(value);
          }
          bitField0_ |= 0x01000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 26;</code>
         */
        public Builder setUpdControlObjectPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType.Builder builderForValue) {
          if (updControlObjectPassportTypeBuilder_ == null) {
            updControlObjectPassportType_ = builderForValue.build();
            onChanged();
          } else {
            updControlObjectPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x01000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 26;</code>
         */
        public Builder mergeUpdControlObjectPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType value) {
          if (updControlObjectPassportTypeBuilder_ == null) {
            if (((bitField0_ & 0x01000000) == 0x01000000) &&
                updControlObjectPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType.getDefaultInstance()) {
              updControlObjectPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType.newBuilder(updControlObjectPassportType_).mergeFrom(value).buildPartial();
            } else {
              updControlObjectPassportType_ = value;
            }
            onChanged();
          } else {
            updControlObjectPassportTypeBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x01000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 26;</code>
         */
        public Builder clearUpdControlObjectPassportType() {
          if (updControlObjectPassportTypeBuilder_ == null) {
            updControlObjectPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType.getDefaultInstance();
            onChanged();
          } else {
            updControlObjectPassportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x01000000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 26;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType.Builder getUpdControlObjectPassportTypeBuilder() {
          bitField0_ |= 0x01000000;
          onChanged();
          return getUpdControlObjectPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 26;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportTypeOrBuilder getUpdControlObjectPassportTypeOrBuilder() {
          if (updControlObjectPassportTypeBuilder_ != null) {
            return updControlObjectPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return updControlObjectPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 26;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportTypeOrBuilder> 
            getUpdControlObjectPassportTypeFieldBuilder() {
          if (updControlObjectPassportTypeBuilder_ == null) {
            updControlObjectPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportTypeOrBuilder>(
                    updControlObjectPassportType_,
                    getParentForChildren(),
                    isClean());
            updControlObjectPassportType_ = null;
          }
          return updControlObjectPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 27;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType delControlObjectPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportTypeOrBuilder> delControlObjectPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 27;</code>
         */
        public boolean hasDelControlObjectPassportType() {
          return ((bitField0_ & 0x02000000) == 0x02000000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 27;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType getDelControlObjectPassportType() {
          if (delControlObjectPassportTypeBuilder_ == null) {
            return delControlObjectPassportType_;
          } else {
            return delControlObjectPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 27;</code>
         */
        public Builder setDelControlObjectPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType value) {
          if (delControlObjectPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            delControlObjectPassportType_ = value;
            onChanged();
          } else {
            delControlObjectPassportTypeBuilder_.setMessage(value);
          }
          bitField0_ |= 0x02000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 27;</code>
         */
        public Builder setDelControlObjectPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType.Builder builderForValue) {
          if (delControlObjectPassportTypeBuilder_ == null) {
            delControlObjectPassportType_ = builderForValue.build();
            onChanged();
          } else {
            delControlObjectPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x02000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 27;</code>
         */
        public Builder mergeDelControlObjectPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType value) {
          if (delControlObjectPassportTypeBuilder_ == null) {
            if (((bitField0_ & 0x02000000) == 0x02000000) &&
                delControlObjectPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType.getDefaultInstance()) {
              delControlObjectPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType.newBuilder(delControlObjectPassportType_).mergeFrom(value).buildPartial();
            } else {
              delControlObjectPassportType_ = value;
            }
            onChanged();
          } else {
            delControlObjectPassportTypeBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x02000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 27;</code>
         */
        public Builder clearDelControlObjectPassportType() {
          if (delControlObjectPassportTypeBuilder_ == null) {
            delControlObjectPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType.getDefaultInstance();
            onChanged();
          } else {
            delControlObjectPassportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x02000000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 27;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType.Builder getDelControlObjectPassportTypeBuilder() {
          bitField0_ |= 0x02000000;
          onChanged();
          return getDelControlObjectPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 27;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportTypeOrBuilder getDelControlObjectPassportTypeOrBuilder() {
          if (delControlObjectPassportTypeBuilder_ != null) {
            return delControlObjectPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return delControlObjectPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 27;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportTypeOrBuilder> 
            getDelControlObjectPassportTypeFieldBuilder() {
          if (delControlObjectPassportTypeBuilder_ == null) {
            delControlObjectPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportTypeOrBuilder>(
                    delControlObjectPassportType_,
                    getParentForChildren(),
                    isClean());
            delControlObjectPassportType_ = null;
          }
          return delControlObjectPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 28;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType addControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportTypeOrBuilder> addControlElementPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 28;</code>
         */
        public boolean hasAddControlElementPassportType() {
          return ((bitField0_ & 0x04000000) == 0x04000000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 28;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType getAddControlElementPassportType() {
          if (addControlElementPassportTypeBuilder_ == null) {
            return addControlElementPassportType_;
          } else {
            return addControlElementPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 28;</code>
         */
        public Builder setAddControlElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType value) {
          if (addControlElementPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addControlElementPassportType_ = value;
            onChanged();
          } else {
            addControlElementPassportTypeBuilder_.setMessage(value);
          }
          bitField0_ |= 0x04000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 28;</code>
         */
        public Builder setAddControlElementPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType.Builder builderForValue) {
          if (addControlElementPassportTypeBuilder_ == null) {
            addControlElementPassportType_ = builderForValue.build();
            onChanged();
          } else {
            addControlElementPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x04000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 28;</code>
         */
        public Builder mergeAddControlElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType value) {
          if (addControlElementPassportTypeBuilder_ == null) {
            if (((bitField0_ & 0x04000000) == 0x04000000) &&
                addControlElementPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType.getDefaultInstance()) {
              addControlElementPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType.newBuilder(addControlElementPassportType_).mergeFrom(value).buildPartial();
            } else {
              addControlElementPassportType_ = value;
            }
            onChanged();
          } else {
            addControlElementPassportTypeBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x04000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 28;</code>
         */
        public Builder clearAddControlElementPassportType() {
          if (addControlElementPassportTypeBuilder_ == null) {
            addControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType.getDefaultInstance();
            onChanged();
          } else {
            addControlElementPassportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x04000000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 28;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType.Builder getAddControlElementPassportTypeBuilder() {
          bitField0_ |= 0x04000000;
          onChanged();
          return getAddControlElementPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 28;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportTypeOrBuilder getAddControlElementPassportTypeOrBuilder() {
          if (addControlElementPassportTypeBuilder_ != null) {
            return addControlElementPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return addControlElementPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 28;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportTypeOrBuilder> 
            getAddControlElementPassportTypeFieldBuilder() {
          if (addControlElementPassportTypeBuilder_ == null) {
            addControlElementPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportTypeOrBuilder>(
                    addControlElementPassportType_,
                    getParentForChildren(),
                    isClean());
            addControlElementPassportType_ = null;
          }
          return addControlElementPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 29;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType updControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportTypeOrBuilder> updControlElementPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 29;</code>
         */
        public boolean hasUpdControlElementPassportType() {
          return ((bitField0_ & 0x08000000) == 0x08000000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 29;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType getUpdControlElementPassportType() {
          if (updControlElementPassportTypeBuilder_ == null) {
            return updControlElementPassportType_;
          } else {
            return updControlElementPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 29;</code>
         */
        public Builder setUpdControlElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType value) {
          if (updControlElementPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updControlElementPassportType_ = value;
            onChanged();
          } else {
            updControlElementPassportTypeBuilder_.setMessage(value);
          }
          bitField0_ |= 0x08000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 29;</code>
         */
        public Builder setUpdControlElementPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType.Builder builderForValue) {
          if (updControlElementPassportTypeBuilder_ == null) {
            updControlElementPassportType_ = builderForValue.build();
            onChanged();
          } else {
            updControlElementPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x08000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 29;</code>
         */
        public Builder mergeUpdControlElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType value) {
          if (updControlElementPassportTypeBuilder_ == null) {
            if (((bitField0_ & 0x08000000) == 0x08000000) &&
                updControlElementPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType.getDefaultInstance()) {
              updControlElementPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType.newBuilder(updControlElementPassportType_).mergeFrom(value).buildPartial();
            } else {
              updControlElementPassportType_ = value;
            }
            onChanged();
          } else {
            updControlElementPassportTypeBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x08000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 29;</code>
         */
        public Builder clearUpdControlElementPassportType() {
          if (updControlElementPassportTypeBuilder_ == null) {
            updControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType.getDefaultInstance();
            onChanged();
          } else {
            updControlElementPassportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x08000000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 29;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType.Builder getUpdControlElementPassportTypeBuilder() {
          bitField0_ |= 0x08000000;
          onChanged();
          return getUpdControlElementPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 29;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportTypeOrBuilder getUpdControlElementPassportTypeOrBuilder() {
          if (updControlElementPassportTypeBuilder_ != null) {
            return updControlElementPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return updControlElementPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 29;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportTypeOrBuilder> 
            getUpdControlElementPassportTypeFieldBuilder() {
          if (updControlElementPassportTypeBuilder_ == null) {
            updControlElementPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportTypeOrBuilder>(
                    updControlElementPassportType_,
                    getParentForChildren(),
                    isClean());
            updControlElementPassportType_ = null;
          }
          return updControlElementPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 30;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType delControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportTypeOrBuilder> delControlElementPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 30;</code>
         */
        public boolean hasDelControlElementPassportType() {
          return ((bitField0_ & 0x10000000) == 0x10000000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 30;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType getDelControlElementPassportType() {
          if (delControlElementPassportTypeBuilder_ == null) {
            return delControlElementPassportType_;
          } else {
            return delControlElementPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 30;</code>
         */
        public Builder setDelControlElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType value) {
          if (delControlElementPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            delControlElementPassportType_ = value;
            onChanged();
          } else {
            delControlElementPassportTypeBuilder_.setMessage(value);
          }
          bitField0_ |= 0x10000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 30;</code>
         */
        public Builder setDelControlElementPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType.Builder builderForValue) {
          if (delControlElementPassportTypeBuilder_ == null) {
            delControlElementPassportType_ = builderForValue.build();
            onChanged();
          } else {
            delControlElementPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x10000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 30;</code>
         */
        public Builder mergeDelControlElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType value) {
          if (delControlElementPassportTypeBuilder_ == null) {
            if (((bitField0_ & 0x10000000) == 0x10000000) &&
                delControlElementPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType.getDefaultInstance()) {
              delControlElementPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType.newBuilder(delControlElementPassportType_).mergeFrom(value).buildPartial();
            } else {
              delControlElementPassportType_ = value;
            }
            onChanged();
          } else {
            delControlElementPassportTypeBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x10000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 30;</code>
         */
        public Builder clearDelControlElementPassportType() {
          if (delControlElementPassportTypeBuilder_ == null) {
            delControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType.getDefaultInstance();
            onChanged();
          } else {
            delControlElementPassportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x10000000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 30;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType.Builder getDelControlElementPassportTypeBuilder() {
          bitField0_ |= 0x10000000;
          onChanged();
          return getDelControlElementPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 30;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportTypeOrBuilder getDelControlElementPassportTypeOrBuilder() {
          if (delControlElementPassportTypeBuilder_ != null) {
            return delControlElementPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return delControlElementPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 30;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportTypeOrBuilder> 
            getDelControlElementPassportTypeFieldBuilder() {
          if (delControlElementPassportTypeBuilder_ == null) {
            delControlElementPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportTypeOrBuilder>(
                    delControlElementPassportType_,
                    getParentForChildren(),
                    isClean());
            delControlElementPassportType_ = null;
          }
          return delControlElementPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 31;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType addEquipmentPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportTypeOrBuilder> addEquipmentPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 31;</code>
         */
        public boolean hasAddEquipmentPassportType() {
          return ((bitField0_ & 0x20000000) == 0x20000000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 31;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType getAddEquipmentPassportType() {
          if (addEquipmentPassportTypeBuilder_ == null) {
            return addEquipmentPassportType_;
          } else {
            return addEquipmentPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 31;</code>
         */
        public Builder setAddEquipmentPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType value) {
          if (addEquipmentPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addEquipmentPassportType_ = value;
            onChanged();
          } else {
            addEquipmentPassportTypeBuilder_.setMessage(value);
          }
          bitField0_ |= 0x20000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 31;</code>
         */
        public Builder setAddEquipmentPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType.Builder builderForValue) {
          if (addEquipmentPassportTypeBuilder_ == null) {
            addEquipmentPassportType_ = builderForValue.build();
            onChanged();
          } else {
            addEquipmentPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x20000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 31;</code>
         */
        public Builder mergeAddEquipmentPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType value) {
          if (addEquipmentPassportTypeBuilder_ == null) {
            if (((bitField0_ & 0x20000000) == 0x20000000) &&
                addEquipmentPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType.getDefaultInstance()) {
              addEquipmentPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType.newBuilder(addEquipmentPassportType_).mergeFrom(value).buildPartial();
            } else {
              addEquipmentPassportType_ = value;
            }
            onChanged();
          } else {
            addEquipmentPassportTypeBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x20000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 31;</code>
         */
        public Builder clearAddEquipmentPassportType() {
          if (addEquipmentPassportTypeBuilder_ == null) {
            addEquipmentPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType.getDefaultInstance();
            onChanged();
          } else {
            addEquipmentPassportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x20000000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 31;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType.Builder getAddEquipmentPassportTypeBuilder() {
          bitField0_ |= 0x20000000;
          onChanged();
          return getAddEquipmentPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 31;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportTypeOrBuilder getAddEquipmentPassportTypeOrBuilder() {
          if (addEquipmentPassportTypeBuilder_ != null) {
            return addEquipmentPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return addEquipmentPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 31;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportTypeOrBuilder> 
            getAddEquipmentPassportTypeFieldBuilder() {
          if (addEquipmentPassportTypeBuilder_ == null) {
            addEquipmentPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportTypeOrBuilder>(
                    addEquipmentPassportType_,
                    getParentForChildren(),
                    isClean());
            addEquipmentPassportType_ = null;
          }
          return addEquipmentPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 32;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType updEquipmentPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportTypeOrBuilder> updEquipmentPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 32;</code>
         */
        public boolean hasUpdEquipmentPassportType() {
          return ((bitField0_ & 0x40000000) == 0x40000000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 32;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType getUpdEquipmentPassportType() {
          if (updEquipmentPassportTypeBuilder_ == null) {
            return updEquipmentPassportType_;
          } else {
            return updEquipmentPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 32;</code>
         */
        public Builder setUpdEquipmentPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType value) {
          if (updEquipmentPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updEquipmentPassportType_ = value;
            onChanged();
          } else {
            updEquipmentPassportTypeBuilder_.setMessage(value);
          }
          bitField0_ |= 0x40000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 32;</code>
         */
        public Builder setUpdEquipmentPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType.Builder builderForValue) {
          if (updEquipmentPassportTypeBuilder_ == null) {
            updEquipmentPassportType_ = builderForValue.build();
            onChanged();
          } else {
            updEquipmentPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x40000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 32;</code>
         */
        public Builder mergeUpdEquipmentPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType value) {
          if (updEquipmentPassportTypeBuilder_ == null) {
            if (((bitField0_ & 0x40000000) == 0x40000000) &&
                updEquipmentPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType.getDefaultInstance()) {
              updEquipmentPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType.newBuilder(updEquipmentPassportType_).mergeFrom(value).buildPartial();
            } else {
              updEquipmentPassportType_ = value;
            }
            onChanged();
          } else {
            updEquipmentPassportTypeBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x40000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 32;</code>
         */
        public Builder clearUpdEquipmentPassportType() {
          if (updEquipmentPassportTypeBuilder_ == null) {
            updEquipmentPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType.getDefaultInstance();
            onChanged();
          } else {
            updEquipmentPassportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x40000000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 32;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType.Builder getUpdEquipmentPassportTypeBuilder() {
          bitField0_ |= 0x40000000;
          onChanged();
          return getUpdEquipmentPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 32;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportTypeOrBuilder getUpdEquipmentPassportTypeOrBuilder() {
          if (updEquipmentPassportTypeBuilder_ != null) {
            return updEquipmentPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return updEquipmentPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 32;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportTypeOrBuilder> 
            getUpdEquipmentPassportTypeFieldBuilder() {
          if (updEquipmentPassportTypeBuilder_ == null) {
            updEquipmentPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportTypeOrBuilder>(
                    updEquipmentPassportType_,
                    getParentForChildren(),
                    isClean());
            updEquipmentPassportType_ = null;
          }
          return updEquipmentPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 33;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType delEquipmentPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportTypeOrBuilder> delEquipmentPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 33;</code>
         */
        public boolean hasDelEquipmentPassportType() {
          return ((bitField0_ & 0x80000000) == 0x80000000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 33;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType getDelEquipmentPassportType() {
          if (delEquipmentPassportTypeBuilder_ == null) {
            return delEquipmentPassportType_;
          } else {
            return delEquipmentPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 33;</code>
         */
        public Builder setDelEquipmentPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType value) {
          if (delEquipmentPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            delEquipmentPassportType_ = value;
            onChanged();
          } else {
            delEquipmentPassportTypeBuilder_.setMessage(value);
          }
          bitField0_ |= 0x80000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 33;</code>
         */
        public Builder setDelEquipmentPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType.Builder builderForValue) {
          if (delEquipmentPassportTypeBuilder_ == null) {
            delEquipmentPassportType_ = builderForValue.build();
            onChanged();
          } else {
            delEquipmentPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x80000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 33;</code>
         */
        public Builder mergeDelEquipmentPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType value) {
          if (delEquipmentPassportTypeBuilder_ == null) {
            if (((bitField0_ & 0x80000000) == 0x80000000) &&
                delEquipmentPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType.getDefaultInstance()) {
              delEquipmentPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType.newBuilder(delEquipmentPassportType_).mergeFrom(value).buildPartial();
            } else {
              delEquipmentPassportType_ = value;
            }
            onChanged();
          } else {
            delEquipmentPassportTypeBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x80000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 33;</code>
         */
        public Builder clearDelEquipmentPassportType() {
          if (delEquipmentPassportTypeBuilder_ == null) {
            delEquipmentPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType.getDefaultInstance();
            onChanged();
          } else {
            delEquipmentPassportTypeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x80000000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 33;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType.Builder getDelEquipmentPassportTypeBuilder() {
          bitField0_ |= 0x80000000;
          onChanged();
          return getDelEquipmentPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 33;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportTypeOrBuilder getDelEquipmentPassportTypeOrBuilder() {
          if (delEquipmentPassportTypeBuilder_ != null) {
            return delEquipmentPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return delEquipmentPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 33;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportTypeOrBuilder> 
            getDelEquipmentPassportTypeFieldBuilder() {
          if (delEquipmentPassportTypeBuilder_ == null) {
            delEquipmentPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportTypeOrBuilder>(
                    delEquipmentPassportType_,
                    getParentForChildren(),
                    isClean());
            delEquipmentPassportType_ = null;
          }
          return delEquipmentPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 34;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType addManagedElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportTypeOrBuilder> addManagedElementPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 34;</code>
         */
        public boolean hasAddManagedElementPassportType() {
          return ((bitField1_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 34;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType getAddManagedElementPassportType() {
          if (addManagedElementPassportTypeBuilder_ == null) {
            return addManagedElementPassportType_;
          } else {
            return addManagedElementPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 34;</code>
         */
        public Builder setAddManagedElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType value) {
          if (addManagedElementPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addManagedElementPassportType_ = value;
            onChanged();
          } else {
            addManagedElementPassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 34;</code>
         */
        public Builder setAddManagedElementPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType.Builder builderForValue) {
          if (addManagedElementPassportTypeBuilder_ == null) {
            addManagedElementPassportType_ = builderForValue.build();
            onChanged();
          } else {
            addManagedElementPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 34;</code>
         */
        public Builder mergeAddManagedElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType value) {
          if (addManagedElementPassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x00000001) == 0x00000001) &&
                addManagedElementPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType.getDefaultInstance()) {
              addManagedElementPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType.newBuilder(addManagedElementPassportType_).mergeFrom(value).buildPartial();
            } else {
              addManagedElementPassportType_ = value;
            }
            onChanged();
          } else {
            addManagedElementPassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 34;</code>
         */
        public Builder clearAddManagedElementPassportType() {
          if (addManagedElementPassportTypeBuilder_ == null) {
            addManagedElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType.getDefaultInstance();
            onChanged();
          } else {
            addManagedElementPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 34;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType.Builder getAddManagedElementPassportTypeBuilder() {
          bitField1_ |= 0x00000001;
          onChanged();
          return getAddManagedElementPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 34;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportTypeOrBuilder getAddManagedElementPassportTypeOrBuilder() {
          if (addManagedElementPassportTypeBuilder_ != null) {
            return addManagedElementPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return addManagedElementPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 34;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportTypeOrBuilder> 
            getAddManagedElementPassportTypeFieldBuilder() {
          if (addManagedElementPassportTypeBuilder_ == null) {
            addManagedElementPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportTypeOrBuilder>(
                    addManagedElementPassportType_,
                    getParentForChildren(),
                    isClean());
            addManagedElementPassportType_ = null;
          }
          return addManagedElementPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 35;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType updManagedElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportTypeOrBuilder> updManagedElementPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 35;</code>
         */
        public boolean hasUpdManagedElementPassportType() {
          return ((bitField1_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 35;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType getUpdManagedElementPassportType() {
          if (updManagedElementPassportTypeBuilder_ == null) {
            return updManagedElementPassportType_;
          } else {
            return updManagedElementPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 35;</code>
         */
        public Builder setUpdManagedElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType value) {
          if (updManagedElementPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updManagedElementPassportType_ = value;
            onChanged();
          } else {
            updManagedElementPassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 35;</code>
         */
        public Builder setUpdManagedElementPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType.Builder builderForValue) {
          if (updManagedElementPassportTypeBuilder_ == null) {
            updManagedElementPassportType_ = builderForValue.build();
            onChanged();
          } else {
            updManagedElementPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 35;</code>
         */
        public Builder mergeUpdManagedElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType value) {
          if (updManagedElementPassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x00000002) == 0x00000002) &&
                updManagedElementPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType.getDefaultInstance()) {
              updManagedElementPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType.newBuilder(updManagedElementPassportType_).mergeFrom(value).buildPartial();
            } else {
              updManagedElementPassportType_ = value;
            }
            onChanged();
          } else {
            updManagedElementPassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 35;</code>
         */
        public Builder clearUpdManagedElementPassportType() {
          if (updManagedElementPassportTypeBuilder_ == null) {
            updManagedElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType.getDefaultInstance();
            onChanged();
          } else {
            updManagedElementPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000002);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 35;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType.Builder getUpdManagedElementPassportTypeBuilder() {
          bitField1_ |= 0x00000002;
          onChanged();
          return getUpdManagedElementPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 35;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportTypeOrBuilder getUpdManagedElementPassportTypeOrBuilder() {
          if (updManagedElementPassportTypeBuilder_ != null) {
            return updManagedElementPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return updManagedElementPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 35;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportTypeOrBuilder> 
            getUpdManagedElementPassportTypeFieldBuilder() {
          if (updManagedElementPassportTypeBuilder_ == null) {
            updManagedElementPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportTypeOrBuilder>(
                    updManagedElementPassportType_,
                    getParentForChildren(),
                    isClean());
            updManagedElementPassportType_ = null;
          }
          return updManagedElementPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 36;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType delManagedElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportTypeOrBuilder> delManagedElementPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 36;</code>
         */
        public boolean hasDelManagedElementPassportType() {
          return ((bitField1_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 36;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType getDelManagedElementPassportType() {
          if (delManagedElementPassportTypeBuilder_ == null) {
            return delManagedElementPassportType_;
          } else {
            return delManagedElementPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 36;</code>
         */
        public Builder setDelManagedElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType value) {
          if (delManagedElementPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            delManagedElementPassportType_ = value;
            onChanged();
          } else {
            delManagedElementPassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 36;</code>
         */
        public Builder setDelManagedElementPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType.Builder builderForValue) {
          if (delManagedElementPassportTypeBuilder_ == null) {
            delManagedElementPassportType_ = builderForValue.build();
            onChanged();
          } else {
            delManagedElementPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 36;</code>
         */
        public Builder mergeDelManagedElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType value) {
          if (delManagedElementPassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x00000004) == 0x00000004) &&
                delManagedElementPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType.getDefaultInstance()) {
              delManagedElementPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType.newBuilder(delManagedElementPassportType_).mergeFrom(value).buildPartial();
            } else {
              delManagedElementPassportType_ = value;
            }
            onChanged();
          } else {
            delManagedElementPassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 36;</code>
         */
        public Builder clearDelManagedElementPassportType() {
          if (delManagedElementPassportTypeBuilder_ == null) {
            delManagedElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType.getDefaultInstance();
            onChanged();
          } else {
            delManagedElementPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000004);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 36;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType.Builder getDelManagedElementPassportTypeBuilder() {
          bitField1_ |= 0x00000004;
          onChanged();
          return getDelManagedElementPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 36;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportTypeOrBuilder getDelManagedElementPassportTypeOrBuilder() {
          if (delManagedElementPassportTypeBuilder_ != null) {
            return delManagedElementPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return delManagedElementPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 36;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportTypeOrBuilder> 
            getDelManagedElementPassportTypeFieldBuilder() {
          if (delManagedElementPassportTypeBuilder_ == null) {
            delManagedElementPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportTypeOrBuilder>(
                    delManagedElementPassportType_,
                    getParentForChildren(),
                    isClean());
            delManagedElementPassportType_ = null;
          }
          return delManagedElementPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 37;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType addSensorControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportTypeOrBuilder> addSensorControlElementPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 37;</code>
         */
        public boolean hasAddSensorControlElementPassportType() {
          return ((bitField1_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 37;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType getAddSensorControlElementPassportType() {
          if (addSensorControlElementPassportTypeBuilder_ == null) {
            return addSensorControlElementPassportType_;
          } else {
            return addSensorControlElementPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 37;</code>
         */
        public Builder setAddSensorControlElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType value) {
          if (addSensorControlElementPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addSensorControlElementPassportType_ = value;
            onChanged();
          } else {
            addSensorControlElementPassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00000008;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 37;</code>
         */
        public Builder setAddSensorControlElementPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType.Builder builderForValue) {
          if (addSensorControlElementPassportTypeBuilder_ == null) {
            addSensorControlElementPassportType_ = builderForValue.build();
            onChanged();
          } else {
            addSensorControlElementPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00000008;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 37;</code>
         */
        public Builder mergeAddSensorControlElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType value) {
          if (addSensorControlElementPassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x00000008) == 0x00000008) &&
                addSensorControlElementPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType.getDefaultInstance()) {
              addSensorControlElementPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType.newBuilder(addSensorControlElementPassportType_).mergeFrom(value).buildPartial();
            } else {
              addSensorControlElementPassportType_ = value;
            }
            onChanged();
          } else {
            addSensorControlElementPassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00000008;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 37;</code>
         */
        public Builder clearAddSensorControlElementPassportType() {
          if (addSensorControlElementPassportTypeBuilder_ == null) {
            addSensorControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType.getDefaultInstance();
            onChanged();
          } else {
            addSensorControlElementPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000008);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 37;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType.Builder getAddSensorControlElementPassportTypeBuilder() {
          bitField1_ |= 0x00000008;
          onChanged();
          return getAddSensorControlElementPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 37;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportTypeOrBuilder getAddSensorControlElementPassportTypeOrBuilder() {
          if (addSensorControlElementPassportTypeBuilder_ != null) {
            return addSensorControlElementPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return addSensorControlElementPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 37;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportTypeOrBuilder> 
            getAddSensorControlElementPassportTypeFieldBuilder() {
          if (addSensorControlElementPassportTypeBuilder_ == null) {
            addSensorControlElementPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportTypeOrBuilder>(
                    addSensorControlElementPassportType_,
                    getParentForChildren(),
                    isClean());
            addSensorControlElementPassportType_ = null;
          }
          return addSensorControlElementPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 38;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType updSensorControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportTypeOrBuilder> updSensorControlElementPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 38;</code>
         */
        public boolean hasUpdSensorControlElementPassportType() {
          return ((bitField1_ & 0x00000010) == 0x00000010);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 38;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType getUpdSensorControlElementPassportType() {
          if (updSensorControlElementPassportTypeBuilder_ == null) {
            return updSensorControlElementPassportType_;
          } else {
            return updSensorControlElementPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 38;</code>
         */
        public Builder setUpdSensorControlElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType value) {
          if (updSensorControlElementPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updSensorControlElementPassportType_ = value;
            onChanged();
          } else {
            updSensorControlElementPassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00000010;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 38;</code>
         */
        public Builder setUpdSensorControlElementPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType.Builder builderForValue) {
          if (updSensorControlElementPassportTypeBuilder_ == null) {
            updSensorControlElementPassportType_ = builderForValue.build();
            onChanged();
          } else {
            updSensorControlElementPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00000010;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 38;</code>
         */
        public Builder mergeUpdSensorControlElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType value) {
          if (updSensorControlElementPassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x00000010) == 0x00000010) &&
                updSensorControlElementPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType.getDefaultInstance()) {
              updSensorControlElementPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType.newBuilder(updSensorControlElementPassportType_).mergeFrom(value).buildPartial();
            } else {
              updSensorControlElementPassportType_ = value;
            }
            onChanged();
          } else {
            updSensorControlElementPassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00000010;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 38;</code>
         */
        public Builder clearUpdSensorControlElementPassportType() {
          if (updSensorControlElementPassportTypeBuilder_ == null) {
            updSensorControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType.getDefaultInstance();
            onChanged();
          } else {
            updSensorControlElementPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000010);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 38;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType.Builder getUpdSensorControlElementPassportTypeBuilder() {
          bitField1_ |= 0x00000010;
          onChanged();
          return getUpdSensorControlElementPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 38;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportTypeOrBuilder getUpdSensorControlElementPassportTypeOrBuilder() {
          if (updSensorControlElementPassportTypeBuilder_ != null) {
            return updSensorControlElementPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return updSensorControlElementPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 38;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportTypeOrBuilder> 
            getUpdSensorControlElementPassportTypeFieldBuilder() {
          if (updSensorControlElementPassportTypeBuilder_ == null) {
            updSensorControlElementPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportTypeOrBuilder>(
                    updSensorControlElementPassportType_,
                    getParentForChildren(),
                    isClean());
            updSensorControlElementPassportType_ = null;
          }
          return updSensorControlElementPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 39;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType delSensorControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportTypeOrBuilder> delSensorControlElementPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 39;</code>
         */
        public boolean hasDelSensorControlElementPassportType() {
          return ((bitField1_ & 0x00000020) == 0x00000020);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 39;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType getDelSensorControlElementPassportType() {
          if (delSensorControlElementPassportTypeBuilder_ == null) {
            return delSensorControlElementPassportType_;
          } else {
            return delSensorControlElementPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 39;</code>
         */
        public Builder setDelSensorControlElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType value) {
          if (delSensorControlElementPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            delSensorControlElementPassportType_ = value;
            onChanged();
          } else {
            delSensorControlElementPassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00000020;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 39;</code>
         */
        public Builder setDelSensorControlElementPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType.Builder builderForValue) {
          if (delSensorControlElementPassportTypeBuilder_ == null) {
            delSensorControlElementPassportType_ = builderForValue.build();
            onChanged();
          } else {
            delSensorControlElementPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00000020;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 39;</code>
         */
        public Builder mergeDelSensorControlElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType value) {
          if (delSensorControlElementPassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x00000020) == 0x00000020) &&
                delSensorControlElementPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType.getDefaultInstance()) {
              delSensorControlElementPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType.newBuilder(delSensorControlElementPassportType_).mergeFrom(value).buildPartial();
            } else {
              delSensorControlElementPassportType_ = value;
            }
            onChanged();
          } else {
            delSensorControlElementPassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00000020;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 39;</code>
         */
        public Builder clearDelSensorControlElementPassportType() {
          if (delSensorControlElementPassportTypeBuilder_ == null) {
            delSensorControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType.getDefaultInstance();
            onChanged();
          } else {
            delSensorControlElementPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000020);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 39;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType.Builder getDelSensorControlElementPassportTypeBuilder() {
          bitField1_ |= 0x00000020;
          onChanged();
          return getDelSensorControlElementPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 39;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportTypeOrBuilder getDelSensorControlElementPassportTypeOrBuilder() {
          if (delSensorControlElementPassportTypeBuilder_ != null) {
            return delSensorControlElementPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return delSensorControlElementPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 39;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportTypeOrBuilder> 
            getDelSensorControlElementPassportTypeFieldBuilder() {
          if (delSensorControlElementPassportTypeBuilder_ == null) {
            delSensorControlElementPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportTypeOrBuilder>(
                    delSensorControlElementPassportType_,
                    getParentForChildren(),
                    isClean());
            delSensorControlElementPassportType_ = null;
          }
          return delSensorControlElementPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 40;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference addGeneralPurposeReference_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceOrBuilder> addGeneralPurposeReferenceBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 40;</code>
         */
        public boolean hasAddGeneralPurposeReference() {
          return ((bitField1_ & 0x00000040) == 0x00000040);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 40;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference getAddGeneralPurposeReference() {
          if (addGeneralPurposeReferenceBuilder_ == null) {
            return addGeneralPurposeReference_;
          } else {
            return addGeneralPurposeReferenceBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 40;</code>
         */
        public Builder setAddGeneralPurposeReference(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference value) {
          if (addGeneralPurposeReferenceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addGeneralPurposeReference_ = value;
            onChanged();
          } else {
            addGeneralPurposeReferenceBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00000040;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 40;</code>
         */
        public Builder setAddGeneralPurposeReference(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference.Builder builderForValue) {
          if (addGeneralPurposeReferenceBuilder_ == null) {
            addGeneralPurposeReference_ = builderForValue.build();
            onChanged();
          } else {
            addGeneralPurposeReferenceBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00000040;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 40;</code>
         */
        public Builder mergeAddGeneralPurposeReference(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference value) {
          if (addGeneralPurposeReferenceBuilder_ == null) {
            if (((bitField1_ & 0x00000040) == 0x00000040) &&
                addGeneralPurposeReference_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference.getDefaultInstance()) {
              addGeneralPurposeReference_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference.newBuilder(addGeneralPurposeReference_).mergeFrom(value).buildPartial();
            } else {
              addGeneralPurposeReference_ = value;
            }
            onChanged();
          } else {
            addGeneralPurposeReferenceBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00000040;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 40;</code>
         */
        public Builder clearAddGeneralPurposeReference() {
          if (addGeneralPurposeReferenceBuilder_ == null) {
            addGeneralPurposeReference_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference.getDefaultInstance();
            onChanged();
          } else {
            addGeneralPurposeReferenceBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000040);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 40;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference.Builder getAddGeneralPurposeReferenceBuilder() {
          bitField1_ |= 0x00000040;
          onChanged();
          return getAddGeneralPurposeReferenceFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 40;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceOrBuilder getAddGeneralPurposeReferenceOrBuilder() {
          if (addGeneralPurposeReferenceBuilder_ != null) {
            return addGeneralPurposeReferenceBuilder_.getMessageOrBuilder();
          } else {
            return addGeneralPurposeReference_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 40;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceOrBuilder> 
            getAddGeneralPurposeReferenceFieldBuilder() {
          if (addGeneralPurposeReferenceBuilder_ == null) {
            addGeneralPurposeReferenceBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceOrBuilder>(
                    addGeneralPurposeReference_,
                    getParentForChildren(),
                    isClean());
            addGeneralPurposeReference_ = null;
          }
          return addGeneralPurposeReferenceBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 42;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference delGeneralPurposeReference_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceOrBuilder> delGeneralPurposeReferenceBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 42;</code>
         *
         * <pre>
         *optional UpdGeneralPurposeReference upd_general_purpose_reference = 41;
         * </pre>
         */
        public boolean hasDelGeneralPurposeReference() {
          return ((bitField1_ & 0x00000080) == 0x00000080);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 42;</code>
         *
         * <pre>
         *optional UpdGeneralPurposeReference upd_general_purpose_reference = 41;
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference getDelGeneralPurposeReference() {
          if (delGeneralPurposeReferenceBuilder_ == null) {
            return delGeneralPurposeReference_;
          } else {
            return delGeneralPurposeReferenceBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 42;</code>
         *
         * <pre>
         *optional UpdGeneralPurposeReference upd_general_purpose_reference = 41;
         * </pre>
         */
        public Builder setDelGeneralPurposeReference(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference value) {
          if (delGeneralPurposeReferenceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            delGeneralPurposeReference_ = value;
            onChanged();
          } else {
            delGeneralPurposeReferenceBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00000080;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 42;</code>
         *
         * <pre>
         *optional UpdGeneralPurposeReference upd_general_purpose_reference = 41;
         * </pre>
         */
        public Builder setDelGeneralPurposeReference(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference.Builder builderForValue) {
          if (delGeneralPurposeReferenceBuilder_ == null) {
            delGeneralPurposeReference_ = builderForValue.build();
            onChanged();
          } else {
            delGeneralPurposeReferenceBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00000080;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 42;</code>
         *
         * <pre>
         *optional UpdGeneralPurposeReference upd_general_purpose_reference = 41;
         * </pre>
         */
        public Builder mergeDelGeneralPurposeReference(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference value) {
          if (delGeneralPurposeReferenceBuilder_ == null) {
            if (((bitField1_ & 0x00000080) == 0x00000080) &&
                delGeneralPurposeReference_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference.getDefaultInstance()) {
              delGeneralPurposeReference_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference.newBuilder(delGeneralPurposeReference_).mergeFrom(value).buildPartial();
            } else {
              delGeneralPurposeReference_ = value;
            }
            onChanged();
          } else {
            delGeneralPurposeReferenceBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00000080;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 42;</code>
         *
         * <pre>
         *optional UpdGeneralPurposeReference upd_general_purpose_reference = 41;
         * </pre>
         */
        public Builder clearDelGeneralPurposeReference() {
          if (delGeneralPurposeReferenceBuilder_ == null) {
            delGeneralPurposeReference_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference.getDefaultInstance();
            onChanged();
          } else {
            delGeneralPurposeReferenceBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000080);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 42;</code>
         *
         * <pre>
         *optional UpdGeneralPurposeReference upd_general_purpose_reference = 41;
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference.Builder getDelGeneralPurposeReferenceBuilder() {
          bitField1_ |= 0x00000080;
          onChanged();
          return getDelGeneralPurposeReferenceFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 42;</code>
         *
         * <pre>
         *optional UpdGeneralPurposeReference upd_general_purpose_reference = 41;
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceOrBuilder getDelGeneralPurposeReferenceOrBuilder() {
          if (delGeneralPurposeReferenceBuilder_ != null) {
            return delGeneralPurposeReferenceBuilder_.getMessageOrBuilder();
          } else {
            return delGeneralPurposeReference_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 42;</code>
         *
         * <pre>
         *optional UpdGeneralPurposeReference upd_general_purpose_reference = 41;
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceOrBuilder> 
            getDelGeneralPurposeReferenceFieldBuilder() {
          if (delGeneralPurposeReferenceBuilder_ == null) {
            delGeneralPurposeReferenceBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceOrBuilder>(
                    delGeneralPurposeReference_,
                    getParentForChildren(),
                    isClean());
            delGeneralPurposeReference_ = null;
          }
          return delGeneralPurposeReferenceBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 43;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord addGeneralPurposeReferenceRecord_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecordOrBuilder> addGeneralPurposeReferenceRecordBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 43;</code>
         */
        public boolean hasAddGeneralPurposeReferenceRecord() {
          return ((bitField1_ & 0x00000100) == 0x00000100);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 43;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord getAddGeneralPurposeReferenceRecord() {
          if (addGeneralPurposeReferenceRecordBuilder_ == null) {
            return addGeneralPurposeReferenceRecord_;
          } else {
            return addGeneralPurposeReferenceRecordBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 43;</code>
         */
        public Builder setAddGeneralPurposeReferenceRecord(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord value) {
          if (addGeneralPurposeReferenceRecordBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addGeneralPurposeReferenceRecord_ = value;
            onChanged();
          } else {
            addGeneralPurposeReferenceRecordBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00000100;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 43;</code>
         */
        public Builder setAddGeneralPurposeReferenceRecord(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord.Builder builderForValue) {
          if (addGeneralPurposeReferenceRecordBuilder_ == null) {
            addGeneralPurposeReferenceRecord_ = builderForValue.build();
            onChanged();
          } else {
            addGeneralPurposeReferenceRecordBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00000100;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 43;</code>
         */
        public Builder mergeAddGeneralPurposeReferenceRecord(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord value) {
          if (addGeneralPurposeReferenceRecordBuilder_ == null) {
            if (((bitField1_ & 0x00000100) == 0x00000100) &&
                addGeneralPurposeReferenceRecord_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord.getDefaultInstance()) {
              addGeneralPurposeReferenceRecord_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord.newBuilder(addGeneralPurposeReferenceRecord_).mergeFrom(value).buildPartial();
            } else {
              addGeneralPurposeReferenceRecord_ = value;
            }
            onChanged();
          } else {
            addGeneralPurposeReferenceRecordBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00000100;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 43;</code>
         */
        public Builder clearAddGeneralPurposeReferenceRecord() {
          if (addGeneralPurposeReferenceRecordBuilder_ == null) {
            addGeneralPurposeReferenceRecord_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord.getDefaultInstance();
            onChanged();
          } else {
            addGeneralPurposeReferenceRecordBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000100);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 43;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord.Builder getAddGeneralPurposeReferenceRecordBuilder() {
          bitField1_ |= 0x00000100;
          onChanged();
          return getAddGeneralPurposeReferenceRecordFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 43;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecordOrBuilder getAddGeneralPurposeReferenceRecordOrBuilder() {
          if (addGeneralPurposeReferenceRecordBuilder_ != null) {
            return addGeneralPurposeReferenceRecordBuilder_.getMessageOrBuilder();
          } else {
            return addGeneralPurposeReferenceRecord_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 43;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecordOrBuilder> 
            getAddGeneralPurposeReferenceRecordFieldBuilder() {
          if (addGeneralPurposeReferenceRecordBuilder_ == null) {
            addGeneralPurposeReferenceRecordBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecordOrBuilder>(
                    addGeneralPurposeReferenceRecord_,
                    getParentForChildren(),
                    isClean());
            addGeneralPurposeReferenceRecord_ = null;
          }
          return addGeneralPurposeReferenceRecordBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 44;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord updGeneralPurposeReferenceRecord_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecordOrBuilder> updGeneralPurposeReferenceRecordBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 44;</code>
         */
        public boolean hasUpdGeneralPurposeReferenceRecord() {
          return ((bitField1_ & 0x00000200) == 0x00000200);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 44;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord getUpdGeneralPurposeReferenceRecord() {
          if (updGeneralPurposeReferenceRecordBuilder_ == null) {
            return updGeneralPurposeReferenceRecord_;
          } else {
            return updGeneralPurposeReferenceRecordBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 44;</code>
         */
        public Builder setUpdGeneralPurposeReferenceRecord(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord value) {
          if (updGeneralPurposeReferenceRecordBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updGeneralPurposeReferenceRecord_ = value;
            onChanged();
          } else {
            updGeneralPurposeReferenceRecordBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00000200;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 44;</code>
         */
        public Builder setUpdGeneralPurposeReferenceRecord(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord.Builder builderForValue) {
          if (updGeneralPurposeReferenceRecordBuilder_ == null) {
            updGeneralPurposeReferenceRecord_ = builderForValue.build();
            onChanged();
          } else {
            updGeneralPurposeReferenceRecordBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00000200;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 44;</code>
         */
        public Builder mergeUpdGeneralPurposeReferenceRecord(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord value) {
          if (updGeneralPurposeReferenceRecordBuilder_ == null) {
            if (((bitField1_ & 0x00000200) == 0x00000200) &&
                updGeneralPurposeReferenceRecord_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord.getDefaultInstance()) {
              updGeneralPurposeReferenceRecord_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord.newBuilder(updGeneralPurposeReferenceRecord_).mergeFrom(value).buildPartial();
            } else {
              updGeneralPurposeReferenceRecord_ = value;
            }
            onChanged();
          } else {
            updGeneralPurposeReferenceRecordBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00000200;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 44;</code>
         */
        public Builder clearUpdGeneralPurposeReferenceRecord() {
          if (updGeneralPurposeReferenceRecordBuilder_ == null) {
            updGeneralPurposeReferenceRecord_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord.getDefaultInstance();
            onChanged();
          } else {
            updGeneralPurposeReferenceRecordBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000200);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 44;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord.Builder getUpdGeneralPurposeReferenceRecordBuilder() {
          bitField1_ |= 0x00000200;
          onChanged();
          return getUpdGeneralPurposeReferenceRecordFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 44;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecordOrBuilder getUpdGeneralPurposeReferenceRecordOrBuilder() {
          if (updGeneralPurposeReferenceRecordBuilder_ != null) {
            return updGeneralPurposeReferenceRecordBuilder_.getMessageOrBuilder();
          } else {
            return updGeneralPurposeReferenceRecord_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 44;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecordOrBuilder> 
            getUpdGeneralPurposeReferenceRecordFieldBuilder() {
          if (updGeneralPurposeReferenceRecordBuilder_ == null) {
            updGeneralPurposeReferenceRecordBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecordOrBuilder>(
                    updGeneralPurposeReferenceRecord_,
                    getParentForChildren(),
                    isClean());
            updGeneralPurposeReferenceRecord_ = null;
          }
          return updGeneralPurposeReferenceRecordBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 45;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord delGeneralPurposeReferenceRecord_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecordOrBuilder> delGeneralPurposeReferenceRecordBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 45;</code>
         */
        public boolean hasDelGeneralPurposeReferenceRecord() {
          return ((bitField1_ & 0x00000400) == 0x00000400);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 45;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord getDelGeneralPurposeReferenceRecord() {
          if (delGeneralPurposeReferenceRecordBuilder_ == null) {
            return delGeneralPurposeReferenceRecord_;
          } else {
            return delGeneralPurposeReferenceRecordBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 45;</code>
         */
        public Builder setDelGeneralPurposeReferenceRecord(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord value) {
          if (delGeneralPurposeReferenceRecordBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            delGeneralPurposeReferenceRecord_ = value;
            onChanged();
          } else {
            delGeneralPurposeReferenceRecordBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00000400;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 45;</code>
         */
        public Builder setDelGeneralPurposeReferenceRecord(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord.Builder builderForValue) {
          if (delGeneralPurposeReferenceRecordBuilder_ == null) {
            delGeneralPurposeReferenceRecord_ = builderForValue.build();
            onChanged();
          } else {
            delGeneralPurposeReferenceRecordBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00000400;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 45;</code>
         */
        public Builder mergeDelGeneralPurposeReferenceRecord(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord value) {
          if (delGeneralPurposeReferenceRecordBuilder_ == null) {
            if (((bitField1_ & 0x00000400) == 0x00000400) &&
                delGeneralPurposeReferenceRecord_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord.getDefaultInstance()) {
              delGeneralPurposeReferenceRecord_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord.newBuilder(delGeneralPurposeReferenceRecord_).mergeFrom(value).buildPartial();
            } else {
              delGeneralPurposeReferenceRecord_ = value;
            }
            onChanged();
          } else {
            delGeneralPurposeReferenceRecordBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00000400;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 45;</code>
         */
        public Builder clearDelGeneralPurposeReferenceRecord() {
          if (delGeneralPurposeReferenceRecordBuilder_ == null) {
            delGeneralPurposeReferenceRecord_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord.getDefaultInstance();
            onChanged();
          } else {
            delGeneralPurposeReferenceRecordBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000400);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 45;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord.Builder getDelGeneralPurposeReferenceRecordBuilder() {
          bitField1_ |= 0x00000400;
          onChanged();
          return getDelGeneralPurposeReferenceRecordFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 45;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecordOrBuilder getDelGeneralPurposeReferenceRecordOrBuilder() {
          if (delGeneralPurposeReferenceRecordBuilder_ != null) {
            return delGeneralPurposeReferenceRecordBuilder_.getMessageOrBuilder();
          } else {
            return delGeneralPurposeReferenceRecord_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 45;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecordOrBuilder> 
            getDelGeneralPurposeReferenceRecordFieldBuilder() {
          if (delGeneralPurposeReferenceRecordBuilder_ == null) {
            delGeneralPurposeReferenceRecordBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecordOrBuilder>(
                    delGeneralPurposeReferenceRecord_,
                    getParentForChildren(),
                    isClean());
            delGeneralPurposeReferenceRecord_ = null;
          }
          return delGeneralPurposeReferenceRecordBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.SendConfigurationRequest send_configuration = 46;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest sendConfiguration_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequestOrBuilder> sendConfigurationBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.SendConfigurationRequest send_configuration = 46;</code>
         */
        public boolean hasSendConfiguration() {
          return ((bitField1_ & 0x00000800) == 0x00000800);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.SendConfigurationRequest send_configuration = 46;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest getSendConfiguration() {
          if (sendConfigurationBuilder_ == null) {
            return sendConfiguration_;
          } else {
            return sendConfigurationBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.SendConfigurationRequest send_configuration = 46;</code>
         */
        public Builder setSendConfiguration(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest value) {
          if (sendConfigurationBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            sendConfiguration_ = value;
            onChanged();
          } else {
            sendConfigurationBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00000800;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.SendConfigurationRequest send_configuration = 46;</code>
         */
        public Builder setSendConfiguration(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest.Builder builderForValue) {
          if (sendConfigurationBuilder_ == null) {
            sendConfiguration_ = builderForValue.build();
            onChanged();
          } else {
            sendConfigurationBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00000800;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.SendConfigurationRequest send_configuration = 46;</code>
         */
        public Builder mergeSendConfiguration(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest value) {
          if (sendConfigurationBuilder_ == null) {
            if (((bitField1_ & 0x00000800) == 0x00000800) &&
                sendConfiguration_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest.getDefaultInstance()) {
              sendConfiguration_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest.newBuilder(sendConfiguration_).mergeFrom(value).buildPartial();
            } else {
              sendConfiguration_ = value;
            }
            onChanged();
          } else {
            sendConfigurationBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00000800;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.SendConfigurationRequest send_configuration = 46;</code>
         */
        public Builder clearSendConfiguration() {
          if (sendConfigurationBuilder_ == null) {
            sendConfiguration_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest.getDefaultInstance();
            onChanged();
          } else {
            sendConfigurationBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000800);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.SendConfigurationRequest send_configuration = 46;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest.Builder getSendConfigurationBuilder() {
          bitField1_ |= 0x00000800;
          onChanged();
          return getSendConfigurationFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.SendConfigurationRequest send_configuration = 46;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequestOrBuilder getSendConfigurationOrBuilder() {
          if (sendConfigurationBuilder_ != null) {
            return sendConfigurationBuilder_.getMessageOrBuilder();
          } else {
            return sendConfiguration_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.SendConfigurationRequest send_configuration = 46;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequestOrBuilder> 
            getSendConfigurationFieldBuilder() {
          if (sendConfigurationBuilder_ == null) {
            sendConfigurationBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequest.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.SendConfigurationRequestOrBuilder>(
                    sendConfiguration_,
                    getParentForChildren(),
                    isClean());
            sendConfiguration_ = null;
          }
          return sendConfigurationBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 47;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType addEquipmentLogicalInputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportTypeOrBuilder> addEquipmentLogicalInputPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 47;</code>
         */
        public boolean hasAddEquipmentLogicalInputPassportType() {
          return ((bitField1_ & 0x00001000) == 0x00001000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 47;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType getAddEquipmentLogicalInputPassportType() {
          if (addEquipmentLogicalInputPassportTypeBuilder_ == null) {
            return addEquipmentLogicalInputPassportType_;
          } else {
            return addEquipmentLogicalInputPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 47;</code>
         */
        public Builder setAddEquipmentLogicalInputPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType value) {
          if (addEquipmentLogicalInputPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addEquipmentLogicalInputPassportType_ = value;
            onChanged();
          } else {
            addEquipmentLogicalInputPassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00001000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 47;</code>
         */
        public Builder setAddEquipmentLogicalInputPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType.Builder builderForValue) {
          if (addEquipmentLogicalInputPassportTypeBuilder_ == null) {
            addEquipmentLogicalInputPassportType_ = builderForValue.build();
            onChanged();
          } else {
            addEquipmentLogicalInputPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00001000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 47;</code>
         */
        public Builder mergeAddEquipmentLogicalInputPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType value) {
          if (addEquipmentLogicalInputPassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x00001000) == 0x00001000) &&
                addEquipmentLogicalInputPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType.getDefaultInstance()) {
              addEquipmentLogicalInputPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType.newBuilder(addEquipmentLogicalInputPassportType_).mergeFrom(value).buildPartial();
            } else {
              addEquipmentLogicalInputPassportType_ = value;
            }
            onChanged();
          } else {
            addEquipmentLogicalInputPassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00001000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 47;</code>
         */
        public Builder clearAddEquipmentLogicalInputPassportType() {
          if (addEquipmentLogicalInputPassportTypeBuilder_ == null) {
            addEquipmentLogicalInputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType.getDefaultInstance();
            onChanged();
          } else {
            addEquipmentLogicalInputPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00001000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 47;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType.Builder getAddEquipmentLogicalInputPassportTypeBuilder() {
          bitField1_ |= 0x00001000;
          onChanged();
          return getAddEquipmentLogicalInputPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 47;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportTypeOrBuilder getAddEquipmentLogicalInputPassportTypeOrBuilder() {
          if (addEquipmentLogicalInputPassportTypeBuilder_ != null) {
            return addEquipmentLogicalInputPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return addEquipmentLogicalInputPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 47;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportTypeOrBuilder> 
            getAddEquipmentLogicalInputPassportTypeFieldBuilder() {
          if (addEquipmentLogicalInputPassportTypeBuilder_ == null) {
            addEquipmentLogicalInputPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportTypeOrBuilder>(
                    addEquipmentLogicalInputPassportType_,
                    getParentForChildren(),
                    isClean());
            addEquipmentLogicalInputPassportType_ = null;
          }
          return addEquipmentLogicalInputPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 48;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType updEquipmentLogicalInputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportTypeOrBuilder> updEquipmentLogicalInputPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 48;</code>
         */
        public boolean hasUpdEquipmentLogicalInputPassportType() {
          return ((bitField1_ & 0x00002000) == 0x00002000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 48;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType getUpdEquipmentLogicalInputPassportType() {
          if (updEquipmentLogicalInputPassportTypeBuilder_ == null) {
            return updEquipmentLogicalInputPassportType_;
          } else {
            return updEquipmentLogicalInputPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 48;</code>
         */
        public Builder setUpdEquipmentLogicalInputPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType value) {
          if (updEquipmentLogicalInputPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updEquipmentLogicalInputPassportType_ = value;
            onChanged();
          } else {
            updEquipmentLogicalInputPassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00002000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 48;</code>
         */
        public Builder setUpdEquipmentLogicalInputPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType.Builder builderForValue) {
          if (updEquipmentLogicalInputPassportTypeBuilder_ == null) {
            updEquipmentLogicalInputPassportType_ = builderForValue.build();
            onChanged();
          } else {
            updEquipmentLogicalInputPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00002000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 48;</code>
         */
        public Builder mergeUpdEquipmentLogicalInputPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType value) {
          if (updEquipmentLogicalInputPassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x00002000) == 0x00002000) &&
                updEquipmentLogicalInputPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType.getDefaultInstance()) {
              updEquipmentLogicalInputPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType.newBuilder(updEquipmentLogicalInputPassportType_).mergeFrom(value).buildPartial();
            } else {
              updEquipmentLogicalInputPassportType_ = value;
            }
            onChanged();
          } else {
            updEquipmentLogicalInputPassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00002000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 48;</code>
         */
        public Builder clearUpdEquipmentLogicalInputPassportType() {
          if (updEquipmentLogicalInputPassportTypeBuilder_ == null) {
            updEquipmentLogicalInputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType.getDefaultInstance();
            onChanged();
          } else {
            updEquipmentLogicalInputPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00002000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 48;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType.Builder getUpdEquipmentLogicalInputPassportTypeBuilder() {
          bitField1_ |= 0x00002000;
          onChanged();
          return getUpdEquipmentLogicalInputPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 48;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportTypeOrBuilder getUpdEquipmentLogicalInputPassportTypeOrBuilder() {
          if (updEquipmentLogicalInputPassportTypeBuilder_ != null) {
            return updEquipmentLogicalInputPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return updEquipmentLogicalInputPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 48;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportTypeOrBuilder> 
            getUpdEquipmentLogicalInputPassportTypeFieldBuilder() {
          if (updEquipmentLogicalInputPassportTypeBuilder_ == null) {
            updEquipmentLogicalInputPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportTypeOrBuilder>(
                    updEquipmentLogicalInputPassportType_,
                    getParentForChildren(),
                    isClean());
            updEquipmentLogicalInputPassportType_ = null;
          }
          return updEquipmentLogicalInputPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 49;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType delEquipmentLogicalInputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportTypeOrBuilder> delEquipmentLogicalInputPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 49;</code>
         */
        public boolean hasDelEquipmentLogicalInputPassportType() {
          return ((bitField1_ & 0x00004000) == 0x00004000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 49;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType getDelEquipmentLogicalInputPassportType() {
          if (delEquipmentLogicalInputPassportTypeBuilder_ == null) {
            return delEquipmentLogicalInputPassportType_;
          } else {
            return delEquipmentLogicalInputPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 49;</code>
         */
        public Builder setDelEquipmentLogicalInputPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType value) {
          if (delEquipmentLogicalInputPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            delEquipmentLogicalInputPassportType_ = value;
            onChanged();
          } else {
            delEquipmentLogicalInputPassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00004000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 49;</code>
         */
        public Builder setDelEquipmentLogicalInputPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType.Builder builderForValue) {
          if (delEquipmentLogicalInputPassportTypeBuilder_ == null) {
            delEquipmentLogicalInputPassportType_ = builderForValue.build();
            onChanged();
          } else {
            delEquipmentLogicalInputPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00004000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 49;</code>
         */
        public Builder mergeDelEquipmentLogicalInputPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType value) {
          if (delEquipmentLogicalInputPassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x00004000) == 0x00004000) &&
                delEquipmentLogicalInputPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType.getDefaultInstance()) {
              delEquipmentLogicalInputPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType.newBuilder(delEquipmentLogicalInputPassportType_).mergeFrom(value).buildPartial();
            } else {
              delEquipmentLogicalInputPassportType_ = value;
            }
            onChanged();
          } else {
            delEquipmentLogicalInputPassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00004000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 49;</code>
         */
        public Builder clearDelEquipmentLogicalInputPassportType() {
          if (delEquipmentLogicalInputPassportTypeBuilder_ == null) {
            delEquipmentLogicalInputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType.getDefaultInstance();
            onChanged();
          } else {
            delEquipmentLogicalInputPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00004000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 49;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType.Builder getDelEquipmentLogicalInputPassportTypeBuilder() {
          bitField1_ |= 0x00004000;
          onChanged();
          return getDelEquipmentLogicalInputPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 49;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportTypeOrBuilder getDelEquipmentLogicalInputPassportTypeOrBuilder() {
          if (delEquipmentLogicalInputPassportTypeBuilder_ != null) {
            return delEquipmentLogicalInputPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return delEquipmentLogicalInputPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 49;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportTypeOrBuilder> 
            getDelEquipmentLogicalInputPassportTypeFieldBuilder() {
          if (delEquipmentLogicalInputPassportTypeBuilder_ == null) {
            delEquipmentLogicalInputPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportTypeOrBuilder>(
                    delEquipmentLogicalInputPassportType_,
                    getParentForChildren(),
                    isClean());
            delEquipmentLogicalInputPassportType_ = null;
          }
          return delEquipmentLogicalInputPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 50;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType addEquipmentLogicalOutputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportTypeOrBuilder> addEquipmentLogicalOutputPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 50;</code>
         */
        public boolean hasAddEquipmentLogicalOutputPassportType() {
          return ((bitField1_ & 0x00008000) == 0x00008000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 50;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType getAddEquipmentLogicalOutputPassportType() {
          if (addEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            return addEquipmentLogicalOutputPassportType_;
          } else {
            return addEquipmentLogicalOutputPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 50;</code>
         */
        public Builder setAddEquipmentLogicalOutputPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType value) {
          if (addEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addEquipmentLogicalOutputPassportType_ = value;
            onChanged();
          } else {
            addEquipmentLogicalOutputPassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00008000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 50;</code>
         */
        public Builder setAddEquipmentLogicalOutputPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType.Builder builderForValue) {
          if (addEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            addEquipmentLogicalOutputPassportType_ = builderForValue.build();
            onChanged();
          } else {
            addEquipmentLogicalOutputPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00008000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 50;</code>
         */
        public Builder mergeAddEquipmentLogicalOutputPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType value) {
          if (addEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x00008000) == 0x00008000) &&
                addEquipmentLogicalOutputPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType.getDefaultInstance()) {
              addEquipmentLogicalOutputPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType.newBuilder(addEquipmentLogicalOutputPassportType_).mergeFrom(value).buildPartial();
            } else {
              addEquipmentLogicalOutputPassportType_ = value;
            }
            onChanged();
          } else {
            addEquipmentLogicalOutputPassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00008000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 50;</code>
         */
        public Builder clearAddEquipmentLogicalOutputPassportType() {
          if (addEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            addEquipmentLogicalOutputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType.getDefaultInstance();
            onChanged();
          } else {
            addEquipmentLogicalOutputPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00008000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 50;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType.Builder getAddEquipmentLogicalOutputPassportTypeBuilder() {
          bitField1_ |= 0x00008000;
          onChanged();
          return getAddEquipmentLogicalOutputPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 50;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportTypeOrBuilder getAddEquipmentLogicalOutputPassportTypeOrBuilder() {
          if (addEquipmentLogicalOutputPassportTypeBuilder_ != null) {
            return addEquipmentLogicalOutputPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return addEquipmentLogicalOutputPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 50;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportTypeOrBuilder> 
            getAddEquipmentLogicalOutputPassportTypeFieldBuilder() {
          if (addEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            addEquipmentLogicalOutputPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportTypeOrBuilder>(
                    addEquipmentLogicalOutputPassportType_,
                    getParentForChildren(),
                    isClean());
            addEquipmentLogicalOutputPassportType_ = null;
          }
          return addEquipmentLogicalOutputPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 51;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType updEquipmentLogicalOutputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportTypeOrBuilder> updEquipmentLogicalOutputPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 51;</code>
         */
        public boolean hasUpdEquipmentLogicalOutputPassportType() {
          return ((bitField1_ & 0x00010000) == 0x00010000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 51;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType getUpdEquipmentLogicalOutputPassportType() {
          if (updEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            return updEquipmentLogicalOutputPassportType_;
          } else {
            return updEquipmentLogicalOutputPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 51;</code>
         */
        public Builder setUpdEquipmentLogicalOutputPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType value) {
          if (updEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updEquipmentLogicalOutputPassportType_ = value;
            onChanged();
          } else {
            updEquipmentLogicalOutputPassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00010000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 51;</code>
         */
        public Builder setUpdEquipmentLogicalOutputPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType.Builder builderForValue) {
          if (updEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            updEquipmentLogicalOutputPassportType_ = builderForValue.build();
            onChanged();
          } else {
            updEquipmentLogicalOutputPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00010000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 51;</code>
         */
        public Builder mergeUpdEquipmentLogicalOutputPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType value) {
          if (updEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x00010000) == 0x00010000) &&
                updEquipmentLogicalOutputPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType.getDefaultInstance()) {
              updEquipmentLogicalOutputPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType.newBuilder(updEquipmentLogicalOutputPassportType_).mergeFrom(value).buildPartial();
            } else {
              updEquipmentLogicalOutputPassportType_ = value;
            }
            onChanged();
          } else {
            updEquipmentLogicalOutputPassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00010000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 51;</code>
         */
        public Builder clearUpdEquipmentLogicalOutputPassportType() {
          if (updEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            updEquipmentLogicalOutputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType.getDefaultInstance();
            onChanged();
          } else {
            updEquipmentLogicalOutputPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00010000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 51;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType.Builder getUpdEquipmentLogicalOutputPassportTypeBuilder() {
          bitField1_ |= 0x00010000;
          onChanged();
          return getUpdEquipmentLogicalOutputPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 51;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportTypeOrBuilder getUpdEquipmentLogicalOutputPassportTypeOrBuilder() {
          if (updEquipmentLogicalOutputPassportTypeBuilder_ != null) {
            return updEquipmentLogicalOutputPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return updEquipmentLogicalOutputPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 51;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportTypeOrBuilder> 
            getUpdEquipmentLogicalOutputPassportTypeFieldBuilder() {
          if (updEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            updEquipmentLogicalOutputPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportTypeOrBuilder>(
                    updEquipmentLogicalOutputPassportType_,
                    getParentForChildren(),
                    isClean());
            updEquipmentLogicalOutputPassportType_ = null;
          }
          return updEquipmentLogicalOutputPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 52;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType delEquipmentLogicalOutputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportTypeOrBuilder> delEquipmentLogicalOutputPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 52;</code>
         */
        public boolean hasDelEquipmentLogicalOutputPassportType() {
          return ((bitField1_ & 0x00020000) == 0x00020000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 52;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType getDelEquipmentLogicalOutputPassportType() {
          if (delEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            return delEquipmentLogicalOutputPassportType_;
          } else {
            return delEquipmentLogicalOutputPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 52;</code>
         */
        public Builder setDelEquipmentLogicalOutputPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType value) {
          if (delEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            delEquipmentLogicalOutputPassportType_ = value;
            onChanged();
          } else {
            delEquipmentLogicalOutputPassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00020000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 52;</code>
         */
        public Builder setDelEquipmentLogicalOutputPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType.Builder builderForValue) {
          if (delEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            delEquipmentLogicalOutputPassportType_ = builderForValue.build();
            onChanged();
          } else {
            delEquipmentLogicalOutputPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00020000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 52;</code>
         */
        public Builder mergeDelEquipmentLogicalOutputPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType value) {
          if (delEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x00020000) == 0x00020000) &&
                delEquipmentLogicalOutputPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType.getDefaultInstance()) {
              delEquipmentLogicalOutputPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType.newBuilder(delEquipmentLogicalOutputPassportType_).mergeFrom(value).buildPartial();
            } else {
              delEquipmentLogicalOutputPassportType_ = value;
            }
            onChanged();
          } else {
            delEquipmentLogicalOutputPassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00020000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 52;</code>
         */
        public Builder clearDelEquipmentLogicalOutputPassportType() {
          if (delEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            delEquipmentLogicalOutputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType.getDefaultInstance();
            onChanged();
          } else {
            delEquipmentLogicalOutputPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00020000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 52;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType.Builder getDelEquipmentLogicalOutputPassportTypeBuilder() {
          bitField1_ |= 0x00020000;
          onChanged();
          return getDelEquipmentLogicalOutputPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 52;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportTypeOrBuilder getDelEquipmentLogicalOutputPassportTypeOrBuilder() {
          if (delEquipmentLogicalOutputPassportTypeBuilder_ != null) {
            return delEquipmentLogicalOutputPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return delEquipmentLogicalOutputPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 52;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportTypeOrBuilder> 
            getDelEquipmentLogicalOutputPassportTypeFieldBuilder() {
          if (delEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            delEquipmentLogicalOutputPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportTypeOrBuilder>(
                    delEquipmentLogicalOutputPassportType_,
                    getParentForChildren(),
                    isClean());
            delEquipmentLogicalOutputPassportType_ = null;
          }
          return delEquipmentLogicalOutputPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 53;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport addEquipmentFirmwarePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassportOrBuilder> addEquipmentFirmwarePassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 53;</code>
         */
        public boolean hasAddEquipmentFirmwarePassport() {
          return ((bitField1_ & 0x00040000) == 0x00040000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 53;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport getAddEquipmentFirmwarePassport() {
          if (addEquipmentFirmwarePassportBuilder_ == null) {
            return addEquipmentFirmwarePassport_;
          } else {
            return addEquipmentFirmwarePassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 53;</code>
         */
        public Builder setAddEquipmentFirmwarePassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport value) {
          if (addEquipmentFirmwarePassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addEquipmentFirmwarePassport_ = value;
            onChanged();
          } else {
            addEquipmentFirmwarePassportBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00040000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 53;</code>
         */
        public Builder setAddEquipmentFirmwarePassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport.Builder builderForValue) {
          if (addEquipmentFirmwarePassportBuilder_ == null) {
            addEquipmentFirmwarePassport_ = builderForValue.build();
            onChanged();
          } else {
            addEquipmentFirmwarePassportBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00040000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 53;</code>
         */
        public Builder mergeAddEquipmentFirmwarePassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport value) {
          if (addEquipmentFirmwarePassportBuilder_ == null) {
            if (((bitField1_ & 0x00040000) == 0x00040000) &&
                addEquipmentFirmwarePassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport.getDefaultInstance()) {
              addEquipmentFirmwarePassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport.newBuilder(addEquipmentFirmwarePassport_).mergeFrom(value).buildPartial();
            } else {
              addEquipmentFirmwarePassport_ = value;
            }
            onChanged();
          } else {
            addEquipmentFirmwarePassportBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00040000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 53;</code>
         */
        public Builder clearAddEquipmentFirmwarePassport() {
          if (addEquipmentFirmwarePassportBuilder_ == null) {
            addEquipmentFirmwarePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport.getDefaultInstance();
            onChanged();
          } else {
            addEquipmentFirmwarePassportBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00040000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 53;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport.Builder getAddEquipmentFirmwarePassportBuilder() {
          bitField1_ |= 0x00040000;
          onChanged();
          return getAddEquipmentFirmwarePassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 53;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassportOrBuilder getAddEquipmentFirmwarePassportOrBuilder() {
          if (addEquipmentFirmwarePassportBuilder_ != null) {
            return addEquipmentFirmwarePassportBuilder_.getMessageOrBuilder();
          } else {
            return addEquipmentFirmwarePassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 53;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassportOrBuilder> 
            getAddEquipmentFirmwarePassportFieldBuilder() {
          if (addEquipmentFirmwarePassportBuilder_ == null) {
            addEquipmentFirmwarePassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassportOrBuilder>(
                    addEquipmentFirmwarePassport_,
                    getParentForChildren(),
                    isClean());
            addEquipmentFirmwarePassport_ = null;
          }
          return addEquipmentFirmwarePassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 54;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport updEquipmentFirmwarePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassportOrBuilder> updEquipmentFirmwarePassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 54;</code>
         */
        public boolean hasUpdEquipmentFirmwarePassport() {
          return ((bitField1_ & 0x00080000) == 0x00080000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 54;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport getUpdEquipmentFirmwarePassport() {
          if (updEquipmentFirmwarePassportBuilder_ == null) {
            return updEquipmentFirmwarePassport_;
          } else {
            return updEquipmentFirmwarePassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 54;</code>
         */
        public Builder setUpdEquipmentFirmwarePassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport value) {
          if (updEquipmentFirmwarePassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updEquipmentFirmwarePassport_ = value;
            onChanged();
          } else {
            updEquipmentFirmwarePassportBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00080000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 54;</code>
         */
        public Builder setUpdEquipmentFirmwarePassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport.Builder builderForValue) {
          if (updEquipmentFirmwarePassportBuilder_ == null) {
            updEquipmentFirmwarePassport_ = builderForValue.build();
            onChanged();
          } else {
            updEquipmentFirmwarePassportBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00080000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 54;</code>
         */
        public Builder mergeUpdEquipmentFirmwarePassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport value) {
          if (updEquipmentFirmwarePassportBuilder_ == null) {
            if (((bitField1_ & 0x00080000) == 0x00080000) &&
                updEquipmentFirmwarePassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport.getDefaultInstance()) {
              updEquipmentFirmwarePassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport.newBuilder(updEquipmentFirmwarePassport_).mergeFrom(value).buildPartial();
            } else {
              updEquipmentFirmwarePassport_ = value;
            }
            onChanged();
          } else {
            updEquipmentFirmwarePassportBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00080000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 54;</code>
         */
        public Builder clearUpdEquipmentFirmwarePassport() {
          if (updEquipmentFirmwarePassportBuilder_ == null) {
            updEquipmentFirmwarePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport.getDefaultInstance();
            onChanged();
          } else {
            updEquipmentFirmwarePassportBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00080000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 54;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport.Builder getUpdEquipmentFirmwarePassportBuilder() {
          bitField1_ |= 0x00080000;
          onChanged();
          return getUpdEquipmentFirmwarePassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 54;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassportOrBuilder getUpdEquipmentFirmwarePassportOrBuilder() {
          if (updEquipmentFirmwarePassportBuilder_ != null) {
            return updEquipmentFirmwarePassportBuilder_.getMessageOrBuilder();
          } else {
            return updEquipmentFirmwarePassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 54;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassportOrBuilder> 
            getUpdEquipmentFirmwarePassportFieldBuilder() {
          if (updEquipmentFirmwarePassportBuilder_ == null) {
            updEquipmentFirmwarePassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassportOrBuilder>(
                    updEquipmentFirmwarePassport_,
                    getParentForChildren(),
                    isClean());
            updEquipmentFirmwarePassport_ = null;
          }
          return updEquipmentFirmwarePassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 55;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport delEquipmentFirmwarePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassportOrBuilder> delEquipmentFirmwarePassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 55;</code>
         */
        public boolean hasDelEquipmentFirmwarePassport() {
          return ((bitField1_ & 0x00100000) == 0x00100000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 55;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport getDelEquipmentFirmwarePassport() {
          if (delEquipmentFirmwarePassportBuilder_ == null) {
            return delEquipmentFirmwarePassport_;
          } else {
            return delEquipmentFirmwarePassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 55;</code>
         */
        public Builder setDelEquipmentFirmwarePassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport value) {
          if (delEquipmentFirmwarePassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            delEquipmentFirmwarePassport_ = value;
            onChanged();
          } else {
            delEquipmentFirmwarePassportBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00100000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 55;</code>
         */
        public Builder setDelEquipmentFirmwarePassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport.Builder builderForValue) {
          if (delEquipmentFirmwarePassportBuilder_ == null) {
            delEquipmentFirmwarePassport_ = builderForValue.build();
            onChanged();
          } else {
            delEquipmentFirmwarePassportBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00100000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 55;</code>
         */
        public Builder mergeDelEquipmentFirmwarePassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport value) {
          if (delEquipmentFirmwarePassportBuilder_ == null) {
            if (((bitField1_ & 0x00100000) == 0x00100000) &&
                delEquipmentFirmwarePassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport.getDefaultInstance()) {
              delEquipmentFirmwarePassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport.newBuilder(delEquipmentFirmwarePassport_).mergeFrom(value).buildPartial();
            } else {
              delEquipmentFirmwarePassport_ = value;
            }
            onChanged();
          } else {
            delEquipmentFirmwarePassportBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00100000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 55;</code>
         */
        public Builder clearDelEquipmentFirmwarePassport() {
          if (delEquipmentFirmwarePassportBuilder_ == null) {
            delEquipmentFirmwarePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport.getDefaultInstance();
            onChanged();
          } else {
            delEquipmentFirmwarePassportBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00100000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 55;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport.Builder getDelEquipmentFirmwarePassportBuilder() {
          bitField1_ |= 0x00100000;
          onChanged();
          return getDelEquipmentFirmwarePassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 55;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassportOrBuilder getDelEquipmentFirmwarePassportOrBuilder() {
          if (delEquipmentFirmwarePassportBuilder_ != null) {
            return delEquipmentFirmwarePassportBuilder_.getMessageOrBuilder();
          } else {
            return delEquipmentFirmwarePassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 55;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassportOrBuilder> 
            getDelEquipmentFirmwarePassportFieldBuilder() {
          if (delEquipmentFirmwarePassportBuilder_ == null) {
            delEquipmentFirmwarePassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassportOrBuilder>(
                    delEquipmentFirmwarePassport_,
                    getParentForChildren(),
                    isClean());
            delEquipmentFirmwarePassport_ = null;
          }
          return delEquipmentFirmwarePassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthRequest primary_auth = 99;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest primaryAuth_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequestOrBuilder> primaryAuthBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthRequest primary_auth = 99;</code>
         *
         * <pre>
         * Первичная авторизация клиента.
         * </pre>
         */
        public boolean hasPrimaryAuth() {
          return ((bitField1_ & 0x00200000) == 0x00200000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthRequest primary_auth = 99;</code>
         *
         * <pre>
         * Первичная авторизация клиента.
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest getPrimaryAuth() {
          if (primaryAuthBuilder_ == null) {
            return primaryAuth_;
          } else {
            return primaryAuthBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthRequest primary_auth = 99;</code>
         *
         * <pre>
         * Первичная авторизация клиента.
         * </pre>
         */
        public Builder setPrimaryAuth(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest value) {
          if (primaryAuthBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            primaryAuth_ = value;
            onChanged();
          } else {
            primaryAuthBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00200000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthRequest primary_auth = 99;</code>
         *
         * <pre>
         * Первичная авторизация клиента.
         * </pre>
         */
        public Builder setPrimaryAuth(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest.Builder builderForValue) {
          if (primaryAuthBuilder_ == null) {
            primaryAuth_ = builderForValue.build();
            onChanged();
          } else {
            primaryAuthBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00200000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthRequest primary_auth = 99;</code>
         *
         * <pre>
         * Первичная авторизация клиента.
         * </pre>
         */
        public Builder mergePrimaryAuth(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest value) {
          if (primaryAuthBuilder_ == null) {
            if (((bitField1_ & 0x00200000) == 0x00200000) &&
                primaryAuth_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest.getDefaultInstance()) {
              primaryAuth_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest.newBuilder(primaryAuth_).mergeFrom(value).buildPartial();
            } else {
              primaryAuth_ = value;
            }
            onChanged();
          } else {
            primaryAuthBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00200000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthRequest primary_auth = 99;</code>
         *
         * <pre>
         * Первичная авторизация клиента.
         * </pre>
         */
        public Builder clearPrimaryAuth() {
          if (primaryAuthBuilder_ == null) {
            primaryAuth_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest.getDefaultInstance();
            onChanged();
          } else {
            primaryAuthBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00200000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthRequest primary_auth = 99;</code>
         *
         * <pre>
         * Первичная авторизация клиента.
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest.Builder getPrimaryAuthBuilder() {
          bitField1_ |= 0x00200000;
          onChanged();
          return getPrimaryAuthFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthRequest primary_auth = 99;</code>
         *
         * <pre>
         * Первичная авторизация клиента.
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequestOrBuilder getPrimaryAuthOrBuilder() {
          if (primaryAuthBuilder_ != null) {
            return primaryAuthBuilder_.getMessageOrBuilder();
          } else {
            return primaryAuth_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthRequest primary_auth = 99;</code>
         *
         * <pre>
         * Первичная авторизация клиента.
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequestOrBuilder> 
            getPrimaryAuthFieldBuilder() {
          if (primaryAuthBuilder_ == null) {
            primaryAuthBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequest.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthRequestOrBuilder>(
                    primaryAuth_,
                    getParentForChildren(),
                    isClean());
            primaryAuth_ = null;
          }
          return primaryAuthBuilder_;
        }

        // optional .almaz2.rpc.commands.EquipmentCommandBase equipment_command = 100;
        private ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentCommandBase equipmentCommand_ = ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentCommandBase.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentCommandBase, ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentCommandBase.Builder, ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentCommandBaseOrBuilder> equipmentCommandBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.EquipmentCommandBase equipment_command = 100;</code>
         *
         * <pre>
         * Команды для оборудования объекта.
         * </pre>
         */
        public boolean hasEquipmentCommand() {
          return ((bitField1_ & 0x00400000) == 0x00400000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.EquipmentCommandBase equipment_command = 100;</code>
         *
         * <pre>
         * Команды для оборудования объекта.
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentCommandBase getEquipmentCommand() {
          if (equipmentCommandBuilder_ == null) {
            return equipmentCommand_;
          } else {
            return equipmentCommandBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.EquipmentCommandBase equipment_command = 100;</code>
         *
         * <pre>
         * Команды для оборудования объекта.
         * </pre>
         */
        public Builder setEquipmentCommand(ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentCommandBase value) {
          if (equipmentCommandBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            equipmentCommand_ = value;
            onChanged();
          } else {
            equipmentCommandBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00400000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.EquipmentCommandBase equipment_command = 100;</code>
         *
         * <pre>
         * Команды для оборудования объекта.
         * </pre>
         */
        public Builder setEquipmentCommand(
            ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentCommandBase.Builder builderForValue) {
          if (equipmentCommandBuilder_ == null) {
            equipmentCommand_ = builderForValue.build();
            onChanged();
          } else {
            equipmentCommandBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00400000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.EquipmentCommandBase equipment_command = 100;</code>
         *
         * <pre>
         * Команды для оборудования объекта.
         * </pre>
         */
        public Builder mergeEquipmentCommand(ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentCommandBase value) {
          if (equipmentCommandBuilder_ == null) {
            if (((bitField1_ & 0x00400000) == 0x00400000) &&
                equipmentCommand_ != ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentCommandBase.getDefaultInstance()) {
              equipmentCommand_ =
                ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentCommandBase.newBuilder(equipmentCommand_).mergeFrom(value).buildPartial();
            } else {
              equipmentCommand_ = value;
            }
            onChanged();
          } else {
            equipmentCommandBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00400000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.EquipmentCommandBase equipment_command = 100;</code>
         *
         * <pre>
         * Команды для оборудования объекта.
         * </pre>
         */
        public Builder clearEquipmentCommand() {
          if (equipmentCommandBuilder_ == null) {
            equipmentCommand_ = ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentCommandBase.getDefaultInstance();
            onChanged();
          } else {
            equipmentCommandBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00400000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.EquipmentCommandBase equipment_command = 100;</code>
         *
         * <pre>
         * Команды для оборудования объекта.
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentCommandBase.Builder getEquipmentCommandBuilder() {
          bitField1_ |= 0x00400000;
          onChanged();
          return getEquipmentCommandFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.EquipmentCommandBase equipment_command = 100;</code>
         *
         * <pre>
         * Команды для оборудования объекта.
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentCommandBaseOrBuilder getEquipmentCommandOrBuilder() {
          if (equipmentCommandBuilder_ != null) {
            return equipmentCommandBuilder_.getMessageOrBuilder();
          } else {
            return equipmentCommand_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.EquipmentCommandBase equipment_command = 100;</code>
         *
         * <pre>
         * Команды для оборудования объекта.
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentCommandBase, ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentCommandBase.Builder, ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentCommandBaseOrBuilder> 
            getEquipmentCommandFieldBuilder() {
          if (equipmentCommandBuilder_ == null) {
            equipmentCommandBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentCommandBase, ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentCommandBase.Builder, ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentCommandBaseOrBuilder>(
                    equipmentCommand_,
                    getParentForChildren(),
                    isClean());
            equipmentCommand_ = null;
          }
          return equipmentCommandBuilder_;
        }

        // optional .almaz2.rpc.commands.DatabaseQueryBase database_query = 200;
        private ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase databaseQuery_ = ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase.Builder, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBaseOrBuilder> databaseQueryBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.DatabaseQueryBase database_query = 200;</code>
         *
         * <pre>
         * Команды для базы данных.
         * </pre>
         */
        public boolean hasDatabaseQuery() {
          return ((bitField1_ & 0x00800000) == 0x00800000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.DatabaseQueryBase database_query = 200;</code>
         *
         * <pre>
         * Команды для базы данных.
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase getDatabaseQuery() {
          if (databaseQueryBuilder_ == null) {
            return databaseQuery_;
          } else {
            return databaseQueryBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.DatabaseQueryBase database_query = 200;</code>
         *
         * <pre>
         * Команды для базы данных.
         * </pre>
         */
        public Builder setDatabaseQuery(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase value) {
          if (databaseQueryBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            databaseQuery_ = value;
            onChanged();
          } else {
            databaseQueryBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00800000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.DatabaseQueryBase database_query = 200;</code>
         *
         * <pre>
         * Команды для базы данных.
         * </pre>
         */
        public Builder setDatabaseQuery(
            ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase.Builder builderForValue) {
          if (databaseQueryBuilder_ == null) {
            databaseQuery_ = builderForValue.build();
            onChanged();
          } else {
            databaseQueryBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00800000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.DatabaseQueryBase database_query = 200;</code>
         *
         * <pre>
         * Команды для базы данных.
         * </pre>
         */
        public Builder mergeDatabaseQuery(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase value) {
          if (databaseQueryBuilder_ == null) {
            if (((bitField1_ & 0x00800000) == 0x00800000) &&
                databaseQuery_ != ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase.getDefaultInstance()) {
              databaseQuery_ =
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase.newBuilder(databaseQuery_).mergeFrom(value).buildPartial();
            } else {
              databaseQuery_ = value;
            }
            onChanged();
          } else {
            databaseQueryBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00800000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.DatabaseQueryBase database_query = 200;</code>
         *
         * <pre>
         * Команды для базы данных.
         * </pre>
         */
        public Builder clearDatabaseQuery() {
          if (databaseQueryBuilder_ == null) {
            databaseQuery_ = ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase.getDefaultInstance();
            onChanged();
          } else {
            databaseQueryBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00800000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.DatabaseQueryBase database_query = 200;</code>
         *
         * <pre>
         * Команды для базы данных.
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase.Builder getDatabaseQueryBuilder() {
          bitField1_ |= 0x00800000;
          onChanged();
          return getDatabaseQueryFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.DatabaseQueryBase database_query = 200;</code>
         *
         * <pre>
         * Команды для базы данных.
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBaseOrBuilder getDatabaseQueryOrBuilder() {
          if (databaseQueryBuilder_ != null) {
            return databaseQueryBuilder_.getMessageOrBuilder();
          } else {
            return databaseQuery_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.DatabaseQueryBase database_query = 200;</code>
         *
         * <pre>
         * Команды для базы данных.
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase.Builder, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBaseOrBuilder> 
            getDatabaseQueryFieldBuilder() {
          if (databaseQueryBuilder_ == null) {
            databaseQueryBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBase.Builder, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseQueryBaseOrBuilder>(
                    databaseQuery_,
                    getParentForChildren(),
                    isClean());
            databaseQuery_ = null;
          }
          return databaseQueryBuilder_;
        }

        // optional .almaz2.rpc.commands.ControlObjectCommandBase control_object_command = 300;
        private ru.kodos.almaz2.rpc.commands.ControlObjectCommandsClass.ControlObjectCommandBase controlObjectCommand_ = ru.kodos.almaz2.rpc.commands.ControlObjectCommandsClass.ControlObjectCommandBase.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.ControlObjectCommandsClass.ControlObjectCommandBase, ru.kodos.almaz2.rpc.commands.ControlObjectCommandsClass.ControlObjectCommandBase.Builder, ru.kodos.almaz2.rpc.commands.ControlObjectCommandsClass.ControlObjectCommandBaseOrBuilder> controlObjectCommandBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.ControlObjectCommandBase control_object_command = 300;</code>
         *
         * <pre>
         * Команды для контролируемого объекта.
         * </pre>
         */
        public boolean hasControlObjectCommand() {
          return ((bitField1_ & 0x01000000) == 0x01000000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.ControlObjectCommandBase control_object_command = 300;</code>
         *
         * <pre>
         * Команды для контролируемого объекта.
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.ControlObjectCommandsClass.ControlObjectCommandBase getControlObjectCommand() {
          if (controlObjectCommandBuilder_ == null) {
            return controlObjectCommand_;
          } else {
            return controlObjectCommandBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.ControlObjectCommandBase control_object_command = 300;</code>
         *
         * <pre>
         * Команды для контролируемого объекта.
         * </pre>
         */
        public Builder setControlObjectCommand(ru.kodos.almaz2.rpc.commands.ControlObjectCommandsClass.ControlObjectCommandBase value) {
          if (controlObjectCommandBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            controlObjectCommand_ = value;
            onChanged();
          } else {
            controlObjectCommandBuilder_.setMessage(value);
          }
          bitField1_ |= 0x01000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.ControlObjectCommandBase control_object_command = 300;</code>
         *
         * <pre>
         * Команды для контролируемого объекта.
         * </pre>
         */
        public Builder setControlObjectCommand(
            ru.kodos.almaz2.rpc.commands.ControlObjectCommandsClass.ControlObjectCommandBase.Builder builderForValue) {
          if (controlObjectCommandBuilder_ == null) {
            controlObjectCommand_ = builderForValue.build();
            onChanged();
          } else {
            controlObjectCommandBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x01000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.ControlObjectCommandBase control_object_command = 300;</code>
         *
         * <pre>
         * Команды для контролируемого объекта.
         * </pre>
         */
        public Builder mergeControlObjectCommand(ru.kodos.almaz2.rpc.commands.ControlObjectCommandsClass.ControlObjectCommandBase value) {
          if (controlObjectCommandBuilder_ == null) {
            if (((bitField1_ & 0x01000000) == 0x01000000) &&
                controlObjectCommand_ != ru.kodos.almaz2.rpc.commands.ControlObjectCommandsClass.ControlObjectCommandBase.getDefaultInstance()) {
              controlObjectCommand_ =
                ru.kodos.almaz2.rpc.commands.ControlObjectCommandsClass.ControlObjectCommandBase.newBuilder(controlObjectCommand_).mergeFrom(value).buildPartial();
            } else {
              controlObjectCommand_ = value;
            }
            onChanged();
          } else {
            controlObjectCommandBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x01000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.ControlObjectCommandBase control_object_command = 300;</code>
         *
         * <pre>
         * Команды для контролируемого объекта.
         * </pre>
         */
        public Builder clearControlObjectCommand() {
          if (controlObjectCommandBuilder_ == null) {
            controlObjectCommand_ = ru.kodos.almaz2.rpc.commands.ControlObjectCommandsClass.ControlObjectCommandBase.getDefaultInstance();
            onChanged();
          } else {
            controlObjectCommandBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x01000000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.ControlObjectCommandBase control_object_command = 300;</code>
         *
         * <pre>
         * Команды для контролируемого объекта.
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.ControlObjectCommandsClass.ControlObjectCommandBase.Builder getControlObjectCommandBuilder() {
          bitField1_ |= 0x01000000;
          onChanged();
          return getControlObjectCommandFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.ControlObjectCommandBase control_object_command = 300;</code>
         *
         * <pre>
         * Команды для контролируемого объекта.
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.ControlObjectCommandsClass.ControlObjectCommandBaseOrBuilder getControlObjectCommandOrBuilder() {
          if (controlObjectCommandBuilder_ != null) {
            return controlObjectCommandBuilder_.getMessageOrBuilder();
          } else {
            return controlObjectCommand_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.ControlObjectCommandBase control_object_command = 300;</code>
         *
         * <pre>
         * Команды для контролируемого объекта.
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.ControlObjectCommandsClass.ControlObjectCommandBase, ru.kodos.almaz2.rpc.commands.ControlObjectCommandsClass.ControlObjectCommandBase.Builder, ru.kodos.almaz2.rpc.commands.ControlObjectCommandsClass.ControlObjectCommandBaseOrBuilder> 
            getControlObjectCommandFieldBuilder() {
          if (controlObjectCommandBuilder_ == null) {
            controlObjectCommandBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.ControlObjectCommandsClass.ControlObjectCommandBase, ru.kodos.almaz2.rpc.commands.ControlObjectCommandsClass.ControlObjectCommandBase.Builder, ru.kodos.almaz2.rpc.commands.ControlObjectCommandsClass.ControlObjectCommandBaseOrBuilder>(
                    controlObjectCommand_,
                    getParentForChildren(),
                    isClean());
            controlObjectCommand_ = null;
          }
          return controlObjectCommandBuilder_;
        }

        // optional .almaz2.rpc.commands.ActionCommandBase action_command = 350;
        private ru.kodos.almaz2.rpc.commands.ActionCommandsClass.ActionCommandBase actionCommand_ = ru.kodos.almaz2.rpc.commands.ActionCommandsClass.ActionCommandBase.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.ActionCommandsClass.ActionCommandBase, ru.kodos.almaz2.rpc.commands.ActionCommandsClass.ActionCommandBase.Builder, ru.kodos.almaz2.rpc.commands.ActionCommandsClass.ActionCommandBaseOrBuilder> actionCommandBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.ActionCommandBase action_command = 350;</code>
         *
         * <pre>
         * Команды для действий (оператора)
         * </pre>
         */
        public boolean hasActionCommand() {
          return ((bitField1_ & 0x02000000) == 0x02000000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.ActionCommandBase action_command = 350;</code>
         *
         * <pre>
         * Команды для действий (оператора)
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.ActionCommandsClass.ActionCommandBase getActionCommand() {
          if (actionCommandBuilder_ == null) {
            return actionCommand_;
          } else {
            return actionCommandBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.ActionCommandBase action_command = 350;</code>
         *
         * <pre>
         * Команды для действий (оператора)
         * </pre>
         */
        public Builder setActionCommand(ru.kodos.almaz2.rpc.commands.ActionCommandsClass.ActionCommandBase value) {
          if (actionCommandBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            actionCommand_ = value;
            onChanged();
          } else {
            actionCommandBuilder_.setMessage(value);
          }
          bitField1_ |= 0x02000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.ActionCommandBase action_command = 350;</code>
         *
         * <pre>
         * Команды для действий (оператора)
         * </pre>
         */
        public Builder setActionCommand(
            ru.kodos.almaz2.rpc.commands.ActionCommandsClass.ActionCommandBase.Builder builderForValue) {
          if (actionCommandBuilder_ == null) {
            actionCommand_ = builderForValue.build();
            onChanged();
          } else {
            actionCommandBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x02000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.ActionCommandBase action_command = 350;</code>
         *
         * <pre>
         * Команды для действий (оператора)
         * </pre>
         */
        public Builder mergeActionCommand(ru.kodos.almaz2.rpc.commands.ActionCommandsClass.ActionCommandBase value) {
          if (actionCommandBuilder_ == null) {
            if (((bitField1_ & 0x02000000) == 0x02000000) &&
                actionCommand_ != ru.kodos.almaz2.rpc.commands.ActionCommandsClass.ActionCommandBase.getDefaultInstance()) {
              actionCommand_ =
                ru.kodos.almaz2.rpc.commands.ActionCommandsClass.ActionCommandBase.newBuilder(actionCommand_).mergeFrom(value).buildPartial();
            } else {
              actionCommand_ = value;
            }
            onChanged();
          } else {
            actionCommandBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x02000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.ActionCommandBase action_command = 350;</code>
         *
         * <pre>
         * Команды для действий (оператора)
         * </pre>
         */
        public Builder clearActionCommand() {
          if (actionCommandBuilder_ == null) {
            actionCommand_ = ru.kodos.almaz2.rpc.commands.ActionCommandsClass.ActionCommandBase.getDefaultInstance();
            onChanged();
          } else {
            actionCommandBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x02000000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.ActionCommandBase action_command = 350;</code>
         *
         * <pre>
         * Команды для действий (оператора)
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.ActionCommandsClass.ActionCommandBase.Builder getActionCommandBuilder() {
          bitField1_ |= 0x02000000;
          onChanged();
          return getActionCommandFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.ActionCommandBase action_command = 350;</code>
         *
         * <pre>
         * Команды для действий (оператора)
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.ActionCommandsClass.ActionCommandBaseOrBuilder getActionCommandOrBuilder() {
          if (actionCommandBuilder_ != null) {
            return actionCommandBuilder_.getMessageOrBuilder();
          } else {
            return actionCommand_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.ActionCommandBase action_command = 350;</code>
         *
         * <pre>
         * Команды для действий (оператора)
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.ActionCommandsClass.ActionCommandBase, ru.kodos.almaz2.rpc.commands.ActionCommandsClass.ActionCommandBase.Builder, ru.kodos.almaz2.rpc.commands.ActionCommandsClass.ActionCommandBaseOrBuilder> 
            getActionCommandFieldBuilder() {
          if (actionCommandBuilder_ == null) {
            actionCommandBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.ActionCommandsClass.ActionCommandBase, ru.kodos.almaz2.rpc.commands.ActionCommandsClass.ActionCommandBase.Builder, ru.kodos.almaz2.rpc.commands.ActionCommandsClass.ActionCommandBaseOrBuilder>(
                    actionCommand_,
                    getParentForChildren(),
                    isClean());
            actionCommand_ = null;
          }
          return actionCommandBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.RequestBase)
      }

      static {
        defaultInstance = new RequestBase(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.RequestBase)
    }

    public interface ReplyBaseOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;</code>
       */
      boolean hasHeader();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header getHeader();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.HeaderOrBuilder getHeaderOrBuilder();

      // optional uint32 error_code = 18;
      /**
       * <code>optional uint32 error_code = 18;</code>
       */
      boolean hasErrorCode();
      /**
       * <code>optional uint32 error_code = 18;</code>
       */
      int getErrorCode();

      // optional string error_message = 19;
      /**
       * <code>optional string error_message = 19;</code>
       */
      boolean hasErrorMessage();
      /**
       * <code>optional string error_message = 19;</code>
       */
      java.lang.String getErrorMessage();
      /**
       * <code>optional string error_message = 19;</code>
       */
      com.google.protobuf.ByteString
          getErrorMessageBytes();

      // optional .almaz2.rpc.commands.RpcProtocol.AuthReply auth = 2;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AuthReply auth = 2;</code>
       */
      boolean hasAuth();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AuthReply auth = 2;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply getAuth();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AuthReply auth = 2;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReplyOrBuilder getAuthOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_login = 3;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_login = 3;</code>
       */
      boolean hasUserLogin();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_login = 3;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply getUserLogin();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_login = 3;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReplyOrBuilder getUserLoginOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_logout = 4;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_logout = 4;</code>
       */
      boolean hasUserLogout();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_logout = 4;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply getUserLogout();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_logout = 4;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReplyOrBuilder getUserLogoutOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;</code>
       */
      boolean hasAddControlObjectPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport getAddControlObjectPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportOrBuilder getAddControlObjectPassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 7;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 7;</code>
       */
      boolean hasUpdControlObjectPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 7;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport getUpdControlObjectPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 7;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportOrBuilder getUpdControlObjectPassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 8;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 8;</code>
       */
      boolean hasDelControlObjectPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 8;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport getDelControlObjectPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 8;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportOrBuilder getDelControlObjectPassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectStatus add_control_object_status = 9;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectStatus add_control_object_status = 9;</code>
       */
      boolean hasAddControlObjectStatus();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectStatus add_control_object_status = 9;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus getAddControlObjectStatus();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectStatus add_control_object_status = 9;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatusOrBuilder getAddControlObjectStatusOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectStatus upd_control_object_status = 10;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectStatus upd_control_object_status = 10;</code>
       */
      boolean hasUpdControlObjectStatus();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectStatus upd_control_object_status = 10;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus getUpdControlObjectStatus();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectStatus upd_control_object_status = 10;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatusOrBuilder getUpdControlObjectStatusOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectAlarm add_control_object_alarm = 11;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectAlarm add_control_object_alarm = 11;</code>
       */
      boolean hasAddControlObjectAlarm();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectAlarm add_control_object_alarm = 11;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm getAddControlObjectAlarm();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectAlarm add_control_object_alarm = 11;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarmOrBuilder getAddControlObjectAlarmOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectAlarm upd_control_object_alarm = 12;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectAlarm upd_control_object_alarm = 12;</code>
       */
      boolean hasUpdControlObjectAlarm();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectAlarm upd_control_object_alarm = 12;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm getUpdControlObjectAlarm();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectAlarm upd_control_object_alarm = 12;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarmOrBuilder getUpdControlObjectAlarmOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentStatus add_equipment_status = 13;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentStatus add_equipment_status = 13;</code>
       */
      boolean hasAddEquipmentStatus();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentStatus add_equipment_status = 13;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus getAddEquipmentStatus();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentStatus add_equipment_status = 13;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatusOrBuilder getAddEquipmentStatusOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentStatus upd_equipment_status = 14;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentStatus upd_equipment_status = 14;</code>
       */
      boolean hasUpdEquipmentStatus();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentStatus upd_equipment_status = 14;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus getUpdEquipmentStatus();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentStatus upd_equipment_status = 14;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatusOrBuilder getUpdEquipmentStatusOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 15;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 15;</code>
       */
      boolean hasAddEquipmentPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 15;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport getAddEquipmentPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 15;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportOrBuilder getAddEquipmentPassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 16;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 16;</code>
       */
      boolean hasUpdEquipmentPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 16;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport getUpdEquipmentPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 16;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportOrBuilder getUpdEquipmentPassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 17;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 17;</code>
       */
      boolean hasDelEquipmentPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 17;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport getDelEquipmentPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 17;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportOrBuilder getDelEquipmentPassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdCommunicationDriverStatus upd_communication_driver_status = 20;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdCommunicationDriverStatus upd_communication_driver_status = 20;</code>
       */
      boolean hasUpdCommunicationDriverStatus();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdCommunicationDriverStatus upd_communication_driver_status = 20;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus getUpdCommunicationDriverStatus();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdCommunicationDriverStatus upd_communication_driver_status = 20;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatusOrBuilder getUpdCommunicationDriverStatusOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AckRequest ack_request = 21;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AckRequest ack_request = 21;</code>
       *
       * <pre>
       * запрос на ответ 
       * </pre>
       */
      boolean hasAckRequest();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AckRequest ack_request = 21;</code>
       *
       * <pre>
       * запрос на ответ 
       * </pre>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest getAckRequest();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AckRequest ack_request = 21;</code>
       *
       * <pre>
       * запрос на ответ 
       * </pre>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequestOrBuilder getAckRequestOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 22;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 22;</code>
       */
      boolean hasAddZone();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 22;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone getAddZone();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 22;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZoneOrBuilder getAddZoneOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 23;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 23;</code>
       */
      boolean hasUpdZone();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 23;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone getUpdZone();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 23;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZoneOrBuilder getUpdZoneOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 24;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 24;</code>
       */
      boolean hasDelZone();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 24;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone getDelZone();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 24;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZoneOrBuilder getDelZoneOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 25;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 25;</code>
       */
      boolean hasAddClientPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 25;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport getAddClientPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 25;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassportOrBuilder getAddClientPassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 26;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 26;</code>
       */
      boolean hasUpdClientPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 26;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport getUpdClientPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 26;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassportOrBuilder getUpdClientPassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 27;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 27;</code>
       */
      boolean hasDelClientPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 27;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport getDelClientPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 27;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassportOrBuilder getDelClientPassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthReply primary_auth = 28;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthReply primary_auth = 28;</code>
       *
       * <pre>
       * Первичная авторизация клиента.
       * </pre>
       */
      boolean hasPrimaryAuth();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthReply primary_auth = 28;</code>
       *
       * <pre>
       * Первичная авторизация клиента.
       * </pre>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply getPrimaryAuth();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthReply primary_auth = 28;</code>
       *
       * <pre>
       * Первичная авторизация клиента.
       * </pre>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReplyOrBuilder getPrimaryAuthOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 29;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 29;</code>
       */
      boolean hasAddUserPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 29;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport getAddUserPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 29;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassportOrBuilder getAddUserPassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 30;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 30;</code>
       */
      boolean hasUpdUserPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 30;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport getUpdUserPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 30;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassportOrBuilder getUpdUserPassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 31;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 31;</code>
       */
      boolean hasDelUserPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 31;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport getDelUserPassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 31;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassportOrBuilder getDelUserPassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 32;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 32;</code>
       */
      boolean hasAddInterfacePassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 32;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport getAddInterfacePassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 32;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportOrBuilder getAddInterfacePassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 33;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 33;</code>
       */
      boolean hasUpdInterfacePassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 33;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport getUpdInterfacePassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 33;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportOrBuilder getUpdInterfacePassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 34;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 34;</code>
       */
      boolean hasDelInterfacePassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 34;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport getDelInterfacePassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 34;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportOrBuilder getDelInterfacePassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 35;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 35;</code>
       */
      boolean hasAddControlObjectPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 35;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType getAddControlObjectPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 35;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportTypeOrBuilder getAddControlObjectPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 36;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 36;</code>
       */
      boolean hasUpdControlObjectPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 36;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType getUpdControlObjectPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 36;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportTypeOrBuilder getUpdControlObjectPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 37;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 37;</code>
       */
      boolean hasDelControlObjectPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 37;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType getDelControlObjectPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 37;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportTypeOrBuilder getDelControlObjectPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 38;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 38;</code>
       */
      boolean hasAddControlElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 38;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType getAddControlElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 38;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportTypeOrBuilder getAddControlElementPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 39;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 39;</code>
       */
      boolean hasUpdControlElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 39;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType getUpdControlElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 39;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportTypeOrBuilder getUpdControlElementPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 40;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 40;</code>
       */
      boolean hasDelControlElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 40;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType getDelControlElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 40;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportTypeOrBuilder getDelControlElementPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 41;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 41;</code>
       */
      boolean hasAddEquipmentPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 41;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType getAddEquipmentPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 41;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportTypeOrBuilder getAddEquipmentPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 42;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 42;</code>
       */
      boolean hasUpdEquipmentPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 42;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType getUpdEquipmentPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 42;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportTypeOrBuilder getUpdEquipmentPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 43;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 43;</code>
       */
      boolean hasDelEquipmentPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 43;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType getDelEquipmentPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 43;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportTypeOrBuilder getDelEquipmentPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 44;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 44;</code>
       */
      boolean hasAddManagedElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 44;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType getAddManagedElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 44;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportTypeOrBuilder getAddManagedElementPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 45;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 45;</code>
       */
      boolean hasUpdManagedElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 45;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType getUpdManagedElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 45;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportTypeOrBuilder getUpdManagedElementPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 46;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 46;</code>
       */
      boolean hasDelManagedElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 46;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType getDelManagedElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 46;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportTypeOrBuilder getDelManagedElementPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 47;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 47;</code>
       */
      boolean hasAddSensorControlElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 47;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType getAddSensorControlElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 47;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportTypeOrBuilder getAddSensorControlElementPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 48;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 48;</code>
       */
      boolean hasUpdSensorControlElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 48;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType getUpdSensorControlElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 48;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportTypeOrBuilder getUpdSensorControlElementPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 49;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 49;</code>
       */
      boolean hasDelSensorControlElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 49;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType getDelSensorControlElementPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 49;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportTypeOrBuilder getDelSensorControlElementPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 50;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 50;</code>
       */
      boolean hasAddGeneralPurposeReference();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 50;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference getAddGeneralPurposeReference();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 50;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceOrBuilder getAddGeneralPurposeReferenceOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReference upd_general_purpose_reference = 51;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReference upd_general_purpose_reference = 51;</code>
       */
      boolean hasUpdGeneralPurposeReference();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReference upd_general_purpose_reference = 51;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference getUpdGeneralPurposeReference();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReference upd_general_purpose_reference = 51;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceOrBuilder getUpdGeneralPurposeReferenceOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 52;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 52;</code>
       */
      boolean hasDelGeneralPurposeReference();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 52;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference getDelGeneralPurposeReference();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 52;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceOrBuilder getDelGeneralPurposeReferenceOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 53;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 53;</code>
       */
      boolean hasAddGeneralPurposeReferenceRecord();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 53;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord getAddGeneralPurposeReferenceRecord();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 53;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecordOrBuilder getAddGeneralPurposeReferenceRecordOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 54;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 54;</code>
       */
      boolean hasUpdGeneralPurposeReferenceRecord();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 54;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord getUpdGeneralPurposeReferenceRecord();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 54;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecordOrBuilder getUpdGeneralPurposeReferenceRecordOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 55;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 55;</code>
       */
      boolean hasDelGeneralPurposeReferenceRecord();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 55;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord getDelGeneralPurposeReferenceRecord();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 55;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecordOrBuilder getDelGeneralPurposeReferenceRecordOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassportType add_interface_passport_type = 56;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassportType add_interface_passport_type = 56;</code>
       */
      boolean hasAddInterfacePassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassportType add_interface_passport_type = 56;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType getAddInterfacePassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassportType add_interface_passport_type = 56;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportTypeOrBuilder getAddInterfacePassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassportType upd_interface_passport_type = 57;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassportType upd_interface_passport_type = 57;</code>
       */
      boolean hasUpdInterfacePassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassportType upd_interface_passport_type = 57;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType getUpdInterfacePassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassportType upd_interface_passport_type = 57;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportTypeOrBuilder getUpdInterfacePassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassportType del_interface_passport_type = 58;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassportType del_interface_passport_type = 58;</code>
       */
      boolean hasDelInterfacePassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassportType del_interface_passport_type = 58;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType getDelInterfacePassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassportType del_interface_passport_type = 58;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportTypeOrBuilder getDelInterfacePassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectState upd_control_object_state = 59;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectState upd_control_object_state = 59;</code>
       */
      boolean hasUpdControlObjectState();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectState upd_control_object_state = 59;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState getUpdControlObjectState();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectState upd_control_object_state = 59;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStateOrBuilder getUpdControlObjectStateOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentState upd_equipment_state = 60;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentState upd_equipment_state = 60;</code>
       */
      boolean hasUpdEquipmentState();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentState upd_equipment_state = 60;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState getUpdEquipmentState();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentState upd_equipment_state = 60;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStateOrBuilder getUpdEquipmentStateOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 61;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 61;</code>
       */
      boolean hasAddEquipmentLogicalInputPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 61;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType getAddEquipmentLogicalInputPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 61;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportTypeOrBuilder getAddEquipmentLogicalInputPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 62;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 62;</code>
       */
      boolean hasUpdEquipmentLogicalInputPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 62;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType getUpdEquipmentLogicalInputPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 62;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportTypeOrBuilder getUpdEquipmentLogicalInputPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 63;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 63;</code>
       */
      boolean hasDelEquipmentLogicalInputPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 63;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType getDelEquipmentLogicalInputPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 63;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportTypeOrBuilder getDelEquipmentLogicalInputPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 64;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 64;</code>
       */
      boolean hasAddEquipmentLogicalOutputPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 64;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType getAddEquipmentLogicalOutputPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 64;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportTypeOrBuilder getAddEquipmentLogicalOutputPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 65;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 65;</code>
       */
      boolean hasUpdEquipmentLogicalOutputPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 65;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType getUpdEquipmentLogicalOutputPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 65;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportTypeOrBuilder getUpdEquipmentLogicalOutputPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 66;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 66;</code>
       */
      boolean hasDelEquipmentLogicalOutputPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 66;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType getDelEquipmentLogicalOutputPassportType();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 66;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportTypeOrBuilder getDelEquipmentLogicalOutputPassportTypeOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 67;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 67;</code>
       */
      boolean hasAddEquipmentFirmwarePassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 67;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport getAddEquipmentFirmwarePassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 67;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassportOrBuilder getAddEquipmentFirmwarePassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 68;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 68;</code>
       */
      boolean hasUpdEquipmentFirmwarePassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 68;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport getUpdEquipmentFirmwarePassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 68;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassportOrBuilder getUpdEquipmentFirmwarePassportOrBuilder();

      // optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 69;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 69;</code>
       */
      boolean hasDelEquipmentFirmwarePassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 69;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport getDelEquipmentFirmwarePassport();
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 69;</code>
       */
      ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassportOrBuilder getDelEquipmentFirmwarePassportOrBuilder();

      // optional .almaz2.rpc.commands.EquipmentAnswerBase equipment_answer = 100;
      /**
       * <code>optional .almaz2.rpc.commands.EquipmentAnswerBase equipment_answer = 100;</code>
       *
       * <pre>
       * Ответы на команды для оборудования объекта.
       * </pre>
       */
      boolean hasEquipmentAnswer();
      /**
       * <code>optional .almaz2.rpc.commands.EquipmentAnswerBase equipment_answer = 100;</code>
       *
       * <pre>
       * Ответы на команды для оборудования объекта.
       * </pre>
       */
      ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentAnswerBase getEquipmentAnswer();
      /**
       * <code>optional .almaz2.rpc.commands.EquipmentAnswerBase equipment_answer = 100;</code>
       *
       * <pre>
       * Ответы на команды для оборудования объекта.
       * </pre>
       */
      ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentAnswerBaseOrBuilder getEquipmentAnswerOrBuilder();

      // optional .almaz2.rpc.commands.DatabaseResultBase database_result = 200;
      /**
       * <code>optional .almaz2.rpc.commands.DatabaseResultBase database_result = 200;</code>
       *
       * <pre>
       * Ответы на команды для запросов из базы данных.
       * </pre>
       */
      boolean hasDatabaseResult();
      /**
       * <code>optional .almaz2.rpc.commands.DatabaseResultBase database_result = 200;</code>
       *
       * <pre>
       * Ответы на команды для запросов из базы данных.
       * </pre>
       */
      ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase getDatabaseResult();
      /**
       * <code>optional .almaz2.rpc.commands.DatabaseResultBase database_result = 200;</code>
       *
       * <pre>
       * Ответы на команды для запросов из базы данных.
       * </pre>
       */
      ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBaseOrBuilder getDatabaseResultOrBuilder();
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.ReplyBase}
     */
    public static final class ReplyBase extends
        com.google.protobuf.GeneratedMessage
        implements ReplyBaseOrBuilder {
      // Use ReplyBase.newBuilder() to construct.
      private ReplyBase(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private ReplyBase(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final ReplyBase defaultInstance;
      public static ReplyBase getDefaultInstance() {
        return defaultInstance;
      }

      public ReplyBase getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private ReplyBase(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        int mutable_bitField1_ = 0;
        int mutable_bitField2_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = header_.toBuilder();
                }
                header_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(header_);
                  header_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
              case 18: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply.Builder subBuilder = null;
                if (((bitField0_ & 0x00000008) == 0x00000008)) {
                  subBuilder = auth_.toBuilder();
                }
                auth_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(auth_);
                  auth_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000008;
                break;
              }
              case 26: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply.Builder subBuilder = null;
                if (((bitField0_ & 0x00000010) == 0x00000010)) {
                  subBuilder = userLogin_.toBuilder();
                }
                userLogin_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(userLogin_);
                  userLogin_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000010;
                break;
              }
              case 34: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply.Builder subBuilder = null;
                if (((bitField0_ & 0x00000020) == 0x00000020)) {
                  subBuilder = userLogout_.toBuilder();
                }
                userLogout_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(userLogout_);
                  userLogout_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000020;
                break;
              }
              case 42: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport.Builder subBuilder = null;
                if (((bitField0_ & 0x00000040) == 0x00000040)) {
                  subBuilder = addControlObjectPassport_.toBuilder();
                }
                addControlObjectPassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addControlObjectPassport_);
                  addControlObjectPassport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000040;
                break;
              }
              case 58: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport.Builder subBuilder = null;
                if (((bitField0_ & 0x00000080) == 0x00000080)) {
                  subBuilder = updControlObjectPassport_.toBuilder();
                }
                updControlObjectPassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updControlObjectPassport_);
                  updControlObjectPassport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000080;
                break;
              }
              case 66: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport.Builder subBuilder = null;
                if (((bitField0_ & 0x00000100) == 0x00000100)) {
                  subBuilder = delControlObjectPassport_.toBuilder();
                }
                delControlObjectPassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(delControlObjectPassport_);
                  delControlObjectPassport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000100;
                break;
              }
              case 74: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus.Builder subBuilder = null;
                if (((bitField0_ & 0x00000200) == 0x00000200)) {
                  subBuilder = addControlObjectStatus_.toBuilder();
                }
                addControlObjectStatus_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addControlObjectStatus_);
                  addControlObjectStatus_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000200;
                break;
              }
              case 82: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus.Builder subBuilder = null;
                if (((bitField0_ & 0x00000400) == 0x00000400)) {
                  subBuilder = updControlObjectStatus_.toBuilder();
                }
                updControlObjectStatus_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updControlObjectStatus_);
                  updControlObjectStatus_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000400;
                break;
              }
              case 90: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm.Builder subBuilder = null;
                if (((bitField0_ & 0x00000800) == 0x00000800)) {
                  subBuilder = addControlObjectAlarm_.toBuilder();
                }
                addControlObjectAlarm_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addControlObjectAlarm_);
                  addControlObjectAlarm_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000800;
                break;
              }
              case 98: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm.Builder subBuilder = null;
                if (((bitField0_ & 0x00001000) == 0x00001000)) {
                  subBuilder = updControlObjectAlarm_.toBuilder();
                }
                updControlObjectAlarm_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updControlObjectAlarm_);
                  updControlObjectAlarm_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00001000;
                break;
              }
              case 106: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus.Builder subBuilder = null;
                if (((bitField0_ & 0x00002000) == 0x00002000)) {
                  subBuilder = addEquipmentStatus_.toBuilder();
                }
                addEquipmentStatus_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addEquipmentStatus_);
                  addEquipmentStatus_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00002000;
                break;
              }
              case 114: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus.Builder subBuilder = null;
                if (((bitField0_ & 0x00004000) == 0x00004000)) {
                  subBuilder = updEquipmentStatus_.toBuilder();
                }
                updEquipmentStatus_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updEquipmentStatus_);
                  updEquipmentStatus_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00004000;
                break;
              }
              case 122: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport.Builder subBuilder = null;
                if (((bitField0_ & 0x00008000) == 0x00008000)) {
                  subBuilder = addEquipmentPassport_.toBuilder();
                }
                addEquipmentPassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addEquipmentPassport_);
                  addEquipmentPassport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00008000;
                break;
              }
              case 130: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport.Builder subBuilder = null;
                if (((bitField0_ & 0x00010000) == 0x00010000)) {
                  subBuilder = updEquipmentPassport_.toBuilder();
                }
                updEquipmentPassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updEquipmentPassport_);
                  updEquipmentPassport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00010000;
                break;
              }
              case 138: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport.Builder subBuilder = null;
                if (((bitField0_ & 0x00020000) == 0x00020000)) {
                  subBuilder = delEquipmentPassport_.toBuilder();
                }
                delEquipmentPassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(delEquipmentPassport_);
                  delEquipmentPassport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00020000;
                break;
              }
              case 144: {
                bitField0_ |= 0x00000002;
                errorCode_ = input.readUInt32();
                break;
              }
              case 154: {
                bitField0_ |= 0x00000004;
                errorMessage_ = input.readBytes();
                break;
              }
              case 162: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus.Builder subBuilder = null;
                if (((bitField0_ & 0x00040000) == 0x00040000)) {
                  subBuilder = updCommunicationDriverStatus_.toBuilder();
                }
                updCommunicationDriverStatus_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updCommunicationDriverStatus_);
                  updCommunicationDriverStatus_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00040000;
                break;
              }
              case 170: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest.Builder subBuilder = null;
                if (((bitField0_ & 0x00080000) == 0x00080000)) {
                  subBuilder = ackRequest_.toBuilder();
                }
                ackRequest_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(ackRequest_);
                  ackRequest_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00080000;
                break;
              }
              case 178: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone.Builder subBuilder = null;
                if (((bitField0_ & 0x00100000) == 0x00100000)) {
                  subBuilder = addZone_.toBuilder();
                }
                addZone_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addZone_);
                  addZone_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00100000;
                break;
              }
              case 186: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone.Builder subBuilder = null;
                if (((bitField0_ & 0x00200000) == 0x00200000)) {
                  subBuilder = updZone_.toBuilder();
                }
                updZone_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updZone_);
                  updZone_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00200000;
                break;
              }
              case 194: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone.Builder subBuilder = null;
                if (((bitField0_ & 0x00400000) == 0x00400000)) {
                  subBuilder = delZone_.toBuilder();
                }
                delZone_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(delZone_);
                  delZone_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00400000;
                break;
              }
              case 202: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport.Builder subBuilder = null;
                if (((bitField0_ & 0x00800000) == 0x00800000)) {
                  subBuilder = addClientPassport_.toBuilder();
                }
                addClientPassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addClientPassport_);
                  addClientPassport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00800000;
                break;
              }
              case 210: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport.Builder subBuilder = null;
                if (((bitField0_ & 0x01000000) == 0x01000000)) {
                  subBuilder = updClientPassport_.toBuilder();
                }
                updClientPassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updClientPassport_);
                  updClientPassport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x01000000;
                break;
              }
              case 218: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport.Builder subBuilder = null;
                if (((bitField0_ & 0x02000000) == 0x02000000)) {
                  subBuilder = delClientPassport_.toBuilder();
                }
                delClientPassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(delClientPassport_);
                  delClientPassport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x02000000;
                break;
              }
              case 226: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply.Builder subBuilder = null;
                if (((bitField0_ & 0x04000000) == 0x04000000)) {
                  subBuilder = primaryAuth_.toBuilder();
                }
                primaryAuth_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(primaryAuth_);
                  primaryAuth_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x04000000;
                break;
              }
              case 234: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport.Builder subBuilder = null;
                if (((bitField0_ & 0x08000000) == 0x08000000)) {
                  subBuilder = addUserPassport_.toBuilder();
                }
                addUserPassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addUserPassport_);
                  addUserPassport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x08000000;
                break;
              }
              case 242: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport.Builder subBuilder = null;
                if (((bitField0_ & 0x10000000) == 0x10000000)) {
                  subBuilder = updUserPassport_.toBuilder();
                }
                updUserPassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updUserPassport_);
                  updUserPassport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x10000000;
                break;
              }
              case 250: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport.Builder subBuilder = null;
                if (((bitField0_ & 0x20000000) == 0x20000000)) {
                  subBuilder = delUserPassport_.toBuilder();
                }
                delUserPassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(delUserPassport_);
                  delUserPassport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x20000000;
                break;
              }
              case 258: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport.Builder subBuilder = null;
                if (((bitField0_ & 0x40000000) == 0x40000000)) {
                  subBuilder = addInterfacePassport_.toBuilder();
                }
                addInterfacePassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addInterfacePassport_);
                  addInterfacePassport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x40000000;
                break;
              }
              case 266: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport.Builder subBuilder = null;
                if (((bitField0_ & 0x80000000) == 0x80000000)) {
                  subBuilder = updInterfacePassport_.toBuilder();
                }
                updInterfacePassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updInterfacePassport_);
                  updInterfacePassport_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x80000000;
                break;
              }
              case 274: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport.Builder subBuilder = null;
                if (((bitField1_ & 0x00000001) == 0x00000001)) {
                  subBuilder = delInterfacePassport_.toBuilder();
                }
                delInterfacePassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(delInterfacePassport_);
                  delInterfacePassport_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00000001;
                break;
              }
              case 282: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x00000002) == 0x00000002)) {
                  subBuilder = addControlObjectPassportType_.toBuilder();
                }
                addControlObjectPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addControlObjectPassportType_);
                  addControlObjectPassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00000002;
                break;
              }
              case 290: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x00000004) == 0x00000004)) {
                  subBuilder = updControlObjectPassportType_.toBuilder();
                }
                updControlObjectPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updControlObjectPassportType_);
                  updControlObjectPassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00000004;
                break;
              }
              case 298: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x00000008) == 0x00000008)) {
                  subBuilder = delControlObjectPassportType_.toBuilder();
                }
                delControlObjectPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(delControlObjectPassportType_);
                  delControlObjectPassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00000008;
                break;
              }
              case 306: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x00000010) == 0x00000010)) {
                  subBuilder = addControlElementPassportType_.toBuilder();
                }
                addControlElementPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addControlElementPassportType_);
                  addControlElementPassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00000010;
                break;
              }
              case 314: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x00000020) == 0x00000020)) {
                  subBuilder = updControlElementPassportType_.toBuilder();
                }
                updControlElementPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updControlElementPassportType_);
                  updControlElementPassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00000020;
                break;
              }
              case 322: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x00000040) == 0x00000040)) {
                  subBuilder = delControlElementPassportType_.toBuilder();
                }
                delControlElementPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(delControlElementPassportType_);
                  delControlElementPassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00000040;
                break;
              }
              case 330: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x00000080) == 0x00000080)) {
                  subBuilder = addEquipmentPassportType_.toBuilder();
                }
                addEquipmentPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addEquipmentPassportType_);
                  addEquipmentPassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00000080;
                break;
              }
              case 338: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x00000100) == 0x00000100)) {
                  subBuilder = updEquipmentPassportType_.toBuilder();
                }
                updEquipmentPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updEquipmentPassportType_);
                  updEquipmentPassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00000100;
                break;
              }
              case 346: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x00000200) == 0x00000200)) {
                  subBuilder = delEquipmentPassportType_.toBuilder();
                }
                delEquipmentPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(delEquipmentPassportType_);
                  delEquipmentPassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00000200;
                break;
              }
              case 354: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x00000400) == 0x00000400)) {
                  subBuilder = addManagedElementPassportType_.toBuilder();
                }
                addManagedElementPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addManagedElementPassportType_);
                  addManagedElementPassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00000400;
                break;
              }
              case 362: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x00000800) == 0x00000800)) {
                  subBuilder = updManagedElementPassportType_.toBuilder();
                }
                updManagedElementPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updManagedElementPassportType_);
                  updManagedElementPassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00000800;
                break;
              }
              case 370: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x00001000) == 0x00001000)) {
                  subBuilder = delManagedElementPassportType_.toBuilder();
                }
                delManagedElementPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(delManagedElementPassportType_);
                  delManagedElementPassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00001000;
                break;
              }
              case 378: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x00002000) == 0x00002000)) {
                  subBuilder = addSensorControlElementPassportType_.toBuilder();
                }
                addSensorControlElementPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addSensorControlElementPassportType_);
                  addSensorControlElementPassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00002000;
                break;
              }
              case 386: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x00004000) == 0x00004000)) {
                  subBuilder = updSensorControlElementPassportType_.toBuilder();
                }
                updSensorControlElementPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updSensorControlElementPassportType_);
                  updSensorControlElementPassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00004000;
                break;
              }
              case 394: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x00008000) == 0x00008000)) {
                  subBuilder = delSensorControlElementPassportType_.toBuilder();
                }
                delSensorControlElementPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(delSensorControlElementPassportType_);
                  delSensorControlElementPassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00008000;
                break;
              }
              case 402: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference.Builder subBuilder = null;
                if (((bitField1_ & 0x00010000) == 0x00010000)) {
                  subBuilder = addGeneralPurposeReference_.toBuilder();
                }
                addGeneralPurposeReference_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addGeneralPurposeReference_);
                  addGeneralPurposeReference_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00010000;
                break;
              }
              case 410: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference.Builder subBuilder = null;
                if (((bitField1_ & 0x00020000) == 0x00020000)) {
                  subBuilder = updGeneralPurposeReference_.toBuilder();
                }
                updGeneralPurposeReference_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updGeneralPurposeReference_);
                  updGeneralPurposeReference_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00020000;
                break;
              }
              case 418: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference.Builder subBuilder = null;
                if (((bitField1_ & 0x00040000) == 0x00040000)) {
                  subBuilder = delGeneralPurposeReference_.toBuilder();
                }
                delGeneralPurposeReference_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(delGeneralPurposeReference_);
                  delGeneralPurposeReference_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00040000;
                break;
              }
              case 426: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord.Builder subBuilder = null;
                if (((bitField1_ & 0x00080000) == 0x00080000)) {
                  subBuilder = addGeneralPurposeReferenceRecord_.toBuilder();
                }
                addGeneralPurposeReferenceRecord_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addGeneralPurposeReferenceRecord_);
                  addGeneralPurposeReferenceRecord_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00080000;
                break;
              }
              case 434: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord.Builder subBuilder = null;
                if (((bitField1_ & 0x00100000) == 0x00100000)) {
                  subBuilder = updGeneralPurposeReferenceRecord_.toBuilder();
                }
                updGeneralPurposeReferenceRecord_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updGeneralPurposeReferenceRecord_);
                  updGeneralPurposeReferenceRecord_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00100000;
                break;
              }
              case 442: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord.Builder subBuilder = null;
                if (((bitField1_ & 0x00200000) == 0x00200000)) {
                  subBuilder = delGeneralPurposeReferenceRecord_.toBuilder();
                }
                delGeneralPurposeReferenceRecord_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(delGeneralPurposeReferenceRecord_);
                  delGeneralPurposeReferenceRecord_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00200000;
                break;
              }
              case 450: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x00400000) == 0x00400000)) {
                  subBuilder = addInterfacePassportType_.toBuilder();
                }
                addInterfacePassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addInterfacePassportType_);
                  addInterfacePassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00400000;
                break;
              }
              case 458: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x00800000) == 0x00800000)) {
                  subBuilder = updInterfacePassportType_.toBuilder();
                }
                updInterfacePassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updInterfacePassportType_);
                  updInterfacePassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x00800000;
                break;
              }
              case 466: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x01000000) == 0x01000000)) {
                  subBuilder = delInterfacePassportType_.toBuilder();
                }
                delInterfacePassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(delInterfacePassportType_);
                  delInterfacePassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x01000000;
                break;
              }
              case 474: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState.Builder subBuilder = null;
                if (((bitField1_ & 0x02000000) == 0x02000000)) {
                  subBuilder = updControlObjectState_.toBuilder();
                }
                updControlObjectState_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updControlObjectState_);
                  updControlObjectState_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x02000000;
                break;
              }
              case 482: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState.Builder subBuilder = null;
                if (((bitField1_ & 0x04000000) == 0x04000000)) {
                  subBuilder = updEquipmentState_.toBuilder();
                }
                updEquipmentState_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updEquipmentState_);
                  updEquipmentState_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x04000000;
                break;
              }
              case 490: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x08000000) == 0x08000000)) {
                  subBuilder = addEquipmentLogicalInputPassportType_.toBuilder();
                }
                addEquipmentLogicalInputPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addEquipmentLogicalInputPassportType_);
                  addEquipmentLogicalInputPassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x08000000;
                break;
              }
              case 498: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x10000000) == 0x10000000)) {
                  subBuilder = updEquipmentLogicalInputPassportType_.toBuilder();
                }
                updEquipmentLogicalInputPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updEquipmentLogicalInputPassportType_);
                  updEquipmentLogicalInputPassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x10000000;
                break;
              }
              case 506: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x20000000) == 0x20000000)) {
                  subBuilder = delEquipmentLogicalInputPassportType_.toBuilder();
                }
                delEquipmentLogicalInputPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(delEquipmentLogicalInputPassportType_);
                  delEquipmentLogicalInputPassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x20000000;
                break;
              }
              case 514: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x40000000) == 0x40000000)) {
                  subBuilder = addEquipmentLogicalOutputPassportType_.toBuilder();
                }
                addEquipmentLogicalOutputPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addEquipmentLogicalOutputPassportType_);
                  addEquipmentLogicalOutputPassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x40000000;
                break;
              }
              case 522: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType.Builder subBuilder = null;
                if (((bitField1_ & 0x80000000) == 0x80000000)) {
                  subBuilder = updEquipmentLogicalOutputPassportType_.toBuilder();
                }
                updEquipmentLogicalOutputPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updEquipmentLogicalOutputPassportType_);
                  updEquipmentLogicalOutputPassportType_ = subBuilder.buildPartial();
                }
                bitField1_ |= 0x80000000;
                break;
              }
              case 530: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType.Builder subBuilder = null;
                if (((bitField2_ & 0x00000001) == 0x00000001)) {
                  subBuilder = delEquipmentLogicalOutputPassportType_.toBuilder();
                }
                delEquipmentLogicalOutputPassportType_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(delEquipmentLogicalOutputPassportType_);
                  delEquipmentLogicalOutputPassportType_ = subBuilder.buildPartial();
                }
                bitField2_ |= 0x00000001;
                break;
              }
              case 538: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport.Builder subBuilder = null;
                if (((bitField2_ & 0x00000002) == 0x00000002)) {
                  subBuilder = addEquipmentFirmwarePassport_.toBuilder();
                }
                addEquipmentFirmwarePassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(addEquipmentFirmwarePassport_);
                  addEquipmentFirmwarePassport_ = subBuilder.buildPartial();
                }
                bitField2_ |= 0x00000002;
                break;
              }
              case 546: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport.Builder subBuilder = null;
                if (((bitField2_ & 0x00000004) == 0x00000004)) {
                  subBuilder = updEquipmentFirmwarePassport_.toBuilder();
                }
                updEquipmentFirmwarePassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(updEquipmentFirmwarePassport_);
                  updEquipmentFirmwarePassport_ = subBuilder.buildPartial();
                }
                bitField2_ |= 0x00000004;
                break;
              }
              case 554: {
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport.Builder subBuilder = null;
                if (((bitField2_ & 0x00000008) == 0x00000008)) {
                  subBuilder = delEquipmentFirmwarePassport_.toBuilder();
                }
                delEquipmentFirmwarePassport_ = input.readMessage(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(delEquipmentFirmwarePassport_);
                  delEquipmentFirmwarePassport_ = subBuilder.buildPartial();
                }
                bitField2_ |= 0x00000008;
                break;
              }
              case 802: {
                ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentAnswerBase.Builder subBuilder = null;
                if (((bitField2_ & 0x00000010) == 0x00000010)) {
                  subBuilder = equipmentAnswer_.toBuilder();
                }
                equipmentAnswer_ = input.readMessage(ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentAnswerBase.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(equipmentAnswer_);
                  equipmentAnswer_ = subBuilder.buildPartial();
                }
                bitField2_ |= 0x00000010;
                break;
              }
              case 1602: {
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase.Builder subBuilder = null;
                if (((bitField2_ & 0x00000020) == 0x00000020)) {
                  subBuilder = databaseResult_.toBuilder();
                }
                databaseResult_ = input.readMessage(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(databaseResult_);
                  databaseResult_ = subBuilder.buildPartial();
                }
                bitField2_ |= 0x00000020;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_ReplyBase_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_ReplyBase_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase.Builder.class);
      }

      public static com.google.protobuf.Parser<ReplyBase> PARSER =
          new com.google.protobuf.AbstractParser<ReplyBase>() {
        public ReplyBase parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new ReplyBase(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<ReplyBase> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      private int bitField1_;
      private int bitField2_;
      // optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;
      public static final int HEADER_FIELD_NUMBER = 1;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header header_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;</code>
       */
      public boolean hasHeader() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header getHeader() {
        return header_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.HeaderOrBuilder getHeaderOrBuilder() {
        return header_;
      }

      // optional uint32 error_code = 18;
      public static final int ERROR_CODE_FIELD_NUMBER = 18;
      private int errorCode_;
      /**
       * <code>optional uint32 error_code = 18;</code>
       */
      public boolean hasErrorCode() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 error_code = 18;</code>
       */
      public int getErrorCode() {
        return errorCode_;
      }

      // optional string error_message = 19;
      public static final int ERROR_MESSAGE_FIELD_NUMBER = 19;
      private java.lang.Object errorMessage_;
      /**
       * <code>optional string error_message = 19;</code>
       */
      public boolean hasErrorMessage() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string error_message = 19;</code>
       */
      public java.lang.String getErrorMessage() {
        java.lang.Object ref = errorMessage_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            errorMessage_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string error_message = 19;</code>
       */
      public com.google.protobuf.ByteString
          getErrorMessageBytes() {
        java.lang.Object ref = errorMessage_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          errorMessage_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AuthReply auth = 2;
      public static final int AUTH_FIELD_NUMBER = 2;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply auth_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AuthReply auth = 2;</code>
       */
      public boolean hasAuth() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AuthReply auth = 2;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply getAuth() {
        return auth_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AuthReply auth = 2;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReplyOrBuilder getAuthOrBuilder() {
        return auth_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_login = 3;
      public static final int USER_LOGIN_FIELD_NUMBER = 3;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply userLogin_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_login = 3;</code>
       */
      public boolean hasUserLogin() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_login = 3;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply getUserLogin() {
        return userLogin_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_login = 3;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReplyOrBuilder getUserLoginOrBuilder() {
        return userLogin_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_logout = 4;
      public static final int USER_LOGOUT_FIELD_NUMBER = 4;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply userLogout_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_logout = 4;</code>
       */
      public boolean hasUserLogout() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_logout = 4;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply getUserLogout() {
        return userLogout_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_logout = 4;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReplyOrBuilder getUserLogoutOrBuilder() {
        return userLogout_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;
      public static final int ADD_CONTROL_OBJECT_PASSPORT_FIELD_NUMBER = 5;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport addControlObjectPassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;</code>
       */
      public boolean hasAddControlObjectPassport() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport getAddControlObjectPassport() {
        return addControlObjectPassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportOrBuilder getAddControlObjectPassportOrBuilder() {
        return addControlObjectPassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 7;
      public static final int UPD_CONTROL_OBJECT_PASSPORT_FIELD_NUMBER = 7;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport updControlObjectPassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 7;</code>
       */
      public boolean hasUpdControlObjectPassport() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 7;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport getUpdControlObjectPassport() {
        return updControlObjectPassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 7;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportOrBuilder getUpdControlObjectPassportOrBuilder() {
        return updControlObjectPassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 8;
      public static final int DEL_CONTROL_OBJECT_PASSPORT_FIELD_NUMBER = 8;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport delControlObjectPassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 8;</code>
       */
      public boolean hasDelControlObjectPassport() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 8;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport getDelControlObjectPassport() {
        return delControlObjectPassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 8;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportOrBuilder getDelControlObjectPassportOrBuilder() {
        return delControlObjectPassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectStatus add_control_object_status = 9;
      public static final int ADD_CONTROL_OBJECT_STATUS_FIELD_NUMBER = 9;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus addControlObjectStatus_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectStatus add_control_object_status = 9;</code>
       */
      public boolean hasAddControlObjectStatus() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectStatus add_control_object_status = 9;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus getAddControlObjectStatus() {
        return addControlObjectStatus_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectStatus add_control_object_status = 9;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatusOrBuilder getAddControlObjectStatusOrBuilder() {
        return addControlObjectStatus_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectStatus upd_control_object_status = 10;
      public static final int UPD_CONTROL_OBJECT_STATUS_FIELD_NUMBER = 10;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus updControlObjectStatus_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectStatus upd_control_object_status = 10;</code>
       */
      public boolean hasUpdControlObjectStatus() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectStatus upd_control_object_status = 10;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus getUpdControlObjectStatus() {
        return updControlObjectStatus_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectStatus upd_control_object_status = 10;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatusOrBuilder getUpdControlObjectStatusOrBuilder() {
        return updControlObjectStatus_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectAlarm add_control_object_alarm = 11;
      public static final int ADD_CONTROL_OBJECT_ALARM_FIELD_NUMBER = 11;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm addControlObjectAlarm_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectAlarm add_control_object_alarm = 11;</code>
       */
      public boolean hasAddControlObjectAlarm() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectAlarm add_control_object_alarm = 11;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm getAddControlObjectAlarm() {
        return addControlObjectAlarm_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectAlarm add_control_object_alarm = 11;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarmOrBuilder getAddControlObjectAlarmOrBuilder() {
        return addControlObjectAlarm_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectAlarm upd_control_object_alarm = 12;
      public static final int UPD_CONTROL_OBJECT_ALARM_FIELD_NUMBER = 12;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm updControlObjectAlarm_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectAlarm upd_control_object_alarm = 12;</code>
       */
      public boolean hasUpdControlObjectAlarm() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectAlarm upd_control_object_alarm = 12;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm getUpdControlObjectAlarm() {
        return updControlObjectAlarm_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectAlarm upd_control_object_alarm = 12;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarmOrBuilder getUpdControlObjectAlarmOrBuilder() {
        return updControlObjectAlarm_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentStatus add_equipment_status = 13;
      public static final int ADD_EQUIPMENT_STATUS_FIELD_NUMBER = 13;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus addEquipmentStatus_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentStatus add_equipment_status = 13;</code>
       */
      public boolean hasAddEquipmentStatus() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentStatus add_equipment_status = 13;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus getAddEquipmentStatus() {
        return addEquipmentStatus_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentStatus add_equipment_status = 13;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatusOrBuilder getAddEquipmentStatusOrBuilder() {
        return addEquipmentStatus_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentStatus upd_equipment_status = 14;
      public static final int UPD_EQUIPMENT_STATUS_FIELD_NUMBER = 14;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus updEquipmentStatus_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentStatus upd_equipment_status = 14;</code>
       */
      public boolean hasUpdEquipmentStatus() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentStatus upd_equipment_status = 14;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus getUpdEquipmentStatus() {
        return updEquipmentStatus_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentStatus upd_equipment_status = 14;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatusOrBuilder getUpdEquipmentStatusOrBuilder() {
        return updEquipmentStatus_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 15;
      public static final int ADD_EQUIPMENT_PASSPORT_FIELD_NUMBER = 15;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport addEquipmentPassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 15;</code>
       */
      public boolean hasAddEquipmentPassport() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 15;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport getAddEquipmentPassport() {
        return addEquipmentPassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 15;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportOrBuilder getAddEquipmentPassportOrBuilder() {
        return addEquipmentPassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 16;
      public static final int UPD_EQUIPMENT_PASSPORT_FIELD_NUMBER = 16;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport updEquipmentPassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 16;</code>
       */
      public boolean hasUpdEquipmentPassport() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 16;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport getUpdEquipmentPassport() {
        return updEquipmentPassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 16;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportOrBuilder getUpdEquipmentPassportOrBuilder() {
        return updEquipmentPassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 17;
      public static final int DEL_EQUIPMENT_PASSPORT_FIELD_NUMBER = 17;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport delEquipmentPassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 17;</code>
       */
      public boolean hasDelEquipmentPassport() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 17;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport getDelEquipmentPassport() {
        return delEquipmentPassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 17;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportOrBuilder getDelEquipmentPassportOrBuilder() {
        return delEquipmentPassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdCommunicationDriverStatus upd_communication_driver_status = 20;
      public static final int UPD_COMMUNICATION_DRIVER_STATUS_FIELD_NUMBER = 20;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus updCommunicationDriverStatus_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdCommunicationDriverStatus upd_communication_driver_status = 20;</code>
       */
      public boolean hasUpdCommunicationDriverStatus() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdCommunicationDriverStatus upd_communication_driver_status = 20;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus getUpdCommunicationDriverStatus() {
        return updCommunicationDriverStatus_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdCommunicationDriverStatus upd_communication_driver_status = 20;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatusOrBuilder getUpdCommunicationDriverStatusOrBuilder() {
        return updCommunicationDriverStatus_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AckRequest ack_request = 21;
      public static final int ACK_REQUEST_FIELD_NUMBER = 21;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest ackRequest_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AckRequest ack_request = 21;</code>
       *
       * <pre>
       * запрос на ответ 
       * </pre>
       */
      public boolean hasAckRequest() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AckRequest ack_request = 21;</code>
       *
       * <pre>
       * запрос на ответ 
       * </pre>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest getAckRequest() {
        return ackRequest_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AckRequest ack_request = 21;</code>
       *
       * <pre>
       * запрос на ответ 
       * </pre>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequestOrBuilder getAckRequestOrBuilder() {
        return ackRequest_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 22;
      public static final int ADD_ZONE_FIELD_NUMBER = 22;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone addZone_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 22;</code>
       */
      public boolean hasAddZone() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 22;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone getAddZone() {
        return addZone_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 22;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZoneOrBuilder getAddZoneOrBuilder() {
        return addZone_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 23;
      public static final int UPD_ZONE_FIELD_NUMBER = 23;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone updZone_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 23;</code>
       */
      public boolean hasUpdZone() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 23;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone getUpdZone() {
        return updZone_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 23;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZoneOrBuilder getUpdZoneOrBuilder() {
        return updZone_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 24;
      public static final int DEL_ZONE_FIELD_NUMBER = 24;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone delZone_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 24;</code>
       */
      public boolean hasDelZone() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 24;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone getDelZone() {
        return delZone_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 24;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZoneOrBuilder getDelZoneOrBuilder() {
        return delZone_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 25;
      public static final int ADD_CLIENT_PASSPORT_FIELD_NUMBER = 25;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport addClientPassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 25;</code>
       */
      public boolean hasAddClientPassport() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 25;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport getAddClientPassport() {
        return addClientPassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 25;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassportOrBuilder getAddClientPassportOrBuilder() {
        return addClientPassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 26;
      public static final int UPD_CLIENT_PASSPORT_FIELD_NUMBER = 26;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport updClientPassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 26;</code>
       */
      public boolean hasUpdClientPassport() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 26;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport getUpdClientPassport() {
        return updClientPassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 26;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassportOrBuilder getUpdClientPassportOrBuilder() {
        return updClientPassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 27;
      public static final int DEL_CLIENT_PASSPORT_FIELD_NUMBER = 27;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport delClientPassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 27;</code>
       */
      public boolean hasDelClientPassport() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 27;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport getDelClientPassport() {
        return delClientPassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 27;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassportOrBuilder getDelClientPassportOrBuilder() {
        return delClientPassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthReply primary_auth = 28;
      public static final int PRIMARY_AUTH_FIELD_NUMBER = 28;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply primaryAuth_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthReply primary_auth = 28;</code>
       *
       * <pre>
       * Первичная авторизация клиента.
       * </pre>
       */
      public boolean hasPrimaryAuth() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthReply primary_auth = 28;</code>
       *
       * <pre>
       * Первичная авторизация клиента.
       * </pre>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply getPrimaryAuth() {
        return primaryAuth_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthReply primary_auth = 28;</code>
       *
       * <pre>
       * Первичная авторизация клиента.
       * </pre>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReplyOrBuilder getPrimaryAuthOrBuilder() {
        return primaryAuth_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 29;
      public static final int ADD_USER_PASSPORT_FIELD_NUMBER = 29;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport addUserPassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 29;</code>
       */
      public boolean hasAddUserPassport() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 29;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport getAddUserPassport() {
        return addUserPassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 29;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassportOrBuilder getAddUserPassportOrBuilder() {
        return addUserPassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 30;
      public static final int UPD_USER_PASSPORT_FIELD_NUMBER = 30;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport updUserPassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 30;</code>
       */
      public boolean hasUpdUserPassport() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 30;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport getUpdUserPassport() {
        return updUserPassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 30;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassportOrBuilder getUpdUserPassportOrBuilder() {
        return updUserPassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 31;
      public static final int DEL_USER_PASSPORT_FIELD_NUMBER = 31;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport delUserPassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 31;</code>
       */
      public boolean hasDelUserPassport() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 31;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport getDelUserPassport() {
        return delUserPassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 31;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassportOrBuilder getDelUserPassportOrBuilder() {
        return delUserPassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 32;
      public static final int ADD_INTERFACE_PASSPORT_FIELD_NUMBER = 32;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport addInterfacePassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 32;</code>
       */
      public boolean hasAddInterfacePassport() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 32;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport getAddInterfacePassport() {
        return addInterfacePassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 32;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportOrBuilder getAddInterfacePassportOrBuilder() {
        return addInterfacePassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 33;
      public static final int UPD_INTERFACE_PASSPORT_FIELD_NUMBER = 33;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport updInterfacePassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 33;</code>
       */
      public boolean hasUpdInterfacePassport() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 33;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport getUpdInterfacePassport() {
        return updInterfacePassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 33;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportOrBuilder getUpdInterfacePassportOrBuilder() {
        return updInterfacePassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 34;
      public static final int DEL_INTERFACE_PASSPORT_FIELD_NUMBER = 34;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport delInterfacePassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 34;</code>
       */
      public boolean hasDelInterfacePassport() {
        return ((bitField1_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 34;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport getDelInterfacePassport() {
        return delInterfacePassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 34;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportOrBuilder getDelInterfacePassportOrBuilder() {
        return delInterfacePassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 35;
      public static final int ADD_CONTROL_OBJECT_PASSPORT_TYPE_FIELD_NUMBER = 35;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType addControlObjectPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 35;</code>
       */
      public boolean hasAddControlObjectPassportType() {
        return ((bitField1_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 35;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType getAddControlObjectPassportType() {
        return addControlObjectPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 35;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportTypeOrBuilder getAddControlObjectPassportTypeOrBuilder() {
        return addControlObjectPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 36;
      public static final int UPD_CONTROL_OBJECT_PASSPORT_TYPE_FIELD_NUMBER = 36;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType updControlObjectPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 36;</code>
       */
      public boolean hasUpdControlObjectPassportType() {
        return ((bitField1_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 36;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType getUpdControlObjectPassportType() {
        return updControlObjectPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 36;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportTypeOrBuilder getUpdControlObjectPassportTypeOrBuilder() {
        return updControlObjectPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 37;
      public static final int DEL_CONTROL_OBJECT_PASSPORT_TYPE_FIELD_NUMBER = 37;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType delControlObjectPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 37;</code>
       */
      public boolean hasDelControlObjectPassportType() {
        return ((bitField1_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 37;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType getDelControlObjectPassportType() {
        return delControlObjectPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 37;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportTypeOrBuilder getDelControlObjectPassportTypeOrBuilder() {
        return delControlObjectPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 38;
      public static final int ADD_CONTROL_ELEMENT_PASSPORT_TYPE_FIELD_NUMBER = 38;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType addControlElementPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 38;</code>
       */
      public boolean hasAddControlElementPassportType() {
        return ((bitField1_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 38;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType getAddControlElementPassportType() {
        return addControlElementPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 38;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportTypeOrBuilder getAddControlElementPassportTypeOrBuilder() {
        return addControlElementPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 39;
      public static final int UPD_CONTROL_ELEMENT_PASSPORT_TYPE_FIELD_NUMBER = 39;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType updControlElementPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 39;</code>
       */
      public boolean hasUpdControlElementPassportType() {
        return ((bitField1_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 39;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType getUpdControlElementPassportType() {
        return updControlElementPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 39;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportTypeOrBuilder getUpdControlElementPassportTypeOrBuilder() {
        return updControlElementPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 40;
      public static final int DEL_CONTROL_ELEMENT_PASSPORT_TYPE_FIELD_NUMBER = 40;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType delControlElementPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 40;</code>
       */
      public boolean hasDelControlElementPassportType() {
        return ((bitField1_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 40;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType getDelControlElementPassportType() {
        return delControlElementPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 40;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportTypeOrBuilder getDelControlElementPassportTypeOrBuilder() {
        return delControlElementPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 41;
      public static final int ADD_EQUIPMENT_PASSPORT_TYPE_FIELD_NUMBER = 41;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType addEquipmentPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 41;</code>
       */
      public boolean hasAddEquipmentPassportType() {
        return ((bitField1_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 41;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType getAddEquipmentPassportType() {
        return addEquipmentPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 41;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportTypeOrBuilder getAddEquipmentPassportTypeOrBuilder() {
        return addEquipmentPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 42;
      public static final int UPD_EQUIPMENT_PASSPORT_TYPE_FIELD_NUMBER = 42;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType updEquipmentPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 42;</code>
       */
      public boolean hasUpdEquipmentPassportType() {
        return ((bitField1_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 42;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType getUpdEquipmentPassportType() {
        return updEquipmentPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 42;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportTypeOrBuilder getUpdEquipmentPassportTypeOrBuilder() {
        return updEquipmentPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 43;
      public static final int DEL_EQUIPMENT_PASSPORT_TYPE_FIELD_NUMBER = 43;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType delEquipmentPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 43;</code>
       */
      public boolean hasDelEquipmentPassportType() {
        return ((bitField1_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 43;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType getDelEquipmentPassportType() {
        return delEquipmentPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 43;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportTypeOrBuilder getDelEquipmentPassportTypeOrBuilder() {
        return delEquipmentPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 44;
      public static final int ADD_MANAGED_ELEMENT_PASSPORT_TYPE_FIELD_NUMBER = 44;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType addManagedElementPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 44;</code>
       */
      public boolean hasAddManagedElementPassportType() {
        return ((bitField1_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 44;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType getAddManagedElementPassportType() {
        return addManagedElementPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 44;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportTypeOrBuilder getAddManagedElementPassportTypeOrBuilder() {
        return addManagedElementPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 45;
      public static final int UPD_MANAGED_ELEMENT_PASSPORT_TYPE_FIELD_NUMBER = 45;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType updManagedElementPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 45;</code>
       */
      public boolean hasUpdManagedElementPassportType() {
        return ((bitField1_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 45;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType getUpdManagedElementPassportType() {
        return updManagedElementPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 45;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportTypeOrBuilder getUpdManagedElementPassportTypeOrBuilder() {
        return updManagedElementPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 46;
      public static final int DEL_MANAGED_ELEMENT_PASSPORT_TYPE_FIELD_NUMBER = 46;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType delManagedElementPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 46;</code>
       */
      public boolean hasDelManagedElementPassportType() {
        return ((bitField1_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 46;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType getDelManagedElementPassportType() {
        return delManagedElementPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 46;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportTypeOrBuilder getDelManagedElementPassportTypeOrBuilder() {
        return delManagedElementPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 47;
      public static final int ADD_SENSOR_CONTROL_ELEMENT_PASSPORT_TYPE_FIELD_NUMBER = 47;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType addSensorControlElementPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 47;</code>
       */
      public boolean hasAddSensorControlElementPassportType() {
        return ((bitField1_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 47;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType getAddSensorControlElementPassportType() {
        return addSensorControlElementPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 47;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportTypeOrBuilder getAddSensorControlElementPassportTypeOrBuilder() {
        return addSensorControlElementPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 48;
      public static final int UPD_SENSOR_CONTROL_ELEMENT_PASSPORT_TYPE_FIELD_NUMBER = 48;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType updSensorControlElementPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 48;</code>
       */
      public boolean hasUpdSensorControlElementPassportType() {
        return ((bitField1_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 48;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType getUpdSensorControlElementPassportType() {
        return updSensorControlElementPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 48;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportTypeOrBuilder getUpdSensorControlElementPassportTypeOrBuilder() {
        return updSensorControlElementPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 49;
      public static final int DEL_SENSOR_CONTROL_ELEMENT_PASSPORT_TYPE_FIELD_NUMBER = 49;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType delSensorControlElementPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 49;</code>
       */
      public boolean hasDelSensorControlElementPassportType() {
        return ((bitField1_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 49;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType getDelSensorControlElementPassportType() {
        return delSensorControlElementPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 49;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportTypeOrBuilder getDelSensorControlElementPassportTypeOrBuilder() {
        return delSensorControlElementPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 50;
      public static final int ADD_GENERAL_PURPOSE_REFERENCE_FIELD_NUMBER = 50;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference addGeneralPurposeReference_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 50;</code>
       */
      public boolean hasAddGeneralPurposeReference() {
        return ((bitField1_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 50;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference getAddGeneralPurposeReference() {
        return addGeneralPurposeReference_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 50;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceOrBuilder getAddGeneralPurposeReferenceOrBuilder() {
        return addGeneralPurposeReference_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReference upd_general_purpose_reference = 51;
      public static final int UPD_GENERAL_PURPOSE_REFERENCE_FIELD_NUMBER = 51;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference updGeneralPurposeReference_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReference upd_general_purpose_reference = 51;</code>
       */
      public boolean hasUpdGeneralPurposeReference() {
        return ((bitField1_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReference upd_general_purpose_reference = 51;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference getUpdGeneralPurposeReference() {
        return updGeneralPurposeReference_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReference upd_general_purpose_reference = 51;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceOrBuilder getUpdGeneralPurposeReferenceOrBuilder() {
        return updGeneralPurposeReference_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 52;
      public static final int DEL_GENERAL_PURPOSE_REFERENCE_FIELD_NUMBER = 52;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference delGeneralPurposeReference_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 52;</code>
       */
      public boolean hasDelGeneralPurposeReference() {
        return ((bitField1_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 52;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference getDelGeneralPurposeReference() {
        return delGeneralPurposeReference_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 52;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceOrBuilder getDelGeneralPurposeReferenceOrBuilder() {
        return delGeneralPurposeReference_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 53;
      public static final int ADD_GENERAL_PURPOSE_REFERENCE_RECORD_FIELD_NUMBER = 53;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord addGeneralPurposeReferenceRecord_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 53;</code>
       */
      public boolean hasAddGeneralPurposeReferenceRecord() {
        return ((bitField1_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 53;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord getAddGeneralPurposeReferenceRecord() {
        return addGeneralPurposeReferenceRecord_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 53;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecordOrBuilder getAddGeneralPurposeReferenceRecordOrBuilder() {
        return addGeneralPurposeReferenceRecord_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 54;
      public static final int UPD_GENERAL_PURPOSE_REFERENCE_RECORD_FIELD_NUMBER = 54;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord updGeneralPurposeReferenceRecord_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 54;</code>
       */
      public boolean hasUpdGeneralPurposeReferenceRecord() {
        return ((bitField1_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 54;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord getUpdGeneralPurposeReferenceRecord() {
        return updGeneralPurposeReferenceRecord_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 54;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecordOrBuilder getUpdGeneralPurposeReferenceRecordOrBuilder() {
        return updGeneralPurposeReferenceRecord_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 55;
      public static final int DEL_GENERAL_PURPOSE_REFERENCE_RECORD_FIELD_NUMBER = 55;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord delGeneralPurposeReferenceRecord_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 55;</code>
       */
      public boolean hasDelGeneralPurposeReferenceRecord() {
        return ((bitField1_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 55;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord getDelGeneralPurposeReferenceRecord() {
        return delGeneralPurposeReferenceRecord_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 55;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecordOrBuilder getDelGeneralPurposeReferenceRecordOrBuilder() {
        return delGeneralPurposeReferenceRecord_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassportType add_interface_passport_type = 56;
      public static final int ADD_INTERFACE_PASSPORT_TYPE_FIELD_NUMBER = 56;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType addInterfacePassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassportType add_interface_passport_type = 56;</code>
       */
      public boolean hasAddInterfacePassportType() {
        return ((bitField1_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassportType add_interface_passport_type = 56;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType getAddInterfacePassportType() {
        return addInterfacePassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassportType add_interface_passport_type = 56;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportTypeOrBuilder getAddInterfacePassportTypeOrBuilder() {
        return addInterfacePassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassportType upd_interface_passport_type = 57;
      public static final int UPD_INTERFACE_PASSPORT_TYPE_FIELD_NUMBER = 57;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType updInterfacePassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassportType upd_interface_passport_type = 57;</code>
       */
      public boolean hasUpdInterfacePassportType() {
        return ((bitField1_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassportType upd_interface_passport_type = 57;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType getUpdInterfacePassportType() {
        return updInterfacePassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassportType upd_interface_passport_type = 57;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportTypeOrBuilder getUpdInterfacePassportTypeOrBuilder() {
        return updInterfacePassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassportType del_interface_passport_type = 58;
      public static final int DEL_INTERFACE_PASSPORT_TYPE_FIELD_NUMBER = 58;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType delInterfacePassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassportType del_interface_passport_type = 58;</code>
       */
      public boolean hasDelInterfacePassportType() {
        return ((bitField1_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassportType del_interface_passport_type = 58;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType getDelInterfacePassportType() {
        return delInterfacePassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassportType del_interface_passport_type = 58;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportTypeOrBuilder getDelInterfacePassportTypeOrBuilder() {
        return delInterfacePassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectState upd_control_object_state = 59;
      public static final int UPD_CONTROL_OBJECT_STATE_FIELD_NUMBER = 59;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState updControlObjectState_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectState upd_control_object_state = 59;</code>
       */
      public boolean hasUpdControlObjectState() {
        return ((bitField1_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectState upd_control_object_state = 59;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState getUpdControlObjectState() {
        return updControlObjectState_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectState upd_control_object_state = 59;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStateOrBuilder getUpdControlObjectStateOrBuilder() {
        return updControlObjectState_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentState upd_equipment_state = 60;
      public static final int UPD_EQUIPMENT_STATE_FIELD_NUMBER = 60;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState updEquipmentState_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentState upd_equipment_state = 60;</code>
       */
      public boolean hasUpdEquipmentState() {
        return ((bitField1_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentState upd_equipment_state = 60;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState getUpdEquipmentState() {
        return updEquipmentState_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentState upd_equipment_state = 60;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStateOrBuilder getUpdEquipmentStateOrBuilder() {
        return updEquipmentState_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 61;
      public static final int ADD_EQUIPMENT_LOGICAL_INPUT_PASSPORT_TYPE_FIELD_NUMBER = 61;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType addEquipmentLogicalInputPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 61;</code>
       */
      public boolean hasAddEquipmentLogicalInputPassportType() {
        return ((bitField1_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 61;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType getAddEquipmentLogicalInputPassportType() {
        return addEquipmentLogicalInputPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 61;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportTypeOrBuilder getAddEquipmentLogicalInputPassportTypeOrBuilder() {
        return addEquipmentLogicalInputPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 62;
      public static final int UPD_EQUIPMENT_LOGICAL_INPUT_PASSPORT_TYPE_FIELD_NUMBER = 62;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType updEquipmentLogicalInputPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 62;</code>
       */
      public boolean hasUpdEquipmentLogicalInputPassportType() {
        return ((bitField1_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 62;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType getUpdEquipmentLogicalInputPassportType() {
        return updEquipmentLogicalInputPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 62;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportTypeOrBuilder getUpdEquipmentLogicalInputPassportTypeOrBuilder() {
        return updEquipmentLogicalInputPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 63;
      public static final int DEL_EQUIPMENT_LOGICAL_INPUT_PASSPORT_TYPE_FIELD_NUMBER = 63;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType delEquipmentLogicalInputPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 63;</code>
       */
      public boolean hasDelEquipmentLogicalInputPassportType() {
        return ((bitField1_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 63;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType getDelEquipmentLogicalInputPassportType() {
        return delEquipmentLogicalInputPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 63;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportTypeOrBuilder getDelEquipmentLogicalInputPassportTypeOrBuilder() {
        return delEquipmentLogicalInputPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 64;
      public static final int ADD_EQUIPMENT_LOGICAL_OUTPUT_PASSPORT_TYPE_FIELD_NUMBER = 64;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType addEquipmentLogicalOutputPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 64;</code>
       */
      public boolean hasAddEquipmentLogicalOutputPassportType() {
        return ((bitField1_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 64;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType getAddEquipmentLogicalOutputPassportType() {
        return addEquipmentLogicalOutputPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 64;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportTypeOrBuilder getAddEquipmentLogicalOutputPassportTypeOrBuilder() {
        return addEquipmentLogicalOutputPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 65;
      public static final int UPD_EQUIPMENT_LOGICAL_OUTPUT_PASSPORT_TYPE_FIELD_NUMBER = 65;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType updEquipmentLogicalOutputPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 65;</code>
       */
      public boolean hasUpdEquipmentLogicalOutputPassportType() {
        return ((bitField1_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 65;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType getUpdEquipmentLogicalOutputPassportType() {
        return updEquipmentLogicalOutputPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 65;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportTypeOrBuilder getUpdEquipmentLogicalOutputPassportTypeOrBuilder() {
        return updEquipmentLogicalOutputPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 66;
      public static final int DEL_EQUIPMENT_LOGICAL_OUTPUT_PASSPORT_TYPE_FIELD_NUMBER = 66;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType delEquipmentLogicalOutputPassportType_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 66;</code>
       */
      public boolean hasDelEquipmentLogicalOutputPassportType() {
        return ((bitField2_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 66;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType getDelEquipmentLogicalOutputPassportType() {
        return delEquipmentLogicalOutputPassportType_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 66;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportTypeOrBuilder getDelEquipmentLogicalOutputPassportTypeOrBuilder() {
        return delEquipmentLogicalOutputPassportType_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 67;
      public static final int ADD_EQUIPMENT_FIRMWARE_PASSPORT_FIELD_NUMBER = 67;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport addEquipmentFirmwarePassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 67;</code>
       */
      public boolean hasAddEquipmentFirmwarePassport() {
        return ((bitField2_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 67;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport getAddEquipmentFirmwarePassport() {
        return addEquipmentFirmwarePassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 67;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassportOrBuilder getAddEquipmentFirmwarePassportOrBuilder() {
        return addEquipmentFirmwarePassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 68;
      public static final int UPD_EQUIPMENT_FIRMWARE_PASSPORT_FIELD_NUMBER = 68;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport updEquipmentFirmwarePassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 68;</code>
       */
      public boolean hasUpdEquipmentFirmwarePassport() {
        return ((bitField2_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 68;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport getUpdEquipmentFirmwarePassport() {
        return updEquipmentFirmwarePassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 68;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassportOrBuilder getUpdEquipmentFirmwarePassportOrBuilder() {
        return updEquipmentFirmwarePassport_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 69;
      public static final int DEL_EQUIPMENT_FIRMWARE_PASSPORT_FIELD_NUMBER = 69;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport delEquipmentFirmwarePassport_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 69;</code>
       */
      public boolean hasDelEquipmentFirmwarePassport() {
        return ((bitField2_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 69;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport getDelEquipmentFirmwarePassport() {
        return delEquipmentFirmwarePassport_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 69;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassportOrBuilder getDelEquipmentFirmwarePassportOrBuilder() {
        return delEquipmentFirmwarePassport_;
      }

      // optional .almaz2.rpc.commands.EquipmentAnswerBase equipment_answer = 100;
      public static final int EQUIPMENT_ANSWER_FIELD_NUMBER = 100;
      private ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentAnswerBase equipmentAnswer_;
      /**
       * <code>optional .almaz2.rpc.commands.EquipmentAnswerBase equipment_answer = 100;</code>
       *
       * <pre>
       * Ответы на команды для оборудования объекта.
       * </pre>
       */
      public boolean hasEquipmentAnswer() {
        return ((bitField2_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .almaz2.rpc.commands.EquipmentAnswerBase equipment_answer = 100;</code>
       *
       * <pre>
       * Ответы на команды для оборудования объекта.
       * </pre>
       */
      public ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentAnswerBase getEquipmentAnswer() {
        return equipmentAnswer_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.EquipmentAnswerBase equipment_answer = 100;</code>
       *
       * <pre>
       * Ответы на команды для оборудования объекта.
       * </pre>
       */
      public ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentAnswerBaseOrBuilder getEquipmentAnswerOrBuilder() {
        return equipmentAnswer_;
      }

      // optional .almaz2.rpc.commands.DatabaseResultBase database_result = 200;
      public static final int DATABASE_RESULT_FIELD_NUMBER = 200;
      private ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase databaseResult_;
      /**
       * <code>optional .almaz2.rpc.commands.DatabaseResultBase database_result = 200;</code>
       *
       * <pre>
       * Ответы на команды для запросов из базы данных.
       * </pre>
       */
      public boolean hasDatabaseResult() {
        return ((bitField2_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .almaz2.rpc.commands.DatabaseResultBase database_result = 200;</code>
       *
       * <pre>
       * Ответы на команды для запросов из базы данных.
       * </pre>
       */
      public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase getDatabaseResult() {
        return databaseResult_;
      }
      /**
       * <code>optional .almaz2.rpc.commands.DatabaseResultBase database_result = 200;</code>
       *
       * <pre>
       * Ответы на команды для запросов из базы данных.
       * </pre>
       */
      public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBaseOrBuilder getDatabaseResultOrBuilder() {
        return databaseResult_;
      }

      private void initFields() {
        header_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header.getDefaultInstance();
        errorCode_ = 0;
        errorMessage_ = "";
        auth_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply.getDefaultInstance();
        userLogin_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply.getDefaultInstance();
        userLogout_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply.getDefaultInstance();
        addControlObjectPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport.getDefaultInstance();
        updControlObjectPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport.getDefaultInstance();
        delControlObjectPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport.getDefaultInstance();
        addControlObjectStatus_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus.getDefaultInstance();
        updControlObjectStatus_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus.getDefaultInstance();
        addControlObjectAlarm_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm.getDefaultInstance();
        updControlObjectAlarm_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm.getDefaultInstance();
        addEquipmentStatus_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus.getDefaultInstance();
        updEquipmentStatus_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus.getDefaultInstance();
        addEquipmentPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport.getDefaultInstance();
        updEquipmentPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport.getDefaultInstance();
        delEquipmentPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport.getDefaultInstance();
        updCommunicationDriverStatus_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus.getDefaultInstance();
        ackRequest_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest.getDefaultInstance();
        addZone_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone.getDefaultInstance();
        updZone_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone.getDefaultInstance();
        delZone_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone.getDefaultInstance();
        addClientPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport.getDefaultInstance();
        updClientPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport.getDefaultInstance();
        delClientPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport.getDefaultInstance();
        primaryAuth_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply.getDefaultInstance();
        addUserPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport.getDefaultInstance();
        updUserPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport.getDefaultInstance();
        delUserPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport.getDefaultInstance();
        addInterfacePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport.getDefaultInstance();
        updInterfacePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport.getDefaultInstance();
        delInterfacePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport.getDefaultInstance();
        addControlObjectPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType.getDefaultInstance();
        updControlObjectPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType.getDefaultInstance();
        delControlObjectPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType.getDefaultInstance();
        addControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType.getDefaultInstance();
        updControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType.getDefaultInstance();
        delControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType.getDefaultInstance();
        addEquipmentPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType.getDefaultInstance();
        updEquipmentPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType.getDefaultInstance();
        delEquipmentPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType.getDefaultInstance();
        addManagedElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType.getDefaultInstance();
        updManagedElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType.getDefaultInstance();
        delManagedElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType.getDefaultInstance();
        addSensorControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType.getDefaultInstance();
        updSensorControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType.getDefaultInstance();
        delSensorControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType.getDefaultInstance();
        addGeneralPurposeReference_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference.getDefaultInstance();
        updGeneralPurposeReference_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference.getDefaultInstance();
        delGeneralPurposeReference_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference.getDefaultInstance();
        addGeneralPurposeReferenceRecord_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord.getDefaultInstance();
        updGeneralPurposeReferenceRecord_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord.getDefaultInstance();
        delGeneralPurposeReferenceRecord_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord.getDefaultInstance();
        addInterfacePassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType.getDefaultInstance();
        updInterfacePassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType.getDefaultInstance();
        delInterfacePassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType.getDefaultInstance();
        updControlObjectState_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState.getDefaultInstance();
        updEquipmentState_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState.getDefaultInstance();
        addEquipmentLogicalInputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType.getDefaultInstance();
        updEquipmentLogicalInputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType.getDefaultInstance();
        delEquipmentLogicalInputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType.getDefaultInstance();
        addEquipmentLogicalOutputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType.getDefaultInstance();
        updEquipmentLogicalOutputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType.getDefaultInstance();
        delEquipmentLogicalOutputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType.getDefaultInstance();
        addEquipmentFirmwarePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport.getDefaultInstance();
        updEquipmentFirmwarePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport.getDefaultInstance();
        delEquipmentFirmwarePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport.getDefaultInstance();
        equipmentAnswer_ = ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentAnswerBase.getDefaultInstance();
        databaseResult_ = ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasAddControlObjectPassport()) {
          if (!getAddControlObjectPassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasUpdControlObjectPassport()) {
          if (!getUpdControlObjectPassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasAddEquipmentPassport()) {
          if (!getAddEquipmentPassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasUpdEquipmentPassport()) {
          if (!getUpdEquipmentPassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasAddClientPassport()) {
          if (!getAddClientPassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasUpdClientPassport()) {
          if (!getUpdClientPassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasAddUserPassport()) {
          if (!getAddUserPassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasUpdUserPassport()) {
          if (!getUpdUserPassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasAddInterfacePassport()) {
          if (!getAddInterfacePassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasUpdInterfacePassport()) {
          if (!getUpdInterfacePassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasAddControlObjectPassportType()) {
          if (!getAddControlObjectPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasUpdControlObjectPassportType()) {
          if (!getUpdControlObjectPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasAddControlElementPassportType()) {
          if (!getAddControlElementPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasUpdControlElementPassportType()) {
          if (!getUpdControlElementPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasAddEquipmentPassportType()) {
          if (!getAddEquipmentPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasUpdEquipmentPassportType()) {
          if (!getUpdEquipmentPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasAddManagedElementPassportType()) {
          if (!getAddManagedElementPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasUpdManagedElementPassportType()) {
          if (!getUpdManagedElementPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasAddSensorControlElementPassportType()) {
          if (!getAddSensorControlElementPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasUpdSensorControlElementPassportType()) {
          if (!getUpdSensorControlElementPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasAddGeneralPurposeReference()) {
          if (!getAddGeneralPurposeReference().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasUpdGeneralPurposeReference()) {
          if (!getUpdGeneralPurposeReference().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasAddInterfacePassportType()) {
          if (!getAddInterfacePassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasUpdInterfacePassportType()) {
          if (!getUpdInterfacePassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasAddEquipmentLogicalInputPassportType()) {
          if (!getAddEquipmentLogicalInputPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasUpdEquipmentLogicalInputPassportType()) {
          if (!getUpdEquipmentLogicalInputPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasAddEquipmentLogicalOutputPassportType()) {
          if (!getAddEquipmentLogicalOutputPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasUpdEquipmentLogicalOutputPassportType()) {
          if (!getUpdEquipmentLogicalOutputPassportType().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasAddEquipmentFirmwarePassport()) {
          if (!getAddEquipmentFirmwarePassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasUpdEquipmentFirmwarePassport()) {
          if (!getUpdEquipmentFirmwarePassport().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, header_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeMessage(2, auth_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          output.writeMessage(3, userLogin_);
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          output.writeMessage(4, userLogout_);
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          output.writeMessage(5, addControlObjectPassport_);
        }
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          output.writeMessage(7, updControlObjectPassport_);
        }
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          output.writeMessage(8, delControlObjectPassport_);
        }
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          output.writeMessage(9, addControlObjectStatus_);
        }
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          output.writeMessage(10, updControlObjectStatus_);
        }
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          output.writeMessage(11, addControlObjectAlarm_);
        }
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          output.writeMessage(12, updControlObjectAlarm_);
        }
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          output.writeMessage(13, addEquipmentStatus_);
        }
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          output.writeMessage(14, updEquipmentStatus_);
        }
        if (((bitField0_ & 0x00008000) == 0x00008000)) {
          output.writeMessage(15, addEquipmentPassport_);
        }
        if (((bitField0_ & 0x00010000) == 0x00010000)) {
          output.writeMessage(16, updEquipmentPassport_);
        }
        if (((bitField0_ & 0x00020000) == 0x00020000)) {
          output.writeMessage(17, delEquipmentPassport_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeUInt32(18, errorCode_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeBytes(19, getErrorMessageBytes());
        }
        if (((bitField0_ & 0x00040000) == 0x00040000)) {
          output.writeMessage(20, updCommunicationDriverStatus_);
        }
        if (((bitField0_ & 0x00080000) == 0x00080000)) {
          output.writeMessage(21, ackRequest_);
        }
        if (((bitField0_ & 0x00100000) == 0x00100000)) {
          output.writeMessage(22, addZone_);
        }
        if (((bitField0_ & 0x00200000) == 0x00200000)) {
          output.writeMessage(23, updZone_);
        }
        if (((bitField0_ & 0x00400000) == 0x00400000)) {
          output.writeMessage(24, delZone_);
        }
        if (((bitField0_ & 0x00800000) == 0x00800000)) {
          output.writeMessage(25, addClientPassport_);
        }
        if (((bitField0_ & 0x01000000) == 0x01000000)) {
          output.writeMessage(26, updClientPassport_);
        }
        if (((bitField0_ & 0x02000000) == 0x02000000)) {
          output.writeMessage(27, delClientPassport_);
        }
        if (((bitField0_ & 0x04000000) == 0x04000000)) {
          output.writeMessage(28, primaryAuth_);
        }
        if (((bitField0_ & 0x08000000) == 0x08000000)) {
          output.writeMessage(29, addUserPassport_);
        }
        if (((bitField0_ & 0x10000000) == 0x10000000)) {
          output.writeMessage(30, updUserPassport_);
        }
        if (((bitField0_ & 0x20000000) == 0x20000000)) {
          output.writeMessage(31, delUserPassport_);
        }
        if (((bitField0_ & 0x40000000) == 0x40000000)) {
          output.writeMessage(32, addInterfacePassport_);
        }
        if (((bitField0_ & 0x80000000) == 0x80000000)) {
          output.writeMessage(33, updInterfacePassport_);
        }
        if (((bitField1_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(34, delInterfacePassport_);
        }
        if (((bitField1_ & 0x00000002) == 0x00000002)) {
          output.writeMessage(35, addControlObjectPassportType_);
        }
        if (((bitField1_ & 0x00000004) == 0x00000004)) {
          output.writeMessage(36, updControlObjectPassportType_);
        }
        if (((bitField1_ & 0x00000008) == 0x00000008)) {
          output.writeMessage(37, delControlObjectPassportType_);
        }
        if (((bitField1_ & 0x00000010) == 0x00000010)) {
          output.writeMessage(38, addControlElementPassportType_);
        }
        if (((bitField1_ & 0x00000020) == 0x00000020)) {
          output.writeMessage(39, updControlElementPassportType_);
        }
        if (((bitField1_ & 0x00000040) == 0x00000040)) {
          output.writeMessage(40, delControlElementPassportType_);
        }
        if (((bitField1_ & 0x00000080) == 0x00000080)) {
          output.writeMessage(41, addEquipmentPassportType_);
        }
        if (((bitField1_ & 0x00000100) == 0x00000100)) {
          output.writeMessage(42, updEquipmentPassportType_);
        }
        if (((bitField1_ & 0x00000200) == 0x00000200)) {
          output.writeMessage(43, delEquipmentPassportType_);
        }
        if (((bitField1_ & 0x00000400) == 0x00000400)) {
          output.writeMessage(44, addManagedElementPassportType_);
        }
        if (((bitField1_ & 0x00000800) == 0x00000800)) {
          output.writeMessage(45, updManagedElementPassportType_);
        }
        if (((bitField1_ & 0x00001000) == 0x00001000)) {
          output.writeMessage(46, delManagedElementPassportType_);
        }
        if (((bitField1_ & 0x00002000) == 0x00002000)) {
          output.writeMessage(47, addSensorControlElementPassportType_);
        }
        if (((bitField1_ & 0x00004000) == 0x00004000)) {
          output.writeMessage(48, updSensorControlElementPassportType_);
        }
        if (((bitField1_ & 0x00008000) == 0x00008000)) {
          output.writeMessage(49, delSensorControlElementPassportType_);
        }
        if (((bitField1_ & 0x00010000) == 0x00010000)) {
          output.writeMessage(50, addGeneralPurposeReference_);
        }
        if (((bitField1_ & 0x00020000) == 0x00020000)) {
          output.writeMessage(51, updGeneralPurposeReference_);
        }
        if (((bitField1_ & 0x00040000) == 0x00040000)) {
          output.writeMessage(52, delGeneralPurposeReference_);
        }
        if (((bitField1_ & 0x00080000) == 0x00080000)) {
          output.writeMessage(53, addGeneralPurposeReferenceRecord_);
        }
        if (((bitField1_ & 0x00100000) == 0x00100000)) {
          output.writeMessage(54, updGeneralPurposeReferenceRecord_);
        }
        if (((bitField1_ & 0x00200000) == 0x00200000)) {
          output.writeMessage(55, delGeneralPurposeReferenceRecord_);
        }
        if (((bitField1_ & 0x00400000) == 0x00400000)) {
          output.writeMessage(56, addInterfacePassportType_);
        }
        if (((bitField1_ & 0x00800000) == 0x00800000)) {
          output.writeMessage(57, updInterfacePassportType_);
        }
        if (((bitField1_ & 0x01000000) == 0x01000000)) {
          output.writeMessage(58, delInterfacePassportType_);
        }
        if (((bitField1_ & 0x02000000) == 0x02000000)) {
          output.writeMessage(59, updControlObjectState_);
        }
        if (((bitField1_ & 0x04000000) == 0x04000000)) {
          output.writeMessage(60, updEquipmentState_);
        }
        if (((bitField1_ & 0x08000000) == 0x08000000)) {
          output.writeMessage(61, addEquipmentLogicalInputPassportType_);
        }
        if (((bitField1_ & 0x10000000) == 0x10000000)) {
          output.writeMessage(62, updEquipmentLogicalInputPassportType_);
        }
        if (((bitField1_ & 0x20000000) == 0x20000000)) {
          output.writeMessage(63, delEquipmentLogicalInputPassportType_);
        }
        if (((bitField1_ & 0x40000000) == 0x40000000)) {
          output.writeMessage(64, addEquipmentLogicalOutputPassportType_);
        }
        if (((bitField1_ & 0x80000000) == 0x80000000)) {
          output.writeMessage(65, updEquipmentLogicalOutputPassportType_);
        }
        if (((bitField2_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(66, delEquipmentLogicalOutputPassportType_);
        }
        if (((bitField2_ & 0x00000002) == 0x00000002)) {
          output.writeMessage(67, addEquipmentFirmwarePassport_);
        }
        if (((bitField2_ & 0x00000004) == 0x00000004)) {
          output.writeMessage(68, updEquipmentFirmwarePassport_);
        }
        if (((bitField2_ & 0x00000008) == 0x00000008)) {
          output.writeMessage(69, delEquipmentFirmwarePassport_);
        }
        if (((bitField2_ & 0x00000010) == 0x00000010)) {
          output.writeMessage(100, equipmentAnswer_);
        }
        if (((bitField2_ & 0x00000020) == 0x00000020)) {
          output.writeMessage(200, databaseResult_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, header_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, auth_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, userLogin_);
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, userLogout_);
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(5, addControlObjectPassport_);
        }
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(7, updControlObjectPassport_);
        }
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(8, delControlObjectPassport_);
        }
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(9, addControlObjectStatus_);
        }
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10, updControlObjectStatus_);
        }
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(11, addControlObjectAlarm_);
        }
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(12, updControlObjectAlarm_);
        }
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(13, addEquipmentStatus_);
        }
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(14, updEquipmentStatus_);
        }
        if (((bitField0_ & 0x00008000) == 0x00008000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(15, addEquipmentPassport_);
        }
        if (((bitField0_ & 0x00010000) == 0x00010000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(16, updEquipmentPassport_);
        }
        if (((bitField0_ & 0x00020000) == 0x00020000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(17, delEquipmentPassport_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(18, errorCode_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(19, getErrorMessageBytes());
        }
        if (((bitField0_ & 0x00040000) == 0x00040000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(20, updCommunicationDriverStatus_);
        }
        if (((bitField0_ & 0x00080000) == 0x00080000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(21, ackRequest_);
        }
        if (((bitField0_ & 0x00100000) == 0x00100000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(22, addZone_);
        }
        if (((bitField0_ & 0x00200000) == 0x00200000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(23, updZone_);
        }
        if (((bitField0_ & 0x00400000) == 0x00400000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(24, delZone_);
        }
        if (((bitField0_ & 0x00800000) == 0x00800000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(25, addClientPassport_);
        }
        if (((bitField0_ & 0x01000000) == 0x01000000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(26, updClientPassport_);
        }
        if (((bitField0_ & 0x02000000) == 0x02000000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(27, delClientPassport_);
        }
        if (((bitField0_ & 0x04000000) == 0x04000000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(28, primaryAuth_);
        }
        if (((bitField0_ & 0x08000000) == 0x08000000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(29, addUserPassport_);
        }
        if (((bitField0_ & 0x10000000) == 0x10000000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(30, updUserPassport_);
        }
        if (((bitField0_ & 0x20000000) == 0x20000000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(31, delUserPassport_);
        }
        if (((bitField0_ & 0x40000000) == 0x40000000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(32, addInterfacePassport_);
        }
        if (((bitField0_ & 0x80000000) == 0x80000000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(33, updInterfacePassport_);
        }
        if (((bitField1_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(34, delInterfacePassport_);
        }
        if (((bitField1_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(35, addControlObjectPassportType_);
        }
        if (((bitField1_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(36, updControlObjectPassportType_);
        }
        if (((bitField1_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(37, delControlObjectPassportType_);
        }
        if (((bitField1_ & 0x00000010) == 0x00000010)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(38, addControlElementPassportType_);
        }
        if (((bitField1_ & 0x00000020) == 0x00000020)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(39, updControlElementPassportType_);
        }
        if (((bitField1_ & 0x00000040) == 0x00000040)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(40, delControlElementPassportType_);
        }
        if (((bitField1_ & 0x00000080) == 0x00000080)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(41, addEquipmentPassportType_);
        }
        if (((bitField1_ & 0x00000100) == 0x00000100)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(42, updEquipmentPassportType_);
        }
        if (((bitField1_ & 0x00000200) == 0x00000200)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(43, delEquipmentPassportType_);
        }
        if (((bitField1_ & 0x00000400) == 0x00000400)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(44, addManagedElementPassportType_);
        }
        if (((bitField1_ & 0x00000800) == 0x00000800)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(45, updManagedElementPassportType_);
        }
        if (((bitField1_ & 0x00001000) == 0x00001000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(46, delManagedElementPassportType_);
        }
        if (((bitField1_ & 0x00002000) == 0x00002000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(47, addSensorControlElementPassportType_);
        }
        if (((bitField1_ & 0x00004000) == 0x00004000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(48, updSensorControlElementPassportType_);
        }
        if (((bitField1_ & 0x00008000) == 0x00008000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(49, delSensorControlElementPassportType_);
        }
        if (((bitField1_ & 0x00010000) == 0x00010000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(50, addGeneralPurposeReference_);
        }
        if (((bitField1_ & 0x00020000) == 0x00020000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(51, updGeneralPurposeReference_);
        }
        if (((bitField1_ & 0x00040000) == 0x00040000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(52, delGeneralPurposeReference_);
        }
        if (((bitField1_ & 0x00080000) == 0x00080000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(53, addGeneralPurposeReferenceRecord_);
        }
        if (((bitField1_ & 0x00100000) == 0x00100000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(54, updGeneralPurposeReferenceRecord_);
        }
        if (((bitField1_ & 0x00200000) == 0x00200000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(55, delGeneralPurposeReferenceRecord_);
        }
        if (((bitField1_ & 0x00400000) == 0x00400000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(56, addInterfacePassportType_);
        }
        if (((bitField1_ & 0x00800000) == 0x00800000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(57, updInterfacePassportType_);
        }
        if (((bitField1_ & 0x01000000) == 0x01000000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(58, delInterfacePassportType_);
        }
        if (((bitField1_ & 0x02000000) == 0x02000000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(59, updControlObjectState_);
        }
        if (((bitField1_ & 0x04000000) == 0x04000000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(60, updEquipmentState_);
        }
        if (((bitField1_ & 0x08000000) == 0x08000000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(61, addEquipmentLogicalInputPassportType_);
        }
        if (((bitField1_ & 0x10000000) == 0x10000000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(62, updEquipmentLogicalInputPassportType_);
        }
        if (((bitField1_ & 0x20000000) == 0x20000000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(63, delEquipmentLogicalInputPassportType_);
        }
        if (((bitField1_ & 0x40000000) == 0x40000000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(64, addEquipmentLogicalOutputPassportType_);
        }
        if (((bitField1_ & 0x80000000) == 0x80000000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(65, updEquipmentLogicalOutputPassportType_);
        }
        if (((bitField2_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(66, delEquipmentLogicalOutputPassportType_);
        }
        if (((bitField2_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(67, addEquipmentFirmwarePassport_);
        }
        if (((bitField2_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(68, updEquipmentFirmwarePassport_);
        }
        if (((bitField2_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(69, delEquipmentFirmwarePassport_);
        }
        if (((bitField2_ & 0x00000010) == 0x00000010)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(100, equipmentAnswer_);
        }
        if (((bitField2_ & 0x00000020) == 0x00000020)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(200, databaseResult_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code almaz2.rpc.commands.RpcProtocol.ReplyBase}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBaseOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_ReplyBase_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_ReplyBase_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase.Builder.class);
        }

        // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getHeaderFieldBuilder();
            getAuthFieldBuilder();
            getUserLoginFieldBuilder();
            getUserLogoutFieldBuilder();
            getAddControlObjectPassportFieldBuilder();
            getUpdControlObjectPassportFieldBuilder();
            getDelControlObjectPassportFieldBuilder();
            getAddControlObjectStatusFieldBuilder();
            getUpdControlObjectStatusFieldBuilder();
            getAddControlObjectAlarmFieldBuilder();
            getUpdControlObjectAlarmFieldBuilder();
            getAddEquipmentStatusFieldBuilder();
            getUpdEquipmentStatusFieldBuilder();
            getAddEquipmentPassportFieldBuilder();
            getUpdEquipmentPassportFieldBuilder();
            getDelEquipmentPassportFieldBuilder();
            getUpdCommunicationDriverStatusFieldBuilder();
            getAckRequestFieldBuilder();
            getAddZoneFieldBuilder();
            getUpdZoneFieldBuilder();
            getDelZoneFieldBuilder();
            getAddClientPassportFieldBuilder();
            getUpdClientPassportFieldBuilder();
            getDelClientPassportFieldBuilder();
            getPrimaryAuthFieldBuilder();
            getAddUserPassportFieldBuilder();
            getUpdUserPassportFieldBuilder();
            getDelUserPassportFieldBuilder();
            getAddInterfacePassportFieldBuilder();
            getUpdInterfacePassportFieldBuilder();
            getDelInterfacePassportFieldBuilder();
            getAddControlObjectPassportTypeFieldBuilder();
            getUpdControlObjectPassportTypeFieldBuilder();
            getDelControlObjectPassportTypeFieldBuilder();
            getAddControlElementPassportTypeFieldBuilder();
            getUpdControlElementPassportTypeFieldBuilder();
            getDelControlElementPassportTypeFieldBuilder();
            getAddEquipmentPassportTypeFieldBuilder();
            getUpdEquipmentPassportTypeFieldBuilder();
            getDelEquipmentPassportTypeFieldBuilder();
            getAddManagedElementPassportTypeFieldBuilder();
            getUpdManagedElementPassportTypeFieldBuilder();
            getDelManagedElementPassportTypeFieldBuilder();
            getAddSensorControlElementPassportTypeFieldBuilder();
            getUpdSensorControlElementPassportTypeFieldBuilder();
            getDelSensorControlElementPassportTypeFieldBuilder();
            getAddGeneralPurposeReferenceFieldBuilder();
            getUpdGeneralPurposeReferenceFieldBuilder();
            getDelGeneralPurposeReferenceFieldBuilder();
            getAddGeneralPurposeReferenceRecordFieldBuilder();
            getUpdGeneralPurposeReferenceRecordFieldBuilder();
            getDelGeneralPurposeReferenceRecordFieldBuilder();
            getAddInterfacePassportTypeFieldBuilder();
            getUpdInterfacePassportTypeFieldBuilder();
            getDelInterfacePassportTypeFieldBuilder();
            getUpdControlObjectStateFieldBuilder();
            getUpdEquipmentStateFieldBuilder();
            getAddEquipmentLogicalInputPassportTypeFieldBuilder();
            getUpdEquipmentLogicalInputPassportTypeFieldBuilder();
            getDelEquipmentLogicalInputPassportTypeFieldBuilder();
            getAddEquipmentLogicalOutputPassportTypeFieldBuilder();
            getUpdEquipmentLogicalOutputPassportTypeFieldBuilder();
            getDelEquipmentLogicalOutputPassportTypeFieldBuilder();
            getAddEquipmentFirmwarePassportFieldBuilder();
            getUpdEquipmentFirmwarePassportFieldBuilder();
            getDelEquipmentFirmwarePassportFieldBuilder();
            getEquipmentAnswerFieldBuilder();
            getDatabaseResultFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (headerBuilder_ == null) {
            header_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header.getDefaultInstance();
          } else {
            headerBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          errorCode_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          errorMessage_ = "";
          bitField0_ = (bitField0_ & ~0x00000004);
          if (authBuilder_ == null) {
            auth_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply.getDefaultInstance();
          } else {
            authBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000008);
          if (userLoginBuilder_ == null) {
            userLogin_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply.getDefaultInstance();
          } else {
            userLoginBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000010);
          if (userLogoutBuilder_ == null) {
            userLogout_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply.getDefaultInstance();
          } else {
            userLogoutBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000020);
          if (addControlObjectPassportBuilder_ == null) {
            addControlObjectPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport.getDefaultInstance();
          } else {
            addControlObjectPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000040);
          if (updControlObjectPassportBuilder_ == null) {
            updControlObjectPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport.getDefaultInstance();
          } else {
            updControlObjectPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000080);
          if (delControlObjectPassportBuilder_ == null) {
            delControlObjectPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport.getDefaultInstance();
          } else {
            delControlObjectPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000100);
          if (addControlObjectStatusBuilder_ == null) {
            addControlObjectStatus_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus.getDefaultInstance();
          } else {
            addControlObjectStatusBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000200);
          if (updControlObjectStatusBuilder_ == null) {
            updControlObjectStatus_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus.getDefaultInstance();
          } else {
            updControlObjectStatusBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000400);
          if (addControlObjectAlarmBuilder_ == null) {
            addControlObjectAlarm_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm.getDefaultInstance();
          } else {
            addControlObjectAlarmBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000800);
          if (updControlObjectAlarmBuilder_ == null) {
            updControlObjectAlarm_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm.getDefaultInstance();
          } else {
            updControlObjectAlarmBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00001000);
          if (addEquipmentStatusBuilder_ == null) {
            addEquipmentStatus_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus.getDefaultInstance();
          } else {
            addEquipmentStatusBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00002000);
          if (updEquipmentStatusBuilder_ == null) {
            updEquipmentStatus_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus.getDefaultInstance();
          } else {
            updEquipmentStatusBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00004000);
          if (addEquipmentPassportBuilder_ == null) {
            addEquipmentPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport.getDefaultInstance();
          } else {
            addEquipmentPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00008000);
          if (updEquipmentPassportBuilder_ == null) {
            updEquipmentPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport.getDefaultInstance();
          } else {
            updEquipmentPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00010000);
          if (delEquipmentPassportBuilder_ == null) {
            delEquipmentPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport.getDefaultInstance();
          } else {
            delEquipmentPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00020000);
          if (updCommunicationDriverStatusBuilder_ == null) {
            updCommunicationDriverStatus_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus.getDefaultInstance();
          } else {
            updCommunicationDriverStatusBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00040000);
          if (ackRequestBuilder_ == null) {
            ackRequest_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest.getDefaultInstance();
          } else {
            ackRequestBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00080000);
          if (addZoneBuilder_ == null) {
            addZone_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone.getDefaultInstance();
          } else {
            addZoneBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00100000);
          if (updZoneBuilder_ == null) {
            updZone_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone.getDefaultInstance();
          } else {
            updZoneBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00200000);
          if (delZoneBuilder_ == null) {
            delZone_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone.getDefaultInstance();
          } else {
            delZoneBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00400000);
          if (addClientPassportBuilder_ == null) {
            addClientPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport.getDefaultInstance();
          } else {
            addClientPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00800000);
          if (updClientPassportBuilder_ == null) {
            updClientPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport.getDefaultInstance();
          } else {
            updClientPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x01000000);
          if (delClientPassportBuilder_ == null) {
            delClientPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport.getDefaultInstance();
          } else {
            delClientPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x02000000);
          if (primaryAuthBuilder_ == null) {
            primaryAuth_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply.getDefaultInstance();
          } else {
            primaryAuthBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x04000000);
          if (addUserPassportBuilder_ == null) {
            addUserPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport.getDefaultInstance();
          } else {
            addUserPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x08000000);
          if (updUserPassportBuilder_ == null) {
            updUserPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport.getDefaultInstance();
          } else {
            updUserPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x10000000);
          if (delUserPassportBuilder_ == null) {
            delUserPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport.getDefaultInstance();
          } else {
            delUserPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x20000000);
          if (addInterfacePassportBuilder_ == null) {
            addInterfacePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport.getDefaultInstance();
          } else {
            addInterfacePassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x40000000);
          if (updInterfacePassportBuilder_ == null) {
            updInterfacePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport.getDefaultInstance();
          } else {
            updInterfacePassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x80000000);
          if (delInterfacePassportBuilder_ == null) {
            delInterfacePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport.getDefaultInstance();
          } else {
            delInterfacePassportBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000001);
          if (addControlObjectPassportTypeBuilder_ == null) {
            addControlObjectPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType.getDefaultInstance();
          } else {
            addControlObjectPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000002);
          if (updControlObjectPassportTypeBuilder_ == null) {
            updControlObjectPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType.getDefaultInstance();
          } else {
            updControlObjectPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000004);
          if (delControlObjectPassportTypeBuilder_ == null) {
            delControlObjectPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType.getDefaultInstance();
          } else {
            delControlObjectPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000008);
          if (addControlElementPassportTypeBuilder_ == null) {
            addControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType.getDefaultInstance();
          } else {
            addControlElementPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000010);
          if (updControlElementPassportTypeBuilder_ == null) {
            updControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType.getDefaultInstance();
          } else {
            updControlElementPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000020);
          if (delControlElementPassportTypeBuilder_ == null) {
            delControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType.getDefaultInstance();
          } else {
            delControlElementPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000040);
          if (addEquipmentPassportTypeBuilder_ == null) {
            addEquipmentPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType.getDefaultInstance();
          } else {
            addEquipmentPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000080);
          if (updEquipmentPassportTypeBuilder_ == null) {
            updEquipmentPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType.getDefaultInstance();
          } else {
            updEquipmentPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000100);
          if (delEquipmentPassportTypeBuilder_ == null) {
            delEquipmentPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType.getDefaultInstance();
          } else {
            delEquipmentPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000200);
          if (addManagedElementPassportTypeBuilder_ == null) {
            addManagedElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType.getDefaultInstance();
          } else {
            addManagedElementPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000400);
          if (updManagedElementPassportTypeBuilder_ == null) {
            updManagedElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType.getDefaultInstance();
          } else {
            updManagedElementPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000800);
          if (delManagedElementPassportTypeBuilder_ == null) {
            delManagedElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType.getDefaultInstance();
          } else {
            delManagedElementPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00001000);
          if (addSensorControlElementPassportTypeBuilder_ == null) {
            addSensorControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType.getDefaultInstance();
          } else {
            addSensorControlElementPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00002000);
          if (updSensorControlElementPassportTypeBuilder_ == null) {
            updSensorControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType.getDefaultInstance();
          } else {
            updSensorControlElementPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00004000);
          if (delSensorControlElementPassportTypeBuilder_ == null) {
            delSensorControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType.getDefaultInstance();
          } else {
            delSensorControlElementPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00008000);
          if (addGeneralPurposeReferenceBuilder_ == null) {
            addGeneralPurposeReference_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference.getDefaultInstance();
          } else {
            addGeneralPurposeReferenceBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00010000);
          if (updGeneralPurposeReferenceBuilder_ == null) {
            updGeneralPurposeReference_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference.getDefaultInstance();
          } else {
            updGeneralPurposeReferenceBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00020000);
          if (delGeneralPurposeReferenceBuilder_ == null) {
            delGeneralPurposeReference_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference.getDefaultInstance();
          } else {
            delGeneralPurposeReferenceBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00040000);
          if (addGeneralPurposeReferenceRecordBuilder_ == null) {
            addGeneralPurposeReferenceRecord_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord.getDefaultInstance();
          } else {
            addGeneralPurposeReferenceRecordBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00080000);
          if (updGeneralPurposeReferenceRecordBuilder_ == null) {
            updGeneralPurposeReferenceRecord_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord.getDefaultInstance();
          } else {
            updGeneralPurposeReferenceRecordBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00100000);
          if (delGeneralPurposeReferenceRecordBuilder_ == null) {
            delGeneralPurposeReferenceRecord_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord.getDefaultInstance();
          } else {
            delGeneralPurposeReferenceRecordBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00200000);
          if (addInterfacePassportTypeBuilder_ == null) {
            addInterfacePassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType.getDefaultInstance();
          } else {
            addInterfacePassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00400000);
          if (updInterfacePassportTypeBuilder_ == null) {
            updInterfacePassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType.getDefaultInstance();
          } else {
            updInterfacePassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00800000);
          if (delInterfacePassportTypeBuilder_ == null) {
            delInterfacePassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType.getDefaultInstance();
          } else {
            delInterfacePassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x01000000);
          if (updControlObjectStateBuilder_ == null) {
            updControlObjectState_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState.getDefaultInstance();
          } else {
            updControlObjectStateBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x02000000);
          if (updEquipmentStateBuilder_ == null) {
            updEquipmentState_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState.getDefaultInstance();
          } else {
            updEquipmentStateBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x04000000);
          if (addEquipmentLogicalInputPassportTypeBuilder_ == null) {
            addEquipmentLogicalInputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType.getDefaultInstance();
          } else {
            addEquipmentLogicalInputPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x08000000);
          if (updEquipmentLogicalInputPassportTypeBuilder_ == null) {
            updEquipmentLogicalInputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType.getDefaultInstance();
          } else {
            updEquipmentLogicalInputPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x10000000);
          if (delEquipmentLogicalInputPassportTypeBuilder_ == null) {
            delEquipmentLogicalInputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType.getDefaultInstance();
          } else {
            delEquipmentLogicalInputPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x20000000);
          if (addEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            addEquipmentLogicalOutputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType.getDefaultInstance();
          } else {
            addEquipmentLogicalOutputPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x40000000);
          if (updEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            updEquipmentLogicalOutputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType.getDefaultInstance();
          } else {
            updEquipmentLogicalOutputPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x80000000);
          if (delEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            delEquipmentLogicalOutputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType.getDefaultInstance();
          } else {
            delEquipmentLogicalOutputPassportTypeBuilder_.clear();
          }
          bitField2_ = (bitField2_ & ~0x00000001);
          if (addEquipmentFirmwarePassportBuilder_ == null) {
            addEquipmentFirmwarePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport.getDefaultInstance();
          } else {
            addEquipmentFirmwarePassportBuilder_.clear();
          }
          bitField2_ = (bitField2_ & ~0x00000002);
          if (updEquipmentFirmwarePassportBuilder_ == null) {
            updEquipmentFirmwarePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport.getDefaultInstance();
          } else {
            updEquipmentFirmwarePassportBuilder_.clear();
          }
          bitField2_ = (bitField2_ & ~0x00000004);
          if (delEquipmentFirmwarePassportBuilder_ == null) {
            delEquipmentFirmwarePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport.getDefaultInstance();
          } else {
            delEquipmentFirmwarePassportBuilder_.clear();
          }
          bitField2_ = (bitField2_ & ~0x00000008);
          if (equipmentAnswerBuilder_ == null) {
            equipmentAnswer_ = ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentAnswerBase.getDefaultInstance();
          } else {
            equipmentAnswerBuilder_.clear();
          }
          bitField2_ = (bitField2_ & ~0x00000010);
          if (databaseResultBuilder_ == null) {
            databaseResult_ = ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase.getDefaultInstance();
          } else {
            databaseResultBuilder_.clear();
          }
          bitField2_ = (bitField2_ & ~0x00000020);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_ReplyBase_descriptor;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase getDefaultInstanceForType() {
          return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase.getDefaultInstance();
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase build() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase buildPartial() {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase(this);
          int from_bitField0_ = bitField0_;
          int from_bitField1_ = bitField1_;
          int from_bitField2_ = bitField2_;
          int to_bitField0_ = 0;
          int to_bitField1_ = 0;
          int to_bitField2_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (headerBuilder_ == null) {
            result.header_ = header_;
          } else {
            result.header_ = headerBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.errorCode_ = errorCode_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.errorMessage_ = errorMessage_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          if (authBuilder_ == null) {
            result.auth_ = auth_;
          } else {
            result.auth_ = authBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
            to_bitField0_ |= 0x00000010;
          }
          if (userLoginBuilder_ == null) {
            result.userLogin_ = userLogin_;
          } else {
            result.userLogin_ = userLoginBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
            to_bitField0_ |= 0x00000020;
          }
          if (userLogoutBuilder_ == null) {
            result.userLogout_ = userLogout_;
          } else {
            result.userLogout_ = userLogoutBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
            to_bitField0_ |= 0x00000040;
          }
          if (addControlObjectPassportBuilder_ == null) {
            result.addControlObjectPassport_ = addControlObjectPassport_;
          } else {
            result.addControlObjectPassport_ = addControlObjectPassportBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
            to_bitField0_ |= 0x00000080;
          }
          if (updControlObjectPassportBuilder_ == null) {
            result.updControlObjectPassport_ = updControlObjectPassport_;
          } else {
            result.updControlObjectPassport_ = updControlObjectPassportBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
            to_bitField0_ |= 0x00000100;
          }
          if (delControlObjectPassportBuilder_ == null) {
            result.delControlObjectPassport_ = delControlObjectPassport_;
          } else {
            result.delControlObjectPassport_ = delControlObjectPassportBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
            to_bitField0_ |= 0x00000200;
          }
          if (addControlObjectStatusBuilder_ == null) {
            result.addControlObjectStatus_ = addControlObjectStatus_;
          } else {
            result.addControlObjectStatus_ = addControlObjectStatusBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
            to_bitField0_ |= 0x00000400;
          }
          if (updControlObjectStatusBuilder_ == null) {
            result.updControlObjectStatus_ = updControlObjectStatus_;
          } else {
            result.updControlObjectStatus_ = updControlObjectStatusBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
            to_bitField0_ |= 0x00000800;
          }
          if (addControlObjectAlarmBuilder_ == null) {
            result.addControlObjectAlarm_ = addControlObjectAlarm_;
          } else {
            result.addControlObjectAlarm_ = addControlObjectAlarmBuilder_.build();
          }
          if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
            to_bitField0_ |= 0x00001000;
          }
          if (updControlObjectAlarmBuilder_ == null) {
            result.updControlObjectAlarm_ = updControlObjectAlarm_;
          } else {
            result.updControlObjectAlarm_ = updControlObjectAlarmBuilder_.build();
          }
          if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
            to_bitField0_ |= 0x00002000;
          }
          if (addEquipmentStatusBuilder_ == null) {
            result.addEquipmentStatus_ = addEquipmentStatus_;
          } else {
            result.addEquipmentStatus_ = addEquipmentStatusBuilder_.build();
          }
          if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
            to_bitField0_ |= 0x00004000;
          }
          if (updEquipmentStatusBuilder_ == null) {
            result.updEquipmentStatus_ = updEquipmentStatus_;
          } else {
            result.updEquipmentStatus_ = updEquipmentStatusBuilder_.build();
          }
          if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
            to_bitField0_ |= 0x00008000;
          }
          if (addEquipmentPassportBuilder_ == null) {
            result.addEquipmentPassport_ = addEquipmentPassport_;
          } else {
            result.addEquipmentPassport_ = addEquipmentPassportBuilder_.build();
          }
          if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
            to_bitField0_ |= 0x00010000;
          }
          if (updEquipmentPassportBuilder_ == null) {
            result.updEquipmentPassport_ = updEquipmentPassport_;
          } else {
            result.updEquipmentPassport_ = updEquipmentPassportBuilder_.build();
          }
          if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
            to_bitField0_ |= 0x00020000;
          }
          if (delEquipmentPassportBuilder_ == null) {
            result.delEquipmentPassport_ = delEquipmentPassport_;
          } else {
            result.delEquipmentPassport_ = delEquipmentPassportBuilder_.build();
          }
          if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
            to_bitField0_ |= 0x00040000;
          }
          if (updCommunicationDriverStatusBuilder_ == null) {
            result.updCommunicationDriverStatus_ = updCommunicationDriverStatus_;
          } else {
            result.updCommunicationDriverStatus_ = updCommunicationDriverStatusBuilder_.build();
          }
          if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
            to_bitField0_ |= 0x00080000;
          }
          if (ackRequestBuilder_ == null) {
            result.ackRequest_ = ackRequest_;
          } else {
            result.ackRequest_ = ackRequestBuilder_.build();
          }
          if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
            to_bitField0_ |= 0x00100000;
          }
          if (addZoneBuilder_ == null) {
            result.addZone_ = addZone_;
          } else {
            result.addZone_ = addZoneBuilder_.build();
          }
          if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
            to_bitField0_ |= 0x00200000;
          }
          if (updZoneBuilder_ == null) {
            result.updZone_ = updZone_;
          } else {
            result.updZone_ = updZoneBuilder_.build();
          }
          if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
            to_bitField0_ |= 0x00400000;
          }
          if (delZoneBuilder_ == null) {
            result.delZone_ = delZone_;
          } else {
            result.delZone_ = delZoneBuilder_.build();
          }
          if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
            to_bitField0_ |= 0x00800000;
          }
          if (addClientPassportBuilder_ == null) {
            result.addClientPassport_ = addClientPassport_;
          } else {
            result.addClientPassport_ = addClientPassportBuilder_.build();
          }
          if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
            to_bitField0_ |= 0x01000000;
          }
          if (updClientPassportBuilder_ == null) {
            result.updClientPassport_ = updClientPassport_;
          } else {
            result.updClientPassport_ = updClientPassportBuilder_.build();
          }
          if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
            to_bitField0_ |= 0x02000000;
          }
          if (delClientPassportBuilder_ == null) {
            result.delClientPassport_ = delClientPassport_;
          } else {
            result.delClientPassport_ = delClientPassportBuilder_.build();
          }
          if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
            to_bitField0_ |= 0x04000000;
          }
          if (primaryAuthBuilder_ == null) {
            result.primaryAuth_ = primaryAuth_;
          } else {
            result.primaryAuth_ = primaryAuthBuilder_.build();
          }
          if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
            to_bitField0_ |= 0x08000000;
          }
          if (addUserPassportBuilder_ == null) {
            result.addUserPassport_ = addUserPassport_;
          } else {
            result.addUserPassport_ = addUserPassportBuilder_.build();
          }
          if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
            to_bitField0_ |= 0x10000000;
          }
          if (updUserPassportBuilder_ == null) {
            result.updUserPassport_ = updUserPassport_;
          } else {
            result.updUserPassport_ = updUserPassportBuilder_.build();
          }
          if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
            to_bitField0_ |= 0x20000000;
          }
          if (delUserPassportBuilder_ == null) {
            result.delUserPassport_ = delUserPassport_;
          } else {
            result.delUserPassport_ = delUserPassportBuilder_.build();
          }
          if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
            to_bitField0_ |= 0x40000000;
          }
          if (addInterfacePassportBuilder_ == null) {
            result.addInterfacePassport_ = addInterfacePassport_;
          } else {
            result.addInterfacePassport_ = addInterfacePassportBuilder_.build();
          }
          if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
            to_bitField0_ |= 0x80000000;
          }
          if (updInterfacePassportBuilder_ == null) {
            result.updInterfacePassport_ = updInterfacePassport_;
          } else {
            result.updInterfacePassport_ = updInterfacePassportBuilder_.build();
          }
          if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
            to_bitField1_ |= 0x00000001;
          }
          if (delInterfacePassportBuilder_ == null) {
            result.delInterfacePassport_ = delInterfacePassport_;
          } else {
            result.delInterfacePassport_ = delInterfacePassportBuilder_.build();
          }
          if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
            to_bitField1_ |= 0x00000002;
          }
          if (addControlObjectPassportTypeBuilder_ == null) {
            result.addControlObjectPassportType_ = addControlObjectPassportType_;
          } else {
            result.addControlObjectPassportType_ = addControlObjectPassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x00000004) == 0x00000004)) {
            to_bitField1_ |= 0x00000004;
          }
          if (updControlObjectPassportTypeBuilder_ == null) {
            result.updControlObjectPassportType_ = updControlObjectPassportType_;
          } else {
            result.updControlObjectPassportType_ = updControlObjectPassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x00000008) == 0x00000008)) {
            to_bitField1_ |= 0x00000008;
          }
          if (delControlObjectPassportTypeBuilder_ == null) {
            result.delControlObjectPassportType_ = delControlObjectPassportType_;
          } else {
            result.delControlObjectPassportType_ = delControlObjectPassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
            to_bitField1_ |= 0x00000010;
          }
          if (addControlElementPassportTypeBuilder_ == null) {
            result.addControlElementPassportType_ = addControlElementPassportType_;
          } else {
            result.addControlElementPassportType_ = addControlElementPassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x00000020) == 0x00000020)) {
            to_bitField1_ |= 0x00000020;
          }
          if (updControlElementPassportTypeBuilder_ == null) {
            result.updControlElementPassportType_ = updControlElementPassportType_;
          } else {
            result.updControlElementPassportType_ = updControlElementPassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x00000040) == 0x00000040)) {
            to_bitField1_ |= 0x00000040;
          }
          if (delControlElementPassportTypeBuilder_ == null) {
            result.delControlElementPassportType_ = delControlElementPassportType_;
          } else {
            result.delControlElementPassportType_ = delControlElementPassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x00000080) == 0x00000080)) {
            to_bitField1_ |= 0x00000080;
          }
          if (addEquipmentPassportTypeBuilder_ == null) {
            result.addEquipmentPassportType_ = addEquipmentPassportType_;
          } else {
            result.addEquipmentPassportType_ = addEquipmentPassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x00000100) == 0x00000100)) {
            to_bitField1_ |= 0x00000100;
          }
          if (updEquipmentPassportTypeBuilder_ == null) {
            result.updEquipmentPassportType_ = updEquipmentPassportType_;
          } else {
            result.updEquipmentPassportType_ = updEquipmentPassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x00000200) == 0x00000200)) {
            to_bitField1_ |= 0x00000200;
          }
          if (delEquipmentPassportTypeBuilder_ == null) {
            result.delEquipmentPassportType_ = delEquipmentPassportType_;
          } else {
            result.delEquipmentPassportType_ = delEquipmentPassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x00000400) == 0x00000400)) {
            to_bitField1_ |= 0x00000400;
          }
          if (addManagedElementPassportTypeBuilder_ == null) {
            result.addManagedElementPassportType_ = addManagedElementPassportType_;
          } else {
            result.addManagedElementPassportType_ = addManagedElementPassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x00000800) == 0x00000800)) {
            to_bitField1_ |= 0x00000800;
          }
          if (updManagedElementPassportTypeBuilder_ == null) {
            result.updManagedElementPassportType_ = updManagedElementPassportType_;
          } else {
            result.updManagedElementPassportType_ = updManagedElementPassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x00001000) == 0x00001000)) {
            to_bitField1_ |= 0x00001000;
          }
          if (delManagedElementPassportTypeBuilder_ == null) {
            result.delManagedElementPassportType_ = delManagedElementPassportType_;
          } else {
            result.delManagedElementPassportType_ = delManagedElementPassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x00002000) == 0x00002000)) {
            to_bitField1_ |= 0x00002000;
          }
          if (addSensorControlElementPassportTypeBuilder_ == null) {
            result.addSensorControlElementPassportType_ = addSensorControlElementPassportType_;
          } else {
            result.addSensorControlElementPassportType_ = addSensorControlElementPassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x00004000) == 0x00004000)) {
            to_bitField1_ |= 0x00004000;
          }
          if (updSensorControlElementPassportTypeBuilder_ == null) {
            result.updSensorControlElementPassportType_ = updSensorControlElementPassportType_;
          } else {
            result.updSensorControlElementPassportType_ = updSensorControlElementPassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x00008000) == 0x00008000)) {
            to_bitField1_ |= 0x00008000;
          }
          if (delSensorControlElementPassportTypeBuilder_ == null) {
            result.delSensorControlElementPassportType_ = delSensorControlElementPassportType_;
          } else {
            result.delSensorControlElementPassportType_ = delSensorControlElementPassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x00010000) == 0x00010000)) {
            to_bitField1_ |= 0x00010000;
          }
          if (addGeneralPurposeReferenceBuilder_ == null) {
            result.addGeneralPurposeReference_ = addGeneralPurposeReference_;
          } else {
            result.addGeneralPurposeReference_ = addGeneralPurposeReferenceBuilder_.build();
          }
          if (((from_bitField1_ & 0x00020000) == 0x00020000)) {
            to_bitField1_ |= 0x00020000;
          }
          if (updGeneralPurposeReferenceBuilder_ == null) {
            result.updGeneralPurposeReference_ = updGeneralPurposeReference_;
          } else {
            result.updGeneralPurposeReference_ = updGeneralPurposeReferenceBuilder_.build();
          }
          if (((from_bitField1_ & 0x00040000) == 0x00040000)) {
            to_bitField1_ |= 0x00040000;
          }
          if (delGeneralPurposeReferenceBuilder_ == null) {
            result.delGeneralPurposeReference_ = delGeneralPurposeReference_;
          } else {
            result.delGeneralPurposeReference_ = delGeneralPurposeReferenceBuilder_.build();
          }
          if (((from_bitField1_ & 0x00080000) == 0x00080000)) {
            to_bitField1_ |= 0x00080000;
          }
          if (addGeneralPurposeReferenceRecordBuilder_ == null) {
            result.addGeneralPurposeReferenceRecord_ = addGeneralPurposeReferenceRecord_;
          } else {
            result.addGeneralPurposeReferenceRecord_ = addGeneralPurposeReferenceRecordBuilder_.build();
          }
          if (((from_bitField1_ & 0x00100000) == 0x00100000)) {
            to_bitField1_ |= 0x00100000;
          }
          if (updGeneralPurposeReferenceRecordBuilder_ == null) {
            result.updGeneralPurposeReferenceRecord_ = updGeneralPurposeReferenceRecord_;
          } else {
            result.updGeneralPurposeReferenceRecord_ = updGeneralPurposeReferenceRecordBuilder_.build();
          }
          if (((from_bitField1_ & 0x00200000) == 0x00200000)) {
            to_bitField1_ |= 0x00200000;
          }
          if (delGeneralPurposeReferenceRecordBuilder_ == null) {
            result.delGeneralPurposeReferenceRecord_ = delGeneralPurposeReferenceRecord_;
          } else {
            result.delGeneralPurposeReferenceRecord_ = delGeneralPurposeReferenceRecordBuilder_.build();
          }
          if (((from_bitField1_ & 0x00400000) == 0x00400000)) {
            to_bitField1_ |= 0x00400000;
          }
          if (addInterfacePassportTypeBuilder_ == null) {
            result.addInterfacePassportType_ = addInterfacePassportType_;
          } else {
            result.addInterfacePassportType_ = addInterfacePassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x00800000) == 0x00800000)) {
            to_bitField1_ |= 0x00800000;
          }
          if (updInterfacePassportTypeBuilder_ == null) {
            result.updInterfacePassportType_ = updInterfacePassportType_;
          } else {
            result.updInterfacePassportType_ = updInterfacePassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x01000000) == 0x01000000)) {
            to_bitField1_ |= 0x01000000;
          }
          if (delInterfacePassportTypeBuilder_ == null) {
            result.delInterfacePassportType_ = delInterfacePassportType_;
          } else {
            result.delInterfacePassportType_ = delInterfacePassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x02000000) == 0x02000000)) {
            to_bitField1_ |= 0x02000000;
          }
          if (updControlObjectStateBuilder_ == null) {
            result.updControlObjectState_ = updControlObjectState_;
          } else {
            result.updControlObjectState_ = updControlObjectStateBuilder_.build();
          }
          if (((from_bitField1_ & 0x04000000) == 0x04000000)) {
            to_bitField1_ |= 0x04000000;
          }
          if (updEquipmentStateBuilder_ == null) {
            result.updEquipmentState_ = updEquipmentState_;
          } else {
            result.updEquipmentState_ = updEquipmentStateBuilder_.build();
          }
          if (((from_bitField1_ & 0x08000000) == 0x08000000)) {
            to_bitField1_ |= 0x08000000;
          }
          if (addEquipmentLogicalInputPassportTypeBuilder_ == null) {
            result.addEquipmentLogicalInputPassportType_ = addEquipmentLogicalInputPassportType_;
          } else {
            result.addEquipmentLogicalInputPassportType_ = addEquipmentLogicalInputPassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x10000000) == 0x10000000)) {
            to_bitField1_ |= 0x10000000;
          }
          if (updEquipmentLogicalInputPassportTypeBuilder_ == null) {
            result.updEquipmentLogicalInputPassportType_ = updEquipmentLogicalInputPassportType_;
          } else {
            result.updEquipmentLogicalInputPassportType_ = updEquipmentLogicalInputPassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x20000000) == 0x20000000)) {
            to_bitField1_ |= 0x20000000;
          }
          if (delEquipmentLogicalInputPassportTypeBuilder_ == null) {
            result.delEquipmentLogicalInputPassportType_ = delEquipmentLogicalInputPassportType_;
          } else {
            result.delEquipmentLogicalInputPassportType_ = delEquipmentLogicalInputPassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x40000000) == 0x40000000)) {
            to_bitField1_ |= 0x40000000;
          }
          if (addEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            result.addEquipmentLogicalOutputPassportType_ = addEquipmentLogicalOutputPassportType_;
          } else {
            result.addEquipmentLogicalOutputPassportType_ = addEquipmentLogicalOutputPassportTypeBuilder_.build();
          }
          if (((from_bitField1_ & 0x80000000) == 0x80000000)) {
            to_bitField1_ |= 0x80000000;
          }
          if (updEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            result.updEquipmentLogicalOutputPassportType_ = updEquipmentLogicalOutputPassportType_;
          } else {
            result.updEquipmentLogicalOutputPassportType_ = updEquipmentLogicalOutputPassportTypeBuilder_.build();
          }
          if (((from_bitField2_ & 0x00000001) == 0x00000001)) {
            to_bitField2_ |= 0x00000001;
          }
          if (delEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            result.delEquipmentLogicalOutputPassportType_ = delEquipmentLogicalOutputPassportType_;
          } else {
            result.delEquipmentLogicalOutputPassportType_ = delEquipmentLogicalOutputPassportTypeBuilder_.build();
          }
          if (((from_bitField2_ & 0x00000002) == 0x00000002)) {
            to_bitField2_ |= 0x00000002;
          }
          if (addEquipmentFirmwarePassportBuilder_ == null) {
            result.addEquipmentFirmwarePassport_ = addEquipmentFirmwarePassport_;
          } else {
            result.addEquipmentFirmwarePassport_ = addEquipmentFirmwarePassportBuilder_.build();
          }
          if (((from_bitField2_ & 0x00000004) == 0x00000004)) {
            to_bitField2_ |= 0x00000004;
          }
          if (updEquipmentFirmwarePassportBuilder_ == null) {
            result.updEquipmentFirmwarePassport_ = updEquipmentFirmwarePassport_;
          } else {
            result.updEquipmentFirmwarePassport_ = updEquipmentFirmwarePassportBuilder_.build();
          }
          if (((from_bitField2_ & 0x00000008) == 0x00000008)) {
            to_bitField2_ |= 0x00000008;
          }
          if (delEquipmentFirmwarePassportBuilder_ == null) {
            result.delEquipmentFirmwarePassport_ = delEquipmentFirmwarePassport_;
          } else {
            result.delEquipmentFirmwarePassport_ = delEquipmentFirmwarePassportBuilder_.build();
          }
          if (((from_bitField2_ & 0x00000010) == 0x00000010)) {
            to_bitField2_ |= 0x00000010;
          }
          if (equipmentAnswerBuilder_ == null) {
            result.equipmentAnswer_ = equipmentAnswer_;
          } else {
            result.equipmentAnswer_ = equipmentAnswerBuilder_.build();
          }
          if (((from_bitField2_ & 0x00000020) == 0x00000020)) {
            to_bitField2_ |= 0x00000020;
          }
          if (databaseResultBuilder_ == null) {
            result.databaseResult_ = databaseResult_;
          } else {
            result.databaseResult_ = databaseResultBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          result.bitField1_ = to_bitField1_;
          result.bitField2_ = to_bitField2_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase) {
            return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase other) {
          if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase.getDefaultInstance()) return this;
          if (other.hasHeader()) {
            mergeHeader(other.getHeader());
          }
          if (other.hasErrorCode()) {
            setErrorCode(other.getErrorCode());
          }
          if (other.hasErrorMessage()) {
            bitField0_ |= 0x00000004;
            errorMessage_ = other.errorMessage_;
            onChanged();
          }
          if (other.hasAuth()) {
            mergeAuth(other.getAuth());
          }
          if (other.hasUserLogin()) {
            mergeUserLogin(other.getUserLogin());
          }
          if (other.hasUserLogout()) {
            mergeUserLogout(other.getUserLogout());
          }
          if (other.hasAddControlObjectPassport()) {
            mergeAddControlObjectPassport(other.getAddControlObjectPassport());
          }
          if (other.hasUpdControlObjectPassport()) {
            mergeUpdControlObjectPassport(other.getUpdControlObjectPassport());
          }
          if (other.hasDelControlObjectPassport()) {
            mergeDelControlObjectPassport(other.getDelControlObjectPassport());
          }
          if (other.hasAddControlObjectStatus()) {
            mergeAddControlObjectStatus(other.getAddControlObjectStatus());
          }
          if (other.hasUpdControlObjectStatus()) {
            mergeUpdControlObjectStatus(other.getUpdControlObjectStatus());
          }
          if (other.hasAddControlObjectAlarm()) {
            mergeAddControlObjectAlarm(other.getAddControlObjectAlarm());
          }
          if (other.hasUpdControlObjectAlarm()) {
            mergeUpdControlObjectAlarm(other.getUpdControlObjectAlarm());
          }
          if (other.hasAddEquipmentStatus()) {
            mergeAddEquipmentStatus(other.getAddEquipmentStatus());
          }
          if (other.hasUpdEquipmentStatus()) {
            mergeUpdEquipmentStatus(other.getUpdEquipmentStatus());
          }
          if (other.hasAddEquipmentPassport()) {
            mergeAddEquipmentPassport(other.getAddEquipmentPassport());
          }
          if (other.hasUpdEquipmentPassport()) {
            mergeUpdEquipmentPassport(other.getUpdEquipmentPassport());
          }
          if (other.hasDelEquipmentPassport()) {
            mergeDelEquipmentPassport(other.getDelEquipmentPassport());
          }
          if (other.hasUpdCommunicationDriverStatus()) {
            mergeUpdCommunicationDriverStatus(other.getUpdCommunicationDriverStatus());
          }
          if (other.hasAckRequest()) {
            mergeAckRequest(other.getAckRequest());
          }
          if (other.hasAddZone()) {
            mergeAddZone(other.getAddZone());
          }
          if (other.hasUpdZone()) {
            mergeUpdZone(other.getUpdZone());
          }
          if (other.hasDelZone()) {
            mergeDelZone(other.getDelZone());
          }
          if (other.hasAddClientPassport()) {
            mergeAddClientPassport(other.getAddClientPassport());
          }
          if (other.hasUpdClientPassport()) {
            mergeUpdClientPassport(other.getUpdClientPassport());
          }
          if (other.hasDelClientPassport()) {
            mergeDelClientPassport(other.getDelClientPassport());
          }
          if (other.hasPrimaryAuth()) {
            mergePrimaryAuth(other.getPrimaryAuth());
          }
          if (other.hasAddUserPassport()) {
            mergeAddUserPassport(other.getAddUserPassport());
          }
          if (other.hasUpdUserPassport()) {
            mergeUpdUserPassport(other.getUpdUserPassport());
          }
          if (other.hasDelUserPassport()) {
            mergeDelUserPassport(other.getDelUserPassport());
          }
          if (other.hasAddInterfacePassport()) {
            mergeAddInterfacePassport(other.getAddInterfacePassport());
          }
          if (other.hasUpdInterfacePassport()) {
            mergeUpdInterfacePassport(other.getUpdInterfacePassport());
          }
          if (other.hasDelInterfacePassport()) {
            mergeDelInterfacePassport(other.getDelInterfacePassport());
          }
          if (other.hasAddControlObjectPassportType()) {
            mergeAddControlObjectPassportType(other.getAddControlObjectPassportType());
          }
          if (other.hasUpdControlObjectPassportType()) {
            mergeUpdControlObjectPassportType(other.getUpdControlObjectPassportType());
          }
          if (other.hasDelControlObjectPassportType()) {
            mergeDelControlObjectPassportType(other.getDelControlObjectPassportType());
          }
          if (other.hasAddControlElementPassportType()) {
            mergeAddControlElementPassportType(other.getAddControlElementPassportType());
          }
          if (other.hasUpdControlElementPassportType()) {
            mergeUpdControlElementPassportType(other.getUpdControlElementPassportType());
          }
          if (other.hasDelControlElementPassportType()) {
            mergeDelControlElementPassportType(other.getDelControlElementPassportType());
          }
          if (other.hasAddEquipmentPassportType()) {
            mergeAddEquipmentPassportType(other.getAddEquipmentPassportType());
          }
          if (other.hasUpdEquipmentPassportType()) {
            mergeUpdEquipmentPassportType(other.getUpdEquipmentPassportType());
          }
          if (other.hasDelEquipmentPassportType()) {
            mergeDelEquipmentPassportType(other.getDelEquipmentPassportType());
          }
          if (other.hasAddManagedElementPassportType()) {
            mergeAddManagedElementPassportType(other.getAddManagedElementPassportType());
          }
          if (other.hasUpdManagedElementPassportType()) {
            mergeUpdManagedElementPassportType(other.getUpdManagedElementPassportType());
          }
          if (other.hasDelManagedElementPassportType()) {
            mergeDelManagedElementPassportType(other.getDelManagedElementPassportType());
          }
          if (other.hasAddSensorControlElementPassportType()) {
            mergeAddSensorControlElementPassportType(other.getAddSensorControlElementPassportType());
          }
          if (other.hasUpdSensorControlElementPassportType()) {
            mergeUpdSensorControlElementPassportType(other.getUpdSensorControlElementPassportType());
          }
          if (other.hasDelSensorControlElementPassportType()) {
            mergeDelSensorControlElementPassportType(other.getDelSensorControlElementPassportType());
          }
          if (other.hasAddGeneralPurposeReference()) {
            mergeAddGeneralPurposeReference(other.getAddGeneralPurposeReference());
          }
          if (other.hasUpdGeneralPurposeReference()) {
            mergeUpdGeneralPurposeReference(other.getUpdGeneralPurposeReference());
          }
          if (other.hasDelGeneralPurposeReference()) {
            mergeDelGeneralPurposeReference(other.getDelGeneralPurposeReference());
          }
          if (other.hasAddGeneralPurposeReferenceRecord()) {
            mergeAddGeneralPurposeReferenceRecord(other.getAddGeneralPurposeReferenceRecord());
          }
          if (other.hasUpdGeneralPurposeReferenceRecord()) {
            mergeUpdGeneralPurposeReferenceRecord(other.getUpdGeneralPurposeReferenceRecord());
          }
          if (other.hasDelGeneralPurposeReferenceRecord()) {
            mergeDelGeneralPurposeReferenceRecord(other.getDelGeneralPurposeReferenceRecord());
          }
          if (other.hasAddInterfacePassportType()) {
            mergeAddInterfacePassportType(other.getAddInterfacePassportType());
          }
          if (other.hasUpdInterfacePassportType()) {
            mergeUpdInterfacePassportType(other.getUpdInterfacePassportType());
          }
          if (other.hasDelInterfacePassportType()) {
            mergeDelInterfacePassportType(other.getDelInterfacePassportType());
          }
          if (other.hasUpdControlObjectState()) {
            mergeUpdControlObjectState(other.getUpdControlObjectState());
          }
          if (other.hasUpdEquipmentState()) {
            mergeUpdEquipmentState(other.getUpdEquipmentState());
          }
          if (other.hasAddEquipmentLogicalInputPassportType()) {
            mergeAddEquipmentLogicalInputPassportType(other.getAddEquipmentLogicalInputPassportType());
          }
          if (other.hasUpdEquipmentLogicalInputPassportType()) {
            mergeUpdEquipmentLogicalInputPassportType(other.getUpdEquipmentLogicalInputPassportType());
          }
          if (other.hasDelEquipmentLogicalInputPassportType()) {
            mergeDelEquipmentLogicalInputPassportType(other.getDelEquipmentLogicalInputPassportType());
          }
          if (other.hasAddEquipmentLogicalOutputPassportType()) {
            mergeAddEquipmentLogicalOutputPassportType(other.getAddEquipmentLogicalOutputPassportType());
          }
          if (other.hasUpdEquipmentLogicalOutputPassportType()) {
            mergeUpdEquipmentLogicalOutputPassportType(other.getUpdEquipmentLogicalOutputPassportType());
          }
          if (other.hasDelEquipmentLogicalOutputPassportType()) {
            mergeDelEquipmentLogicalOutputPassportType(other.getDelEquipmentLogicalOutputPassportType());
          }
          if (other.hasAddEquipmentFirmwarePassport()) {
            mergeAddEquipmentFirmwarePassport(other.getAddEquipmentFirmwarePassport());
          }
          if (other.hasUpdEquipmentFirmwarePassport()) {
            mergeUpdEquipmentFirmwarePassport(other.getUpdEquipmentFirmwarePassport());
          }
          if (other.hasDelEquipmentFirmwarePassport()) {
            mergeDelEquipmentFirmwarePassport(other.getDelEquipmentFirmwarePassport());
          }
          if (other.hasEquipmentAnswer()) {
            mergeEquipmentAnswer(other.getEquipmentAnswer());
          }
          if (other.hasDatabaseResult()) {
            mergeDatabaseResult(other.getDatabaseResult());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasAddControlObjectPassport()) {
            if (!getAddControlObjectPassport().isInitialized()) {
              
              return false;
            }
          }
          if (hasUpdControlObjectPassport()) {
            if (!getUpdControlObjectPassport().isInitialized()) {
              
              return false;
            }
          }
          if (hasAddEquipmentPassport()) {
            if (!getAddEquipmentPassport().isInitialized()) {
              
              return false;
            }
          }
          if (hasUpdEquipmentPassport()) {
            if (!getUpdEquipmentPassport().isInitialized()) {
              
              return false;
            }
          }
          if (hasAddClientPassport()) {
            if (!getAddClientPassport().isInitialized()) {
              
              return false;
            }
          }
          if (hasUpdClientPassport()) {
            if (!getUpdClientPassport().isInitialized()) {
              
              return false;
            }
          }
          if (hasAddUserPassport()) {
            if (!getAddUserPassport().isInitialized()) {
              
              return false;
            }
          }
          if (hasUpdUserPassport()) {
            if (!getUpdUserPassport().isInitialized()) {
              
              return false;
            }
          }
          if (hasAddInterfacePassport()) {
            if (!getAddInterfacePassport().isInitialized()) {
              
              return false;
            }
          }
          if (hasUpdInterfacePassport()) {
            if (!getUpdInterfacePassport().isInitialized()) {
              
              return false;
            }
          }
          if (hasAddControlObjectPassportType()) {
            if (!getAddControlObjectPassportType().isInitialized()) {
              
              return false;
            }
          }
          if (hasUpdControlObjectPassportType()) {
            if (!getUpdControlObjectPassportType().isInitialized()) {
              
              return false;
            }
          }
          if (hasAddControlElementPassportType()) {
            if (!getAddControlElementPassportType().isInitialized()) {
              
              return false;
            }
          }
          if (hasUpdControlElementPassportType()) {
            if (!getUpdControlElementPassportType().isInitialized()) {
              
              return false;
            }
          }
          if (hasAddEquipmentPassportType()) {
            if (!getAddEquipmentPassportType().isInitialized()) {
              
              return false;
            }
          }
          if (hasUpdEquipmentPassportType()) {
            if (!getUpdEquipmentPassportType().isInitialized()) {
              
              return false;
            }
          }
          if (hasAddManagedElementPassportType()) {
            if (!getAddManagedElementPassportType().isInitialized()) {
              
              return false;
            }
          }
          if (hasUpdManagedElementPassportType()) {
            if (!getUpdManagedElementPassportType().isInitialized()) {
              
              return false;
            }
          }
          if (hasAddSensorControlElementPassportType()) {
            if (!getAddSensorControlElementPassportType().isInitialized()) {
              
              return false;
            }
          }
          if (hasUpdSensorControlElementPassportType()) {
            if (!getUpdSensorControlElementPassportType().isInitialized()) {
              
              return false;
            }
          }
          if (hasAddGeneralPurposeReference()) {
            if (!getAddGeneralPurposeReference().isInitialized()) {
              
              return false;
            }
          }
          if (hasUpdGeneralPurposeReference()) {
            if (!getUpdGeneralPurposeReference().isInitialized()) {
              
              return false;
            }
          }
          if (hasAddInterfacePassportType()) {
            if (!getAddInterfacePassportType().isInitialized()) {
              
              return false;
            }
          }
          if (hasUpdInterfacePassportType()) {
            if (!getUpdInterfacePassportType().isInitialized()) {
              
              return false;
            }
          }
          if (hasAddEquipmentLogicalInputPassportType()) {
            if (!getAddEquipmentLogicalInputPassportType().isInitialized()) {
              
              return false;
            }
          }
          if (hasUpdEquipmentLogicalInputPassportType()) {
            if (!getUpdEquipmentLogicalInputPassportType().isInitialized()) {
              
              return false;
            }
          }
          if (hasAddEquipmentLogicalOutputPassportType()) {
            if (!getAddEquipmentLogicalOutputPassportType().isInitialized()) {
              
              return false;
            }
          }
          if (hasUpdEquipmentLogicalOutputPassportType()) {
            if (!getUpdEquipmentLogicalOutputPassportType().isInitialized()) {
              
              return false;
            }
          }
          if (hasAddEquipmentFirmwarePassport()) {
            if (!getAddEquipmentFirmwarePassport().isInitialized()) {
              
              return false;
            }
          }
          if (hasUpdEquipmentFirmwarePassport()) {
            if (!getUpdEquipmentFirmwarePassport().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;
        private int bitField1_;
        private int bitField2_;

        // optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header header_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.HeaderOrBuilder> headerBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;</code>
         */
        public boolean hasHeader() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header getHeader() {
          if (headerBuilder_ == null) {
            return header_;
          } else {
            return headerBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;</code>
         */
        public Builder setHeader(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header value) {
          if (headerBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            header_ = value;
            onChanged();
          } else {
            headerBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;</code>
         */
        public Builder setHeader(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header.Builder builderForValue) {
          if (headerBuilder_ == null) {
            header_ = builderForValue.build();
            onChanged();
          } else {
            headerBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;</code>
         */
        public Builder mergeHeader(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header value) {
          if (headerBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                header_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header.getDefaultInstance()) {
              header_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header.newBuilder(header_).mergeFrom(value).buildPartial();
            } else {
              header_ = value;
            }
            onChanged();
          } else {
            headerBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;</code>
         */
        public Builder clearHeader() {
          if (headerBuilder_ == null) {
            header_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header.getDefaultInstance();
            onChanged();
          } else {
            headerBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header.Builder getHeaderBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getHeaderFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.HeaderOrBuilder getHeaderOrBuilder() {
          if (headerBuilder_ != null) {
            return headerBuilder_.getMessageOrBuilder();
          } else {
            return header_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.Header header = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.HeaderOrBuilder> 
            getHeaderFieldBuilder() {
          if (headerBuilder_ == null) {
            headerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Header.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.HeaderOrBuilder>(
                    header_,
                    getParentForChildren(),
                    isClean());
            header_ = null;
          }
          return headerBuilder_;
        }

        // optional uint32 error_code = 18;
        private int errorCode_ ;
        /**
         * <code>optional uint32 error_code = 18;</code>
         */
        public boolean hasErrorCode() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional uint32 error_code = 18;</code>
         */
        public int getErrorCode() {
          return errorCode_;
        }
        /**
         * <code>optional uint32 error_code = 18;</code>
         */
        public Builder setErrorCode(int value) {
          bitField0_ |= 0x00000002;
          errorCode_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 error_code = 18;</code>
         */
        public Builder clearErrorCode() {
          bitField0_ = (bitField0_ & ~0x00000002);
          errorCode_ = 0;
          onChanged();
          return this;
        }

        // optional string error_message = 19;
        private java.lang.Object errorMessage_ = "";
        /**
         * <code>optional string error_message = 19;</code>
         */
        public boolean hasErrorMessage() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional string error_message = 19;</code>
         */
        public java.lang.String getErrorMessage() {
          java.lang.Object ref = errorMessage_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            errorMessage_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string error_message = 19;</code>
         */
        public com.google.protobuf.ByteString
            getErrorMessageBytes() {
          java.lang.Object ref = errorMessage_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            errorMessage_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string error_message = 19;</code>
         */
        public Builder setErrorMessage(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
          errorMessage_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string error_message = 19;</code>
         */
        public Builder clearErrorMessage() {
          bitField0_ = (bitField0_ & ~0x00000004);
          errorMessage_ = getDefaultInstance().getErrorMessage();
          onChanged();
          return this;
        }
        /**
         * <code>optional string error_message = 19;</code>
         */
        public Builder setErrorMessageBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
          errorMessage_ = value;
          onChanged();
          return this;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AuthReply auth = 2;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply auth_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReplyOrBuilder> authBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AuthReply auth = 2;</code>
         */
        public boolean hasAuth() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AuthReply auth = 2;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply getAuth() {
          if (authBuilder_ == null) {
            return auth_;
          } else {
            return authBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AuthReply auth = 2;</code>
         */
        public Builder setAuth(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply value) {
          if (authBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            auth_ = value;
            onChanged();
          } else {
            authBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000008;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AuthReply auth = 2;</code>
         */
        public Builder setAuth(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply.Builder builderForValue) {
          if (authBuilder_ == null) {
            auth_ = builderForValue.build();
            onChanged();
          } else {
            authBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000008;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AuthReply auth = 2;</code>
         */
        public Builder mergeAuth(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply value) {
          if (authBuilder_ == null) {
            if (((bitField0_ & 0x00000008) == 0x00000008) &&
                auth_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply.getDefaultInstance()) {
              auth_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply.newBuilder(auth_).mergeFrom(value).buildPartial();
            } else {
              auth_ = value;
            }
            onChanged();
          } else {
            authBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000008;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AuthReply auth = 2;</code>
         */
        public Builder clearAuth() {
          if (authBuilder_ == null) {
            auth_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply.getDefaultInstance();
            onChanged();
          } else {
            authBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000008);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AuthReply auth = 2;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply.Builder getAuthBuilder() {
          bitField0_ |= 0x00000008;
          onChanged();
          return getAuthFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AuthReply auth = 2;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReplyOrBuilder getAuthOrBuilder() {
          if (authBuilder_ != null) {
            return authBuilder_.getMessageOrBuilder();
          } else {
            return auth_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AuthReply auth = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReplyOrBuilder> 
            getAuthFieldBuilder() {
          if (authBuilder_ == null) {
            authBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReply.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AuthReplyOrBuilder>(
                    auth_,
                    getParentForChildren(),
                    isClean());
            auth_ = null;
          }
          return authBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_login = 3;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply userLogin_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReplyOrBuilder> userLoginBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_login = 3;</code>
         */
        public boolean hasUserLogin() {
          return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_login = 3;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply getUserLogin() {
          if (userLoginBuilder_ == null) {
            return userLogin_;
          } else {
            return userLoginBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_login = 3;</code>
         */
        public Builder setUserLogin(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply value) {
          if (userLoginBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            userLogin_ = value;
            onChanged();
          } else {
            userLoginBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000010;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_login = 3;</code>
         */
        public Builder setUserLogin(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply.Builder builderForValue) {
          if (userLoginBuilder_ == null) {
            userLogin_ = builderForValue.build();
            onChanged();
          } else {
            userLoginBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000010;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_login = 3;</code>
         */
        public Builder mergeUserLogin(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply value) {
          if (userLoginBuilder_ == null) {
            if (((bitField0_ & 0x00000010) == 0x00000010) &&
                userLogin_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply.getDefaultInstance()) {
              userLogin_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply.newBuilder(userLogin_).mergeFrom(value).buildPartial();
            } else {
              userLogin_ = value;
            }
            onChanged();
          } else {
            userLoginBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000010;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_login = 3;</code>
         */
        public Builder clearUserLogin() {
          if (userLoginBuilder_ == null) {
            userLogin_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply.getDefaultInstance();
            onChanged();
          } else {
            userLoginBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000010);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_login = 3;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply.Builder getUserLoginBuilder() {
          bitField0_ |= 0x00000010;
          onChanged();
          return getUserLoginFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_login = 3;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReplyOrBuilder getUserLoginOrBuilder() {
          if (userLoginBuilder_ != null) {
            return userLoginBuilder_.getMessageOrBuilder();
          } else {
            return userLogin_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_login = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReplyOrBuilder> 
            getUserLoginFieldBuilder() {
          if (userLoginBuilder_ == null) {
            userLoginBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReplyOrBuilder>(
                    userLogin_,
                    getParentForChildren(),
                    isClean());
            userLogin_ = null;
          }
          return userLoginBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_logout = 4;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply userLogout_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReplyOrBuilder> userLogoutBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_logout = 4;</code>
         */
        public boolean hasUserLogout() {
          return ((bitField0_ & 0x00000020) == 0x00000020);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_logout = 4;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply getUserLogout() {
          if (userLogoutBuilder_ == null) {
            return userLogout_;
          } else {
            return userLogoutBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_logout = 4;</code>
         */
        public Builder setUserLogout(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply value) {
          if (userLogoutBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            userLogout_ = value;
            onChanged();
          } else {
            userLogoutBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000020;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_logout = 4;</code>
         */
        public Builder setUserLogout(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply.Builder builderForValue) {
          if (userLogoutBuilder_ == null) {
            userLogout_ = builderForValue.build();
            onChanged();
          } else {
            userLogoutBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000020;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_logout = 4;</code>
         */
        public Builder mergeUserLogout(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply value) {
          if (userLogoutBuilder_ == null) {
            if (((bitField0_ & 0x00000020) == 0x00000020) &&
                userLogout_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply.getDefaultInstance()) {
              userLogout_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply.newBuilder(userLogout_).mergeFrom(value).buildPartial();
            } else {
              userLogout_ = value;
            }
            onChanged();
          } else {
            userLogoutBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000020;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_logout = 4;</code>
         */
        public Builder clearUserLogout() {
          if (userLogoutBuilder_ == null) {
            userLogout_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply.getDefaultInstance();
            onChanged();
          } else {
            userLogoutBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000020);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_logout = 4;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply.Builder getUserLogoutBuilder() {
          bitField0_ |= 0x00000020;
          onChanged();
          return getUserLogoutFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_logout = 4;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReplyOrBuilder getUserLogoutOrBuilder() {
          if (userLogoutBuilder_ != null) {
            return userLogoutBuilder_.getMessageOrBuilder();
          } else {
            return userLogout_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UserLoginReply user_logout = 4;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReplyOrBuilder> 
            getUserLogoutFieldBuilder() {
          if (userLogoutBuilder_ == null) {
            userLogoutBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReply.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UserLoginReplyOrBuilder>(
                    userLogout_,
                    getParentForChildren(),
                    isClean());
            userLogout_ = null;
          }
          return userLogoutBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport addControlObjectPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportOrBuilder> addControlObjectPassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;</code>
         */
        public boolean hasAddControlObjectPassport() {
          return ((bitField0_ & 0x00000040) == 0x00000040);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport getAddControlObjectPassport() {
          if (addControlObjectPassportBuilder_ == null) {
            return addControlObjectPassport_;
          } else {
            return addControlObjectPassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;</code>
         */
        public Builder setAddControlObjectPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport value) {
          if (addControlObjectPassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addControlObjectPassport_ = value;
            onChanged();
          } else {
            addControlObjectPassportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000040;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;</code>
         */
        public Builder setAddControlObjectPassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport.Builder builderForValue) {
          if (addControlObjectPassportBuilder_ == null) {
            addControlObjectPassport_ = builderForValue.build();
            onChanged();
          } else {
            addControlObjectPassportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000040;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;</code>
         */
        public Builder mergeAddControlObjectPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport value) {
          if (addControlObjectPassportBuilder_ == null) {
            if (((bitField0_ & 0x00000040) == 0x00000040) &&
                addControlObjectPassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport.getDefaultInstance()) {
              addControlObjectPassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport.newBuilder(addControlObjectPassport_).mergeFrom(value).buildPartial();
            } else {
              addControlObjectPassport_ = value;
            }
            onChanged();
          } else {
            addControlObjectPassportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000040;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;</code>
         */
        public Builder clearAddControlObjectPassport() {
          if (addControlObjectPassportBuilder_ == null) {
            addControlObjectPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport.getDefaultInstance();
            onChanged();
          } else {
            addControlObjectPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000040);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport.Builder getAddControlObjectPassportBuilder() {
          bitField0_ |= 0x00000040;
          onChanged();
          return getAddControlObjectPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportOrBuilder getAddControlObjectPassportOrBuilder() {
          if (addControlObjectPassportBuilder_ != null) {
            return addControlObjectPassportBuilder_.getMessageOrBuilder();
          } else {
            return addControlObjectPassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassport add_control_object_passport = 5;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportOrBuilder> 
            getAddControlObjectPassportFieldBuilder() {
          if (addControlObjectPassportBuilder_ == null) {
            addControlObjectPassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportOrBuilder>(
                    addControlObjectPassport_,
                    getParentForChildren(),
                    isClean());
            addControlObjectPassport_ = null;
          }
          return addControlObjectPassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 7;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport updControlObjectPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportOrBuilder> updControlObjectPassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 7;</code>
         */
        public boolean hasUpdControlObjectPassport() {
          return ((bitField0_ & 0x00000080) == 0x00000080);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 7;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport getUpdControlObjectPassport() {
          if (updControlObjectPassportBuilder_ == null) {
            return updControlObjectPassport_;
          } else {
            return updControlObjectPassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 7;</code>
         */
        public Builder setUpdControlObjectPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport value) {
          if (updControlObjectPassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updControlObjectPassport_ = value;
            onChanged();
          } else {
            updControlObjectPassportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000080;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 7;</code>
         */
        public Builder setUpdControlObjectPassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport.Builder builderForValue) {
          if (updControlObjectPassportBuilder_ == null) {
            updControlObjectPassport_ = builderForValue.build();
            onChanged();
          } else {
            updControlObjectPassportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000080;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 7;</code>
         */
        public Builder mergeUpdControlObjectPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport value) {
          if (updControlObjectPassportBuilder_ == null) {
            if (((bitField0_ & 0x00000080) == 0x00000080) &&
                updControlObjectPassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport.getDefaultInstance()) {
              updControlObjectPassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport.newBuilder(updControlObjectPassport_).mergeFrom(value).buildPartial();
            } else {
              updControlObjectPassport_ = value;
            }
            onChanged();
          } else {
            updControlObjectPassportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000080;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 7;</code>
         */
        public Builder clearUpdControlObjectPassport() {
          if (updControlObjectPassportBuilder_ == null) {
            updControlObjectPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport.getDefaultInstance();
            onChanged();
          } else {
            updControlObjectPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000080);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 7;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport.Builder getUpdControlObjectPassportBuilder() {
          bitField0_ |= 0x00000080;
          onChanged();
          return getUpdControlObjectPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 7;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportOrBuilder getUpdControlObjectPassportOrBuilder() {
          if (updControlObjectPassportBuilder_ != null) {
            return updControlObjectPassportBuilder_.getMessageOrBuilder();
          } else {
            return updControlObjectPassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassport upd_control_object_passport = 7;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportOrBuilder> 
            getUpdControlObjectPassportFieldBuilder() {
          if (updControlObjectPassportBuilder_ == null) {
            updControlObjectPassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportOrBuilder>(
                    updControlObjectPassport_,
                    getParentForChildren(),
                    isClean());
            updControlObjectPassport_ = null;
          }
          return updControlObjectPassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 8;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport delControlObjectPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportOrBuilder> delControlObjectPassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 8;</code>
         */
        public boolean hasDelControlObjectPassport() {
          return ((bitField0_ & 0x00000100) == 0x00000100);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 8;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport getDelControlObjectPassport() {
          if (delControlObjectPassportBuilder_ == null) {
            return delControlObjectPassport_;
          } else {
            return delControlObjectPassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 8;</code>
         */
        public Builder setDelControlObjectPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport value) {
          if (delControlObjectPassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            delControlObjectPassport_ = value;
            onChanged();
          } else {
            delControlObjectPassportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000100;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 8;</code>
         */
        public Builder setDelControlObjectPassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport.Builder builderForValue) {
          if (delControlObjectPassportBuilder_ == null) {
            delControlObjectPassport_ = builderForValue.build();
            onChanged();
          } else {
            delControlObjectPassportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000100;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 8;</code>
         */
        public Builder mergeDelControlObjectPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport value) {
          if (delControlObjectPassportBuilder_ == null) {
            if (((bitField0_ & 0x00000100) == 0x00000100) &&
                delControlObjectPassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport.getDefaultInstance()) {
              delControlObjectPassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport.newBuilder(delControlObjectPassport_).mergeFrom(value).buildPartial();
            } else {
              delControlObjectPassport_ = value;
            }
            onChanged();
          } else {
            delControlObjectPassportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000100;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 8;</code>
         */
        public Builder clearDelControlObjectPassport() {
          if (delControlObjectPassportBuilder_ == null) {
            delControlObjectPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport.getDefaultInstance();
            onChanged();
          } else {
            delControlObjectPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000100);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 8;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport.Builder getDelControlObjectPassportBuilder() {
          bitField0_ |= 0x00000100;
          onChanged();
          return getDelControlObjectPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 8;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportOrBuilder getDelControlObjectPassportOrBuilder() {
          if (delControlObjectPassportBuilder_ != null) {
            return delControlObjectPassportBuilder_.getMessageOrBuilder();
          } else {
            return delControlObjectPassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassport del_control_object_passport = 8;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportOrBuilder> 
            getDelControlObjectPassportFieldBuilder() {
          if (delControlObjectPassportBuilder_ == null) {
            delControlObjectPassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportOrBuilder>(
                    delControlObjectPassport_,
                    getParentForChildren(),
                    isClean());
            delControlObjectPassport_ = null;
          }
          return delControlObjectPassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectStatus add_control_object_status = 9;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus addControlObjectStatus_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatusOrBuilder> addControlObjectStatusBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectStatus add_control_object_status = 9;</code>
         */
        public boolean hasAddControlObjectStatus() {
          return ((bitField0_ & 0x00000200) == 0x00000200);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectStatus add_control_object_status = 9;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus getAddControlObjectStatus() {
          if (addControlObjectStatusBuilder_ == null) {
            return addControlObjectStatus_;
          } else {
            return addControlObjectStatusBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectStatus add_control_object_status = 9;</code>
         */
        public Builder setAddControlObjectStatus(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus value) {
          if (addControlObjectStatusBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addControlObjectStatus_ = value;
            onChanged();
          } else {
            addControlObjectStatusBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000200;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectStatus add_control_object_status = 9;</code>
         */
        public Builder setAddControlObjectStatus(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus.Builder builderForValue) {
          if (addControlObjectStatusBuilder_ == null) {
            addControlObjectStatus_ = builderForValue.build();
            onChanged();
          } else {
            addControlObjectStatusBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000200;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectStatus add_control_object_status = 9;</code>
         */
        public Builder mergeAddControlObjectStatus(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus value) {
          if (addControlObjectStatusBuilder_ == null) {
            if (((bitField0_ & 0x00000200) == 0x00000200) &&
                addControlObjectStatus_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus.getDefaultInstance()) {
              addControlObjectStatus_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus.newBuilder(addControlObjectStatus_).mergeFrom(value).buildPartial();
            } else {
              addControlObjectStatus_ = value;
            }
            onChanged();
          } else {
            addControlObjectStatusBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000200;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectStatus add_control_object_status = 9;</code>
         */
        public Builder clearAddControlObjectStatus() {
          if (addControlObjectStatusBuilder_ == null) {
            addControlObjectStatus_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus.getDefaultInstance();
            onChanged();
          } else {
            addControlObjectStatusBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000200);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectStatus add_control_object_status = 9;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus.Builder getAddControlObjectStatusBuilder() {
          bitField0_ |= 0x00000200;
          onChanged();
          return getAddControlObjectStatusFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectStatus add_control_object_status = 9;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatusOrBuilder getAddControlObjectStatusOrBuilder() {
          if (addControlObjectStatusBuilder_ != null) {
            return addControlObjectStatusBuilder_.getMessageOrBuilder();
          } else {
            return addControlObjectStatus_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectStatus add_control_object_status = 9;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatusOrBuilder> 
            getAddControlObjectStatusFieldBuilder() {
          if (addControlObjectStatusBuilder_ == null) {
            addControlObjectStatusBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatus.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectStatusOrBuilder>(
                    addControlObjectStatus_,
                    getParentForChildren(),
                    isClean());
            addControlObjectStatus_ = null;
          }
          return addControlObjectStatusBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectStatus upd_control_object_status = 10;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus updControlObjectStatus_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatusOrBuilder> updControlObjectStatusBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectStatus upd_control_object_status = 10;</code>
         */
        public boolean hasUpdControlObjectStatus() {
          return ((bitField0_ & 0x00000400) == 0x00000400);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectStatus upd_control_object_status = 10;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus getUpdControlObjectStatus() {
          if (updControlObjectStatusBuilder_ == null) {
            return updControlObjectStatus_;
          } else {
            return updControlObjectStatusBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectStatus upd_control_object_status = 10;</code>
         */
        public Builder setUpdControlObjectStatus(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus value) {
          if (updControlObjectStatusBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updControlObjectStatus_ = value;
            onChanged();
          } else {
            updControlObjectStatusBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000400;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectStatus upd_control_object_status = 10;</code>
         */
        public Builder setUpdControlObjectStatus(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus.Builder builderForValue) {
          if (updControlObjectStatusBuilder_ == null) {
            updControlObjectStatus_ = builderForValue.build();
            onChanged();
          } else {
            updControlObjectStatusBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000400;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectStatus upd_control_object_status = 10;</code>
         */
        public Builder mergeUpdControlObjectStatus(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus value) {
          if (updControlObjectStatusBuilder_ == null) {
            if (((bitField0_ & 0x00000400) == 0x00000400) &&
                updControlObjectStatus_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus.getDefaultInstance()) {
              updControlObjectStatus_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus.newBuilder(updControlObjectStatus_).mergeFrom(value).buildPartial();
            } else {
              updControlObjectStatus_ = value;
            }
            onChanged();
          } else {
            updControlObjectStatusBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000400;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectStatus upd_control_object_status = 10;</code>
         */
        public Builder clearUpdControlObjectStatus() {
          if (updControlObjectStatusBuilder_ == null) {
            updControlObjectStatus_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus.getDefaultInstance();
            onChanged();
          } else {
            updControlObjectStatusBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000400);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectStatus upd_control_object_status = 10;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus.Builder getUpdControlObjectStatusBuilder() {
          bitField0_ |= 0x00000400;
          onChanged();
          return getUpdControlObjectStatusFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectStatus upd_control_object_status = 10;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatusOrBuilder getUpdControlObjectStatusOrBuilder() {
          if (updControlObjectStatusBuilder_ != null) {
            return updControlObjectStatusBuilder_.getMessageOrBuilder();
          } else {
            return updControlObjectStatus_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectStatus upd_control_object_status = 10;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatusOrBuilder> 
            getUpdControlObjectStatusFieldBuilder() {
          if (updControlObjectStatusBuilder_ == null) {
            updControlObjectStatusBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatus.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStatusOrBuilder>(
                    updControlObjectStatus_,
                    getParentForChildren(),
                    isClean());
            updControlObjectStatus_ = null;
          }
          return updControlObjectStatusBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectAlarm add_control_object_alarm = 11;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm addControlObjectAlarm_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarmOrBuilder> addControlObjectAlarmBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectAlarm add_control_object_alarm = 11;</code>
         */
        public boolean hasAddControlObjectAlarm() {
          return ((bitField0_ & 0x00000800) == 0x00000800);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectAlarm add_control_object_alarm = 11;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm getAddControlObjectAlarm() {
          if (addControlObjectAlarmBuilder_ == null) {
            return addControlObjectAlarm_;
          } else {
            return addControlObjectAlarmBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectAlarm add_control_object_alarm = 11;</code>
         */
        public Builder setAddControlObjectAlarm(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm value) {
          if (addControlObjectAlarmBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addControlObjectAlarm_ = value;
            onChanged();
          } else {
            addControlObjectAlarmBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000800;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectAlarm add_control_object_alarm = 11;</code>
         */
        public Builder setAddControlObjectAlarm(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm.Builder builderForValue) {
          if (addControlObjectAlarmBuilder_ == null) {
            addControlObjectAlarm_ = builderForValue.build();
            onChanged();
          } else {
            addControlObjectAlarmBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000800;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectAlarm add_control_object_alarm = 11;</code>
         */
        public Builder mergeAddControlObjectAlarm(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm value) {
          if (addControlObjectAlarmBuilder_ == null) {
            if (((bitField0_ & 0x00000800) == 0x00000800) &&
                addControlObjectAlarm_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm.getDefaultInstance()) {
              addControlObjectAlarm_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm.newBuilder(addControlObjectAlarm_).mergeFrom(value).buildPartial();
            } else {
              addControlObjectAlarm_ = value;
            }
            onChanged();
          } else {
            addControlObjectAlarmBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000800;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectAlarm add_control_object_alarm = 11;</code>
         */
        public Builder clearAddControlObjectAlarm() {
          if (addControlObjectAlarmBuilder_ == null) {
            addControlObjectAlarm_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm.getDefaultInstance();
            onChanged();
          } else {
            addControlObjectAlarmBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000800);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectAlarm add_control_object_alarm = 11;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm.Builder getAddControlObjectAlarmBuilder() {
          bitField0_ |= 0x00000800;
          onChanged();
          return getAddControlObjectAlarmFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectAlarm add_control_object_alarm = 11;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarmOrBuilder getAddControlObjectAlarmOrBuilder() {
          if (addControlObjectAlarmBuilder_ != null) {
            return addControlObjectAlarmBuilder_.getMessageOrBuilder();
          } else {
            return addControlObjectAlarm_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectAlarm add_control_object_alarm = 11;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarmOrBuilder> 
            getAddControlObjectAlarmFieldBuilder() {
          if (addControlObjectAlarmBuilder_ == null) {
            addControlObjectAlarmBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarm.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectAlarmOrBuilder>(
                    addControlObjectAlarm_,
                    getParentForChildren(),
                    isClean());
            addControlObjectAlarm_ = null;
          }
          return addControlObjectAlarmBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectAlarm upd_control_object_alarm = 12;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm updControlObjectAlarm_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarmOrBuilder> updControlObjectAlarmBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectAlarm upd_control_object_alarm = 12;</code>
         */
        public boolean hasUpdControlObjectAlarm() {
          return ((bitField0_ & 0x00001000) == 0x00001000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectAlarm upd_control_object_alarm = 12;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm getUpdControlObjectAlarm() {
          if (updControlObjectAlarmBuilder_ == null) {
            return updControlObjectAlarm_;
          } else {
            return updControlObjectAlarmBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectAlarm upd_control_object_alarm = 12;</code>
         */
        public Builder setUpdControlObjectAlarm(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm value) {
          if (updControlObjectAlarmBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updControlObjectAlarm_ = value;
            onChanged();
          } else {
            updControlObjectAlarmBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00001000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectAlarm upd_control_object_alarm = 12;</code>
         */
        public Builder setUpdControlObjectAlarm(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm.Builder builderForValue) {
          if (updControlObjectAlarmBuilder_ == null) {
            updControlObjectAlarm_ = builderForValue.build();
            onChanged();
          } else {
            updControlObjectAlarmBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00001000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectAlarm upd_control_object_alarm = 12;</code>
         */
        public Builder mergeUpdControlObjectAlarm(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm value) {
          if (updControlObjectAlarmBuilder_ == null) {
            if (((bitField0_ & 0x00001000) == 0x00001000) &&
                updControlObjectAlarm_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm.getDefaultInstance()) {
              updControlObjectAlarm_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm.newBuilder(updControlObjectAlarm_).mergeFrom(value).buildPartial();
            } else {
              updControlObjectAlarm_ = value;
            }
            onChanged();
          } else {
            updControlObjectAlarmBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00001000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectAlarm upd_control_object_alarm = 12;</code>
         */
        public Builder clearUpdControlObjectAlarm() {
          if (updControlObjectAlarmBuilder_ == null) {
            updControlObjectAlarm_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm.getDefaultInstance();
            onChanged();
          } else {
            updControlObjectAlarmBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00001000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectAlarm upd_control_object_alarm = 12;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm.Builder getUpdControlObjectAlarmBuilder() {
          bitField0_ |= 0x00001000;
          onChanged();
          return getUpdControlObjectAlarmFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectAlarm upd_control_object_alarm = 12;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarmOrBuilder getUpdControlObjectAlarmOrBuilder() {
          if (updControlObjectAlarmBuilder_ != null) {
            return updControlObjectAlarmBuilder_.getMessageOrBuilder();
          } else {
            return updControlObjectAlarm_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectAlarm upd_control_object_alarm = 12;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarmOrBuilder> 
            getUpdControlObjectAlarmFieldBuilder() {
          if (updControlObjectAlarmBuilder_ == null) {
            updControlObjectAlarmBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarm.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectAlarmOrBuilder>(
                    updControlObjectAlarm_,
                    getParentForChildren(),
                    isClean());
            updControlObjectAlarm_ = null;
          }
          return updControlObjectAlarmBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentStatus add_equipment_status = 13;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus addEquipmentStatus_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatusOrBuilder> addEquipmentStatusBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentStatus add_equipment_status = 13;</code>
         */
        public boolean hasAddEquipmentStatus() {
          return ((bitField0_ & 0x00002000) == 0x00002000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentStatus add_equipment_status = 13;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus getAddEquipmentStatus() {
          if (addEquipmentStatusBuilder_ == null) {
            return addEquipmentStatus_;
          } else {
            return addEquipmentStatusBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentStatus add_equipment_status = 13;</code>
         */
        public Builder setAddEquipmentStatus(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus value) {
          if (addEquipmentStatusBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addEquipmentStatus_ = value;
            onChanged();
          } else {
            addEquipmentStatusBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00002000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentStatus add_equipment_status = 13;</code>
         */
        public Builder setAddEquipmentStatus(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus.Builder builderForValue) {
          if (addEquipmentStatusBuilder_ == null) {
            addEquipmentStatus_ = builderForValue.build();
            onChanged();
          } else {
            addEquipmentStatusBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00002000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentStatus add_equipment_status = 13;</code>
         */
        public Builder mergeAddEquipmentStatus(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus value) {
          if (addEquipmentStatusBuilder_ == null) {
            if (((bitField0_ & 0x00002000) == 0x00002000) &&
                addEquipmentStatus_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus.getDefaultInstance()) {
              addEquipmentStatus_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus.newBuilder(addEquipmentStatus_).mergeFrom(value).buildPartial();
            } else {
              addEquipmentStatus_ = value;
            }
            onChanged();
          } else {
            addEquipmentStatusBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00002000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentStatus add_equipment_status = 13;</code>
         */
        public Builder clearAddEquipmentStatus() {
          if (addEquipmentStatusBuilder_ == null) {
            addEquipmentStatus_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus.getDefaultInstance();
            onChanged();
          } else {
            addEquipmentStatusBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00002000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentStatus add_equipment_status = 13;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus.Builder getAddEquipmentStatusBuilder() {
          bitField0_ |= 0x00002000;
          onChanged();
          return getAddEquipmentStatusFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentStatus add_equipment_status = 13;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatusOrBuilder getAddEquipmentStatusOrBuilder() {
          if (addEquipmentStatusBuilder_ != null) {
            return addEquipmentStatusBuilder_.getMessageOrBuilder();
          } else {
            return addEquipmentStatus_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentStatus add_equipment_status = 13;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatusOrBuilder> 
            getAddEquipmentStatusFieldBuilder() {
          if (addEquipmentStatusBuilder_ == null) {
            addEquipmentStatusBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatus.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentStatusOrBuilder>(
                    addEquipmentStatus_,
                    getParentForChildren(),
                    isClean());
            addEquipmentStatus_ = null;
          }
          return addEquipmentStatusBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentStatus upd_equipment_status = 14;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus updEquipmentStatus_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatusOrBuilder> updEquipmentStatusBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentStatus upd_equipment_status = 14;</code>
         */
        public boolean hasUpdEquipmentStatus() {
          return ((bitField0_ & 0x00004000) == 0x00004000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentStatus upd_equipment_status = 14;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus getUpdEquipmentStatus() {
          if (updEquipmentStatusBuilder_ == null) {
            return updEquipmentStatus_;
          } else {
            return updEquipmentStatusBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentStatus upd_equipment_status = 14;</code>
         */
        public Builder setUpdEquipmentStatus(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus value) {
          if (updEquipmentStatusBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updEquipmentStatus_ = value;
            onChanged();
          } else {
            updEquipmentStatusBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00004000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentStatus upd_equipment_status = 14;</code>
         */
        public Builder setUpdEquipmentStatus(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus.Builder builderForValue) {
          if (updEquipmentStatusBuilder_ == null) {
            updEquipmentStatus_ = builderForValue.build();
            onChanged();
          } else {
            updEquipmentStatusBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00004000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentStatus upd_equipment_status = 14;</code>
         */
        public Builder mergeUpdEquipmentStatus(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus value) {
          if (updEquipmentStatusBuilder_ == null) {
            if (((bitField0_ & 0x00004000) == 0x00004000) &&
                updEquipmentStatus_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus.getDefaultInstance()) {
              updEquipmentStatus_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus.newBuilder(updEquipmentStatus_).mergeFrom(value).buildPartial();
            } else {
              updEquipmentStatus_ = value;
            }
            onChanged();
          } else {
            updEquipmentStatusBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00004000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentStatus upd_equipment_status = 14;</code>
         */
        public Builder clearUpdEquipmentStatus() {
          if (updEquipmentStatusBuilder_ == null) {
            updEquipmentStatus_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus.getDefaultInstance();
            onChanged();
          } else {
            updEquipmentStatusBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00004000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentStatus upd_equipment_status = 14;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus.Builder getUpdEquipmentStatusBuilder() {
          bitField0_ |= 0x00004000;
          onChanged();
          return getUpdEquipmentStatusFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentStatus upd_equipment_status = 14;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatusOrBuilder getUpdEquipmentStatusOrBuilder() {
          if (updEquipmentStatusBuilder_ != null) {
            return updEquipmentStatusBuilder_.getMessageOrBuilder();
          } else {
            return updEquipmentStatus_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentStatus upd_equipment_status = 14;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatusOrBuilder> 
            getUpdEquipmentStatusFieldBuilder() {
          if (updEquipmentStatusBuilder_ == null) {
            updEquipmentStatusBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatus.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStatusOrBuilder>(
                    updEquipmentStatus_,
                    getParentForChildren(),
                    isClean());
            updEquipmentStatus_ = null;
          }
          return updEquipmentStatusBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 15;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport addEquipmentPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportOrBuilder> addEquipmentPassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 15;</code>
         */
        public boolean hasAddEquipmentPassport() {
          return ((bitField0_ & 0x00008000) == 0x00008000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 15;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport getAddEquipmentPassport() {
          if (addEquipmentPassportBuilder_ == null) {
            return addEquipmentPassport_;
          } else {
            return addEquipmentPassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 15;</code>
         */
        public Builder setAddEquipmentPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport value) {
          if (addEquipmentPassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addEquipmentPassport_ = value;
            onChanged();
          } else {
            addEquipmentPassportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00008000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 15;</code>
         */
        public Builder setAddEquipmentPassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport.Builder builderForValue) {
          if (addEquipmentPassportBuilder_ == null) {
            addEquipmentPassport_ = builderForValue.build();
            onChanged();
          } else {
            addEquipmentPassportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00008000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 15;</code>
         */
        public Builder mergeAddEquipmentPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport value) {
          if (addEquipmentPassportBuilder_ == null) {
            if (((bitField0_ & 0x00008000) == 0x00008000) &&
                addEquipmentPassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport.getDefaultInstance()) {
              addEquipmentPassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport.newBuilder(addEquipmentPassport_).mergeFrom(value).buildPartial();
            } else {
              addEquipmentPassport_ = value;
            }
            onChanged();
          } else {
            addEquipmentPassportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00008000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 15;</code>
         */
        public Builder clearAddEquipmentPassport() {
          if (addEquipmentPassportBuilder_ == null) {
            addEquipmentPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport.getDefaultInstance();
            onChanged();
          } else {
            addEquipmentPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00008000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 15;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport.Builder getAddEquipmentPassportBuilder() {
          bitField0_ |= 0x00008000;
          onChanged();
          return getAddEquipmentPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 15;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportOrBuilder getAddEquipmentPassportOrBuilder() {
          if (addEquipmentPassportBuilder_ != null) {
            return addEquipmentPassportBuilder_.getMessageOrBuilder();
          } else {
            return addEquipmentPassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassport add_equipment_passport = 15;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportOrBuilder> 
            getAddEquipmentPassportFieldBuilder() {
          if (addEquipmentPassportBuilder_ == null) {
            addEquipmentPassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportOrBuilder>(
                    addEquipmentPassport_,
                    getParentForChildren(),
                    isClean());
            addEquipmentPassport_ = null;
          }
          return addEquipmentPassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 16;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport updEquipmentPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportOrBuilder> updEquipmentPassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 16;</code>
         */
        public boolean hasUpdEquipmentPassport() {
          return ((bitField0_ & 0x00010000) == 0x00010000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 16;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport getUpdEquipmentPassport() {
          if (updEquipmentPassportBuilder_ == null) {
            return updEquipmentPassport_;
          } else {
            return updEquipmentPassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 16;</code>
         */
        public Builder setUpdEquipmentPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport value) {
          if (updEquipmentPassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updEquipmentPassport_ = value;
            onChanged();
          } else {
            updEquipmentPassportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00010000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 16;</code>
         */
        public Builder setUpdEquipmentPassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport.Builder builderForValue) {
          if (updEquipmentPassportBuilder_ == null) {
            updEquipmentPassport_ = builderForValue.build();
            onChanged();
          } else {
            updEquipmentPassportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00010000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 16;</code>
         */
        public Builder mergeUpdEquipmentPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport value) {
          if (updEquipmentPassportBuilder_ == null) {
            if (((bitField0_ & 0x00010000) == 0x00010000) &&
                updEquipmentPassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport.getDefaultInstance()) {
              updEquipmentPassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport.newBuilder(updEquipmentPassport_).mergeFrom(value).buildPartial();
            } else {
              updEquipmentPassport_ = value;
            }
            onChanged();
          } else {
            updEquipmentPassportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00010000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 16;</code>
         */
        public Builder clearUpdEquipmentPassport() {
          if (updEquipmentPassportBuilder_ == null) {
            updEquipmentPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport.getDefaultInstance();
            onChanged();
          } else {
            updEquipmentPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00010000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 16;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport.Builder getUpdEquipmentPassportBuilder() {
          bitField0_ |= 0x00010000;
          onChanged();
          return getUpdEquipmentPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 16;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportOrBuilder getUpdEquipmentPassportOrBuilder() {
          if (updEquipmentPassportBuilder_ != null) {
            return updEquipmentPassportBuilder_.getMessageOrBuilder();
          } else {
            return updEquipmentPassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassport upd_equipment_passport = 16;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportOrBuilder> 
            getUpdEquipmentPassportFieldBuilder() {
          if (updEquipmentPassportBuilder_ == null) {
            updEquipmentPassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportOrBuilder>(
                    updEquipmentPassport_,
                    getParentForChildren(),
                    isClean());
            updEquipmentPassport_ = null;
          }
          return updEquipmentPassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 17;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport delEquipmentPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportOrBuilder> delEquipmentPassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 17;</code>
         */
        public boolean hasDelEquipmentPassport() {
          return ((bitField0_ & 0x00020000) == 0x00020000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 17;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport getDelEquipmentPassport() {
          if (delEquipmentPassportBuilder_ == null) {
            return delEquipmentPassport_;
          } else {
            return delEquipmentPassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 17;</code>
         */
        public Builder setDelEquipmentPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport value) {
          if (delEquipmentPassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            delEquipmentPassport_ = value;
            onChanged();
          } else {
            delEquipmentPassportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00020000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 17;</code>
         */
        public Builder setDelEquipmentPassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport.Builder builderForValue) {
          if (delEquipmentPassportBuilder_ == null) {
            delEquipmentPassport_ = builderForValue.build();
            onChanged();
          } else {
            delEquipmentPassportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00020000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 17;</code>
         */
        public Builder mergeDelEquipmentPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport value) {
          if (delEquipmentPassportBuilder_ == null) {
            if (((bitField0_ & 0x00020000) == 0x00020000) &&
                delEquipmentPassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport.getDefaultInstance()) {
              delEquipmentPassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport.newBuilder(delEquipmentPassport_).mergeFrom(value).buildPartial();
            } else {
              delEquipmentPassport_ = value;
            }
            onChanged();
          } else {
            delEquipmentPassportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00020000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 17;</code>
         */
        public Builder clearDelEquipmentPassport() {
          if (delEquipmentPassportBuilder_ == null) {
            delEquipmentPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport.getDefaultInstance();
            onChanged();
          } else {
            delEquipmentPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00020000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 17;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport.Builder getDelEquipmentPassportBuilder() {
          bitField0_ |= 0x00020000;
          onChanged();
          return getDelEquipmentPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 17;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportOrBuilder getDelEquipmentPassportOrBuilder() {
          if (delEquipmentPassportBuilder_ != null) {
            return delEquipmentPassportBuilder_.getMessageOrBuilder();
          } else {
            return delEquipmentPassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassport del_equipment_passport = 17;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportOrBuilder> 
            getDelEquipmentPassportFieldBuilder() {
          if (delEquipmentPassportBuilder_ == null) {
            delEquipmentPassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportOrBuilder>(
                    delEquipmentPassport_,
                    getParentForChildren(),
                    isClean());
            delEquipmentPassport_ = null;
          }
          return delEquipmentPassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdCommunicationDriverStatus upd_communication_driver_status = 20;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus updCommunicationDriverStatus_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatusOrBuilder> updCommunicationDriverStatusBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdCommunicationDriverStatus upd_communication_driver_status = 20;</code>
         */
        public boolean hasUpdCommunicationDriverStatus() {
          return ((bitField0_ & 0x00040000) == 0x00040000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdCommunicationDriverStatus upd_communication_driver_status = 20;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus getUpdCommunicationDriverStatus() {
          if (updCommunicationDriverStatusBuilder_ == null) {
            return updCommunicationDriverStatus_;
          } else {
            return updCommunicationDriverStatusBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdCommunicationDriverStatus upd_communication_driver_status = 20;</code>
         */
        public Builder setUpdCommunicationDriverStatus(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus value) {
          if (updCommunicationDriverStatusBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updCommunicationDriverStatus_ = value;
            onChanged();
          } else {
            updCommunicationDriverStatusBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00040000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdCommunicationDriverStatus upd_communication_driver_status = 20;</code>
         */
        public Builder setUpdCommunicationDriverStatus(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus.Builder builderForValue) {
          if (updCommunicationDriverStatusBuilder_ == null) {
            updCommunicationDriverStatus_ = builderForValue.build();
            onChanged();
          } else {
            updCommunicationDriverStatusBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00040000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdCommunicationDriverStatus upd_communication_driver_status = 20;</code>
         */
        public Builder mergeUpdCommunicationDriverStatus(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus value) {
          if (updCommunicationDriverStatusBuilder_ == null) {
            if (((bitField0_ & 0x00040000) == 0x00040000) &&
                updCommunicationDriverStatus_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus.getDefaultInstance()) {
              updCommunicationDriverStatus_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus.newBuilder(updCommunicationDriverStatus_).mergeFrom(value).buildPartial();
            } else {
              updCommunicationDriverStatus_ = value;
            }
            onChanged();
          } else {
            updCommunicationDriverStatusBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00040000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdCommunicationDriverStatus upd_communication_driver_status = 20;</code>
         */
        public Builder clearUpdCommunicationDriverStatus() {
          if (updCommunicationDriverStatusBuilder_ == null) {
            updCommunicationDriverStatus_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus.getDefaultInstance();
            onChanged();
          } else {
            updCommunicationDriverStatusBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00040000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdCommunicationDriverStatus upd_communication_driver_status = 20;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus.Builder getUpdCommunicationDriverStatusBuilder() {
          bitField0_ |= 0x00040000;
          onChanged();
          return getUpdCommunicationDriverStatusFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdCommunicationDriverStatus upd_communication_driver_status = 20;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatusOrBuilder getUpdCommunicationDriverStatusOrBuilder() {
          if (updCommunicationDriverStatusBuilder_ != null) {
            return updCommunicationDriverStatusBuilder_.getMessageOrBuilder();
          } else {
            return updCommunicationDriverStatus_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdCommunicationDriverStatus upd_communication_driver_status = 20;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatusOrBuilder> 
            getUpdCommunicationDriverStatusFieldBuilder() {
          if (updCommunicationDriverStatusBuilder_ == null) {
            updCommunicationDriverStatusBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatus.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdCommunicationDriverStatusOrBuilder>(
                    updCommunicationDriverStatus_,
                    getParentForChildren(),
                    isClean());
            updCommunicationDriverStatus_ = null;
          }
          return updCommunicationDriverStatusBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AckRequest ack_request = 21;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest ackRequest_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequestOrBuilder> ackRequestBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AckRequest ack_request = 21;</code>
         *
         * <pre>
         * запрос на ответ 
         * </pre>
         */
        public boolean hasAckRequest() {
          return ((bitField0_ & 0x00080000) == 0x00080000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AckRequest ack_request = 21;</code>
         *
         * <pre>
         * запрос на ответ 
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest getAckRequest() {
          if (ackRequestBuilder_ == null) {
            return ackRequest_;
          } else {
            return ackRequestBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AckRequest ack_request = 21;</code>
         *
         * <pre>
         * запрос на ответ 
         * </pre>
         */
        public Builder setAckRequest(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest value) {
          if (ackRequestBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ackRequest_ = value;
            onChanged();
          } else {
            ackRequestBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00080000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AckRequest ack_request = 21;</code>
         *
         * <pre>
         * запрос на ответ 
         * </pre>
         */
        public Builder setAckRequest(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest.Builder builderForValue) {
          if (ackRequestBuilder_ == null) {
            ackRequest_ = builderForValue.build();
            onChanged();
          } else {
            ackRequestBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00080000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AckRequest ack_request = 21;</code>
         *
         * <pre>
         * запрос на ответ 
         * </pre>
         */
        public Builder mergeAckRequest(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest value) {
          if (ackRequestBuilder_ == null) {
            if (((bitField0_ & 0x00080000) == 0x00080000) &&
                ackRequest_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest.getDefaultInstance()) {
              ackRequest_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest.newBuilder(ackRequest_).mergeFrom(value).buildPartial();
            } else {
              ackRequest_ = value;
            }
            onChanged();
          } else {
            ackRequestBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00080000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AckRequest ack_request = 21;</code>
         *
         * <pre>
         * запрос на ответ 
         * </pre>
         */
        public Builder clearAckRequest() {
          if (ackRequestBuilder_ == null) {
            ackRequest_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest.getDefaultInstance();
            onChanged();
          } else {
            ackRequestBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00080000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AckRequest ack_request = 21;</code>
         *
         * <pre>
         * запрос на ответ 
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest.Builder getAckRequestBuilder() {
          bitField0_ |= 0x00080000;
          onChanged();
          return getAckRequestFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AckRequest ack_request = 21;</code>
         *
         * <pre>
         * запрос на ответ 
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequestOrBuilder getAckRequestOrBuilder() {
          if (ackRequestBuilder_ != null) {
            return ackRequestBuilder_.getMessageOrBuilder();
          } else {
            return ackRequest_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AckRequest ack_request = 21;</code>
         *
         * <pre>
         * запрос на ответ 
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequestOrBuilder> 
            getAckRequestFieldBuilder() {
          if (ackRequestBuilder_ == null) {
            ackRequestBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequest.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AckRequestOrBuilder>(
                    ackRequest_,
                    getParentForChildren(),
                    isClean());
            ackRequest_ = null;
          }
          return ackRequestBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 22;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone addZone_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZoneOrBuilder> addZoneBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 22;</code>
         */
        public boolean hasAddZone() {
          return ((bitField0_ & 0x00100000) == 0x00100000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 22;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone getAddZone() {
          if (addZoneBuilder_ == null) {
            return addZone_;
          } else {
            return addZoneBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 22;</code>
         */
        public Builder setAddZone(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone value) {
          if (addZoneBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addZone_ = value;
            onChanged();
          } else {
            addZoneBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00100000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 22;</code>
         */
        public Builder setAddZone(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone.Builder builderForValue) {
          if (addZoneBuilder_ == null) {
            addZone_ = builderForValue.build();
            onChanged();
          } else {
            addZoneBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00100000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 22;</code>
         */
        public Builder mergeAddZone(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone value) {
          if (addZoneBuilder_ == null) {
            if (((bitField0_ & 0x00100000) == 0x00100000) &&
                addZone_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone.getDefaultInstance()) {
              addZone_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone.newBuilder(addZone_).mergeFrom(value).buildPartial();
            } else {
              addZone_ = value;
            }
            onChanged();
          } else {
            addZoneBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00100000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 22;</code>
         */
        public Builder clearAddZone() {
          if (addZoneBuilder_ == null) {
            addZone_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone.getDefaultInstance();
            onChanged();
          } else {
            addZoneBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00100000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 22;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone.Builder getAddZoneBuilder() {
          bitField0_ |= 0x00100000;
          onChanged();
          return getAddZoneFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 22;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZoneOrBuilder getAddZoneOrBuilder() {
          if (addZoneBuilder_ != null) {
            return addZoneBuilder_.getMessageOrBuilder();
          } else {
            return addZone_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddZone add_zone = 22;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZoneOrBuilder> 
            getAddZoneFieldBuilder() {
          if (addZoneBuilder_ == null) {
            addZoneBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZone.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddZoneOrBuilder>(
                    addZone_,
                    getParentForChildren(),
                    isClean());
            addZone_ = null;
          }
          return addZoneBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 23;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone updZone_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZoneOrBuilder> updZoneBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 23;</code>
         */
        public boolean hasUpdZone() {
          return ((bitField0_ & 0x00200000) == 0x00200000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 23;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone getUpdZone() {
          if (updZoneBuilder_ == null) {
            return updZone_;
          } else {
            return updZoneBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 23;</code>
         */
        public Builder setUpdZone(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone value) {
          if (updZoneBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updZone_ = value;
            onChanged();
          } else {
            updZoneBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00200000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 23;</code>
         */
        public Builder setUpdZone(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone.Builder builderForValue) {
          if (updZoneBuilder_ == null) {
            updZone_ = builderForValue.build();
            onChanged();
          } else {
            updZoneBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00200000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 23;</code>
         */
        public Builder mergeUpdZone(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone value) {
          if (updZoneBuilder_ == null) {
            if (((bitField0_ & 0x00200000) == 0x00200000) &&
                updZone_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone.getDefaultInstance()) {
              updZone_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone.newBuilder(updZone_).mergeFrom(value).buildPartial();
            } else {
              updZone_ = value;
            }
            onChanged();
          } else {
            updZoneBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00200000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 23;</code>
         */
        public Builder clearUpdZone() {
          if (updZoneBuilder_ == null) {
            updZone_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone.getDefaultInstance();
            onChanged();
          } else {
            updZoneBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00200000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 23;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone.Builder getUpdZoneBuilder() {
          bitField0_ |= 0x00200000;
          onChanged();
          return getUpdZoneFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 23;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZoneOrBuilder getUpdZoneOrBuilder() {
          if (updZoneBuilder_ != null) {
            return updZoneBuilder_.getMessageOrBuilder();
          } else {
            return updZone_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdZone upd_zone = 23;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZoneOrBuilder> 
            getUpdZoneFieldBuilder() {
          if (updZoneBuilder_ == null) {
            updZoneBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZone.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdZoneOrBuilder>(
                    updZone_,
                    getParentForChildren(),
                    isClean());
            updZone_ = null;
          }
          return updZoneBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 24;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone delZone_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZoneOrBuilder> delZoneBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 24;</code>
         */
        public boolean hasDelZone() {
          return ((bitField0_ & 0x00400000) == 0x00400000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 24;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone getDelZone() {
          if (delZoneBuilder_ == null) {
            return delZone_;
          } else {
            return delZoneBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 24;</code>
         */
        public Builder setDelZone(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone value) {
          if (delZoneBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            delZone_ = value;
            onChanged();
          } else {
            delZoneBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00400000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 24;</code>
         */
        public Builder setDelZone(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone.Builder builderForValue) {
          if (delZoneBuilder_ == null) {
            delZone_ = builderForValue.build();
            onChanged();
          } else {
            delZoneBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00400000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 24;</code>
         */
        public Builder mergeDelZone(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone value) {
          if (delZoneBuilder_ == null) {
            if (((bitField0_ & 0x00400000) == 0x00400000) &&
                delZone_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone.getDefaultInstance()) {
              delZone_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone.newBuilder(delZone_).mergeFrom(value).buildPartial();
            } else {
              delZone_ = value;
            }
            onChanged();
          } else {
            delZoneBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00400000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 24;</code>
         */
        public Builder clearDelZone() {
          if (delZoneBuilder_ == null) {
            delZone_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone.getDefaultInstance();
            onChanged();
          } else {
            delZoneBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00400000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 24;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone.Builder getDelZoneBuilder() {
          bitField0_ |= 0x00400000;
          onChanged();
          return getDelZoneFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 24;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZoneOrBuilder getDelZoneOrBuilder() {
          if (delZoneBuilder_ != null) {
            return delZoneBuilder_.getMessageOrBuilder();
          } else {
            return delZone_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelZone del_zone = 24;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZoneOrBuilder> 
            getDelZoneFieldBuilder() {
          if (delZoneBuilder_ == null) {
            delZoneBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZone.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelZoneOrBuilder>(
                    delZone_,
                    getParentForChildren(),
                    isClean());
            delZone_ = null;
          }
          return delZoneBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 25;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport addClientPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassportOrBuilder> addClientPassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 25;</code>
         */
        public boolean hasAddClientPassport() {
          return ((bitField0_ & 0x00800000) == 0x00800000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 25;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport getAddClientPassport() {
          if (addClientPassportBuilder_ == null) {
            return addClientPassport_;
          } else {
            return addClientPassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 25;</code>
         */
        public Builder setAddClientPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport value) {
          if (addClientPassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addClientPassport_ = value;
            onChanged();
          } else {
            addClientPassportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00800000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 25;</code>
         */
        public Builder setAddClientPassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport.Builder builderForValue) {
          if (addClientPassportBuilder_ == null) {
            addClientPassport_ = builderForValue.build();
            onChanged();
          } else {
            addClientPassportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00800000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 25;</code>
         */
        public Builder mergeAddClientPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport value) {
          if (addClientPassportBuilder_ == null) {
            if (((bitField0_ & 0x00800000) == 0x00800000) &&
                addClientPassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport.getDefaultInstance()) {
              addClientPassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport.newBuilder(addClientPassport_).mergeFrom(value).buildPartial();
            } else {
              addClientPassport_ = value;
            }
            onChanged();
          } else {
            addClientPassportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00800000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 25;</code>
         */
        public Builder clearAddClientPassport() {
          if (addClientPassportBuilder_ == null) {
            addClientPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport.getDefaultInstance();
            onChanged();
          } else {
            addClientPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00800000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 25;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport.Builder getAddClientPassportBuilder() {
          bitField0_ |= 0x00800000;
          onChanged();
          return getAddClientPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 25;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassportOrBuilder getAddClientPassportOrBuilder() {
          if (addClientPassportBuilder_ != null) {
            return addClientPassportBuilder_.getMessageOrBuilder();
          } else {
            return addClientPassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddClientPassport add_client_passport = 25;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassportOrBuilder> 
            getAddClientPassportFieldBuilder() {
          if (addClientPassportBuilder_ == null) {
            addClientPassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddClientPassportOrBuilder>(
                    addClientPassport_,
                    getParentForChildren(),
                    isClean());
            addClientPassport_ = null;
          }
          return addClientPassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 26;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport updClientPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassportOrBuilder> updClientPassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 26;</code>
         */
        public boolean hasUpdClientPassport() {
          return ((bitField0_ & 0x01000000) == 0x01000000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 26;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport getUpdClientPassport() {
          if (updClientPassportBuilder_ == null) {
            return updClientPassport_;
          } else {
            return updClientPassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 26;</code>
         */
        public Builder setUpdClientPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport value) {
          if (updClientPassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updClientPassport_ = value;
            onChanged();
          } else {
            updClientPassportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x01000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 26;</code>
         */
        public Builder setUpdClientPassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport.Builder builderForValue) {
          if (updClientPassportBuilder_ == null) {
            updClientPassport_ = builderForValue.build();
            onChanged();
          } else {
            updClientPassportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x01000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 26;</code>
         */
        public Builder mergeUpdClientPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport value) {
          if (updClientPassportBuilder_ == null) {
            if (((bitField0_ & 0x01000000) == 0x01000000) &&
                updClientPassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport.getDefaultInstance()) {
              updClientPassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport.newBuilder(updClientPassport_).mergeFrom(value).buildPartial();
            } else {
              updClientPassport_ = value;
            }
            onChanged();
          } else {
            updClientPassportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x01000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 26;</code>
         */
        public Builder clearUpdClientPassport() {
          if (updClientPassportBuilder_ == null) {
            updClientPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport.getDefaultInstance();
            onChanged();
          } else {
            updClientPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x01000000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 26;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport.Builder getUpdClientPassportBuilder() {
          bitField0_ |= 0x01000000;
          onChanged();
          return getUpdClientPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 26;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassportOrBuilder getUpdClientPassportOrBuilder() {
          if (updClientPassportBuilder_ != null) {
            return updClientPassportBuilder_.getMessageOrBuilder();
          } else {
            return updClientPassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdClientPassport upd_client_passport = 26;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassportOrBuilder> 
            getUpdClientPassportFieldBuilder() {
          if (updClientPassportBuilder_ == null) {
            updClientPassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdClientPassportOrBuilder>(
                    updClientPassport_,
                    getParentForChildren(),
                    isClean());
            updClientPassport_ = null;
          }
          return updClientPassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 27;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport delClientPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassportOrBuilder> delClientPassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 27;</code>
         */
        public boolean hasDelClientPassport() {
          return ((bitField0_ & 0x02000000) == 0x02000000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 27;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport getDelClientPassport() {
          if (delClientPassportBuilder_ == null) {
            return delClientPassport_;
          } else {
            return delClientPassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 27;</code>
         */
        public Builder setDelClientPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport value) {
          if (delClientPassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            delClientPassport_ = value;
            onChanged();
          } else {
            delClientPassportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x02000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 27;</code>
         */
        public Builder setDelClientPassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport.Builder builderForValue) {
          if (delClientPassportBuilder_ == null) {
            delClientPassport_ = builderForValue.build();
            onChanged();
          } else {
            delClientPassportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x02000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 27;</code>
         */
        public Builder mergeDelClientPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport value) {
          if (delClientPassportBuilder_ == null) {
            if (((bitField0_ & 0x02000000) == 0x02000000) &&
                delClientPassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport.getDefaultInstance()) {
              delClientPassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport.newBuilder(delClientPassport_).mergeFrom(value).buildPartial();
            } else {
              delClientPassport_ = value;
            }
            onChanged();
          } else {
            delClientPassportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x02000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 27;</code>
         */
        public Builder clearDelClientPassport() {
          if (delClientPassportBuilder_ == null) {
            delClientPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport.getDefaultInstance();
            onChanged();
          } else {
            delClientPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x02000000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 27;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport.Builder getDelClientPassportBuilder() {
          bitField0_ |= 0x02000000;
          onChanged();
          return getDelClientPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 27;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassportOrBuilder getDelClientPassportOrBuilder() {
          if (delClientPassportBuilder_ != null) {
            return delClientPassportBuilder_.getMessageOrBuilder();
          } else {
            return delClientPassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelClientPassport del_client_passport = 27;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassportOrBuilder> 
            getDelClientPassportFieldBuilder() {
          if (delClientPassportBuilder_ == null) {
            delClientPassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelClientPassportOrBuilder>(
                    delClientPassport_,
                    getParentForChildren(),
                    isClean());
            delClientPassport_ = null;
          }
          return delClientPassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthReply primary_auth = 28;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply primaryAuth_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReplyOrBuilder> primaryAuthBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthReply primary_auth = 28;</code>
         *
         * <pre>
         * Первичная авторизация клиента.
         * </pre>
         */
        public boolean hasPrimaryAuth() {
          return ((bitField0_ & 0x04000000) == 0x04000000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthReply primary_auth = 28;</code>
         *
         * <pre>
         * Первичная авторизация клиента.
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply getPrimaryAuth() {
          if (primaryAuthBuilder_ == null) {
            return primaryAuth_;
          } else {
            return primaryAuthBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthReply primary_auth = 28;</code>
         *
         * <pre>
         * Первичная авторизация клиента.
         * </pre>
         */
        public Builder setPrimaryAuth(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply value) {
          if (primaryAuthBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            primaryAuth_ = value;
            onChanged();
          } else {
            primaryAuthBuilder_.setMessage(value);
          }
          bitField0_ |= 0x04000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthReply primary_auth = 28;</code>
         *
         * <pre>
         * Первичная авторизация клиента.
         * </pre>
         */
        public Builder setPrimaryAuth(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply.Builder builderForValue) {
          if (primaryAuthBuilder_ == null) {
            primaryAuth_ = builderForValue.build();
            onChanged();
          } else {
            primaryAuthBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x04000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthReply primary_auth = 28;</code>
         *
         * <pre>
         * Первичная авторизация клиента.
         * </pre>
         */
        public Builder mergePrimaryAuth(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply value) {
          if (primaryAuthBuilder_ == null) {
            if (((bitField0_ & 0x04000000) == 0x04000000) &&
                primaryAuth_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply.getDefaultInstance()) {
              primaryAuth_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply.newBuilder(primaryAuth_).mergeFrom(value).buildPartial();
            } else {
              primaryAuth_ = value;
            }
            onChanged();
          } else {
            primaryAuthBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x04000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthReply primary_auth = 28;</code>
         *
         * <pre>
         * Первичная авторизация клиента.
         * </pre>
         */
        public Builder clearPrimaryAuth() {
          if (primaryAuthBuilder_ == null) {
            primaryAuth_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply.getDefaultInstance();
            onChanged();
          } else {
            primaryAuthBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x04000000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthReply primary_auth = 28;</code>
         *
         * <pre>
         * Первичная авторизация клиента.
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply.Builder getPrimaryAuthBuilder() {
          bitField0_ |= 0x04000000;
          onChanged();
          return getPrimaryAuthFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthReply primary_auth = 28;</code>
         *
         * <pre>
         * Первичная авторизация клиента.
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReplyOrBuilder getPrimaryAuthOrBuilder() {
          if (primaryAuthBuilder_ != null) {
            return primaryAuthBuilder_.getMessageOrBuilder();
          } else {
            return primaryAuth_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.PrimaryAuthReply primary_auth = 28;</code>
         *
         * <pre>
         * Первичная авторизация клиента.
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReplyOrBuilder> 
            getPrimaryAuthFieldBuilder() {
          if (primaryAuthBuilder_ == null) {
            primaryAuthBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReply.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.PrimaryAuthReplyOrBuilder>(
                    primaryAuth_,
                    getParentForChildren(),
                    isClean());
            primaryAuth_ = null;
          }
          return primaryAuthBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 29;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport addUserPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassportOrBuilder> addUserPassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 29;</code>
         */
        public boolean hasAddUserPassport() {
          return ((bitField0_ & 0x08000000) == 0x08000000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 29;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport getAddUserPassport() {
          if (addUserPassportBuilder_ == null) {
            return addUserPassport_;
          } else {
            return addUserPassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 29;</code>
         */
        public Builder setAddUserPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport value) {
          if (addUserPassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addUserPassport_ = value;
            onChanged();
          } else {
            addUserPassportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x08000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 29;</code>
         */
        public Builder setAddUserPassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport.Builder builderForValue) {
          if (addUserPassportBuilder_ == null) {
            addUserPassport_ = builderForValue.build();
            onChanged();
          } else {
            addUserPassportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x08000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 29;</code>
         */
        public Builder mergeAddUserPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport value) {
          if (addUserPassportBuilder_ == null) {
            if (((bitField0_ & 0x08000000) == 0x08000000) &&
                addUserPassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport.getDefaultInstance()) {
              addUserPassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport.newBuilder(addUserPassport_).mergeFrom(value).buildPartial();
            } else {
              addUserPassport_ = value;
            }
            onChanged();
          } else {
            addUserPassportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x08000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 29;</code>
         */
        public Builder clearAddUserPassport() {
          if (addUserPassportBuilder_ == null) {
            addUserPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport.getDefaultInstance();
            onChanged();
          } else {
            addUserPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x08000000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 29;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport.Builder getAddUserPassportBuilder() {
          bitField0_ |= 0x08000000;
          onChanged();
          return getAddUserPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 29;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassportOrBuilder getAddUserPassportOrBuilder() {
          if (addUserPassportBuilder_ != null) {
            return addUserPassportBuilder_.getMessageOrBuilder();
          } else {
            return addUserPassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddUserPassport add_user_passport = 29;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassportOrBuilder> 
            getAddUserPassportFieldBuilder() {
          if (addUserPassportBuilder_ == null) {
            addUserPassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddUserPassportOrBuilder>(
                    addUserPassport_,
                    getParentForChildren(),
                    isClean());
            addUserPassport_ = null;
          }
          return addUserPassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 30;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport updUserPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassportOrBuilder> updUserPassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 30;</code>
         */
        public boolean hasUpdUserPassport() {
          return ((bitField0_ & 0x10000000) == 0x10000000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 30;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport getUpdUserPassport() {
          if (updUserPassportBuilder_ == null) {
            return updUserPassport_;
          } else {
            return updUserPassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 30;</code>
         */
        public Builder setUpdUserPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport value) {
          if (updUserPassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updUserPassport_ = value;
            onChanged();
          } else {
            updUserPassportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x10000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 30;</code>
         */
        public Builder setUpdUserPassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport.Builder builderForValue) {
          if (updUserPassportBuilder_ == null) {
            updUserPassport_ = builderForValue.build();
            onChanged();
          } else {
            updUserPassportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x10000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 30;</code>
         */
        public Builder mergeUpdUserPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport value) {
          if (updUserPassportBuilder_ == null) {
            if (((bitField0_ & 0x10000000) == 0x10000000) &&
                updUserPassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport.getDefaultInstance()) {
              updUserPassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport.newBuilder(updUserPassport_).mergeFrom(value).buildPartial();
            } else {
              updUserPassport_ = value;
            }
            onChanged();
          } else {
            updUserPassportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x10000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 30;</code>
         */
        public Builder clearUpdUserPassport() {
          if (updUserPassportBuilder_ == null) {
            updUserPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport.getDefaultInstance();
            onChanged();
          } else {
            updUserPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x10000000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 30;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport.Builder getUpdUserPassportBuilder() {
          bitField0_ |= 0x10000000;
          onChanged();
          return getUpdUserPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 30;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassportOrBuilder getUpdUserPassportOrBuilder() {
          if (updUserPassportBuilder_ != null) {
            return updUserPassportBuilder_.getMessageOrBuilder();
          } else {
            return updUserPassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdUserPassport upd_user_passport = 30;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassportOrBuilder> 
            getUpdUserPassportFieldBuilder() {
          if (updUserPassportBuilder_ == null) {
            updUserPassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdUserPassportOrBuilder>(
                    updUserPassport_,
                    getParentForChildren(),
                    isClean());
            updUserPassport_ = null;
          }
          return updUserPassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 31;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport delUserPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassportOrBuilder> delUserPassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 31;</code>
         */
        public boolean hasDelUserPassport() {
          return ((bitField0_ & 0x20000000) == 0x20000000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 31;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport getDelUserPassport() {
          if (delUserPassportBuilder_ == null) {
            return delUserPassport_;
          } else {
            return delUserPassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 31;</code>
         */
        public Builder setDelUserPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport value) {
          if (delUserPassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            delUserPassport_ = value;
            onChanged();
          } else {
            delUserPassportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x20000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 31;</code>
         */
        public Builder setDelUserPassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport.Builder builderForValue) {
          if (delUserPassportBuilder_ == null) {
            delUserPassport_ = builderForValue.build();
            onChanged();
          } else {
            delUserPassportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x20000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 31;</code>
         */
        public Builder mergeDelUserPassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport value) {
          if (delUserPassportBuilder_ == null) {
            if (((bitField0_ & 0x20000000) == 0x20000000) &&
                delUserPassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport.getDefaultInstance()) {
              delUserPassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport.newBuilder(delUserPassport_).mergeFrom(value).buildPartial();
            } else {
              delUserPassport_ = value;
            }
            onChanged();
          } else {
            delUserPassportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x20000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 31;</code>
         */
        public Builder clearDelUserPassport() {
          if (delUserPassportBuilder_ == null) {
            delUserPassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport.getDefaultInstance();
            onChanged();
          } else {
            delUserPassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x20000000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 31;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport.Builder getDelUserPassportBuilder() {
          bitField0_ |= 0x20000000;
          onChanged();
          return getDelUserPassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 31;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassportOrBuilder getDelUserPassportOrBuilder() {
          if (delUserPassportBuilder_ != null) {
            return delUserPassportBuilder_.getMessageOrBuilder();
          } else {
            return delUserPassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelUserPassport del_user_passport = 31;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassportOrBuilder> 
            getDelUserPassportFieldBuilder() {
          if (delUserPassportBuilder_ == null) {
            delUserPassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelUserPassportOrBuilder>(
                    delUserPassport_,
                    getParentForChildren(),
                    isClean());
            delUserPassport_ = null;
          }
          return delUserPassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 32;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport addInterfacePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportOrBuilder> addInterfacePassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 32;</code>
         */
        public boolean hasAddInterfacePassport() {
          return ((bitField0_ & 0x40000000) == 0x40000000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 32;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport getAddInterfacePassport() {
          if (addInterfacePassportBuilder_ == null) {
            return addInterfacePassport_;
          } else {
            return addInterfacePassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 32;</code>
         */
        public Builder setAddInterfacePassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport value) {
          if (addInterfacePassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addInterfacePassport_ = value;
            onChanged();
          } else {
            addInterfacePassportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x40000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 32;</code>
         */
        public Builder setAddInterfacePassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport.Builder builderForValue) {
          if (addInterfacePassportBuilder_ == null) {
            addInterfacePassport_ = builderForValue.build();
            onChanged();
          } else {
            addInterfacePassportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x40000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 32;</code>
         */
        public Builder mergeAddInterfacePassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport value) {
          if (addInterfacePassportBuilder_ == null) {
            if (((bitField0_ & 0x40000000) == 0x40000000) &&
                addInterfacePassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport.getDefaultInstance()) {
              addInterfacePassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport.newBuilder(addInterfacePassport_).mergeFrom(value).buildPartial();
            } else {
              addInterfacePassport_ = value;
            }
            onChanged();
          } else {
            addInterfacePassportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x40000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 32;</code>
         */
        public Builder clearAddInterfacePassport() {
          if (addInterfacePassportBuilder_ == null) {
            addInterfacePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport.getDefaultInstance();
            onChanged();
          } else {
            addInterfacePassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x40000000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 32;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport.Builder getAddInterfacePassportBuilder() {
          bitField0_ |= 0x40000000;
          onChanged();
          return getAddInterfacePassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 32;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportOrBuilder getAddInterfacePassportOrBuilder() {
          if (addInterfacePassportBuilder_ != null) {
            return addInterfacePassportBuilder_.getMessageOrBuilder();
          } else {
            return addInterfacePassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassport add_interface_passport = 32;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportOrBuilder> 
            getAddInterfacePassportFieldBuilder() {
          if (addInterfacePassportBuilder_ == null) {
            addInterfacePassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportOrBuilder>(
                    addInterfacePassport_,
                    getParentForChildren(),
                    isClean());
            addInterfacePassport_ = null;
          }
          return addInterfacePassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 33;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport updInterfacePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportOrBuilder> updInterfacePassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 33;</code>
         */
        public boolean hasUpdInterfacePassport() {
          return ((bitField0_ & 0x80000000) == 0x80000000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 33;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport getUpdInterfacePassport() {
          if (updInterfacePassportBuilder_ == null) {
            return updInterfacePassport_;
          } else {
            return updInterfacePassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 33;</code>
         */
        public Builder setUpdInterfacePassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport value) {
          if (updInterfacePassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updInterfacePassport_ = value;
            onChanged();
          } else {
            updInterfacePassportBuilder_.setMessage(value);
          }
          bitField0_ |= 0x80000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 33;</code>
         */
        public Builder setUpdInterfacePassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport.Builder builderForValue) {
          if (updInterfacePassportBuilder_ == null) {
            updInterfacePassport_ = builderForValue.build();
            onChanged();
          } else {
            updInterfacePassportBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x80000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 33;</code>
         */
        public Builder mergeUpdInterfacePassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport value) {
          if (updInterfacePassportBuilder_ == null) {
            if (((bitField0_ & 0x80000000) == 0x80000000) &&
                updInterfacePassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport.getDefaultInstance()) {
              updInterfacePassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport.newBuilder(updInterfacePassport_).mergeFrom(value).buildPartial();
            } else {
              updInterfacePassport_ = value;
            }
            onChanged();
          } else {
            updInterfacePassportBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x80000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 33;</code>
         */
        public Builder clearUpdInterfacePassport() {
          if (updInterfacePassportBuilder_ == null) {
            updInterfacePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport.getDefaultInstance();
            onChanged();
          } else {
            updInterfacePassportBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x80000000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 33;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport.Builder getUpdInterfacePassportBuilder() {
          bitField0_ |= 0x80000000;
          onChanged();
          return getUpdInterfacePassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 33;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportOrBuilder getUpdInterfacePassportOrBuilder() {
          if (updInterfacePassportBuilder_ != null) {
            return updInterfacePassportBuilder_.getMessageOrBuilder();
          } else {
            return updInterfacePassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassport upd_interface_passport = 33;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportOrBuilder> 
            getUpdInterfacePassportFieldBuilder() {
          if (updInterfacePassportBuilder_ == null) {
            updInterfacePassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportOrBuilder>(
                    updInterfacePassport_,
                    getParentForChildren(),
                    isClean());
            updInterfacePassport_ = null;
          }
          return updInterfacePassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 34;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport delInterfacePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportOrBuilder> delInterfacePassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 34;</code>
         */
        public boolean hasDelInterfacePassport() {
          return ((bitField1_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 34;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport getDelInterfacePassport() {
          if (delInterfacePassportBuilder_ == null) {
            return delInterfacePassport_;
          } else {
            return delInterfacePassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 34;</code>
         */
        public Builder setDelInterfacePassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport value) {
          if (delInterfacePassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            delInterfacePassport_ = value;
            onChanged();
          } else {
            delInterfacePassportBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 34;</code>
         */
        public Builder setDelInterfacePassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport.Builder builderForValue) {
          if (delInterfacePassportBuilder_ == null) {
            delInterfacePassport_ = builderForValue.build();
            onChanged();
          } else {
            delInterfacePassportBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 34;</code>
         */
        public Builder mergeDelInterfacePassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport value) {
          if (delInterfacePassportBuilder_ == null) {
            if (((bitField1_ & 0x00000001) == 0x00000001) &&
                delInterfacePassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport.getDefaultInstance()) {
              delInterfacePassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport.newBuilder(delInterfacePassport_).mergeFrom(value).buildPartial();
            } else {
              delInterfacePassport_ = value;
            }
            onChanged();
          } else {
            delInterfacePassportBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 34;</code>
         */
        public Builder clearDelInterfacePassport() {
          if (delInterfacePassportBuilder_ == null) {
            delInterfacePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport.getDefaultInstance();
            onChanged();
          } else {
            delInterfacePassportBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 34;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport.Builder getDelInterfacePassportBuilder() {
          bitField1_ |= 0x00000001;
          onChanged();
          return getDelInterfacePassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 34;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportOrBuilder getDelInterfacePassportOrBuilder() {
          if (delInterfacePassportBuilder_ != null) {
            return delInterfacePassportBuilder_.getMessageOrBuilder();
          } else {
            return delInterfacePassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassport del_interface_passport = 34;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportOrBuilder> 
            getDelInterfacePassportFieldBuilder() {
          if (delInterfacePassportBuilder_ == null) {
            delInterfacePassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportOrBuilder>(
                    delInterfacePassport_,
                    getParentForChildren(),
                    isClean());
            delInterfacePassport_ = null;
          }
          return delInterfacePassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 35;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType addControlObjectPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportTypeOrBuilder> addControlObjectPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 35;</code>
         */
        public boolean hasAddControlObjectPassportType() {
          return ((bitField1_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 35;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType getAddControlObjectPassportType() {
          if (addControlObjectPassportTypeBuilder_ == null) {
            return addControlObjectPassportType_;
          } else {
            return addControlObjectPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 35;</code>
         */
        public Builder setAddControlObjectPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType value) {
          if (addControlObjectPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addControlObjectPassportType_ = value;
            onChanged();
          } else {
            addControlObjectPassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 35;</code>
         */
        public Builder setAddControlObjectPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType.Builder builderForValue) {
          if (addControlObjectPassportTypeBuilder_ == null) {
            addControlObjectPassportType_ = builderForValue.build();
            onChanged();
          } else {
            addControlObjectPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 35;</code>
         */
        public Builder mergeAddControlObjectPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType value) {
          if (addControlObjectPassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x00000002) == 0x00000002) &&
                addControlObjectPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType.getDefaultInstance()) {
              addControlObjectPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType.newBuilder(addControlObjectPassportType_).mergeFrom(value).buildPartial();
            } else {
              addControlObjectPassportType_ = value;
            }
            onChanged();
          } else {
            addControlObjectPassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 35;</code>
         */
        public Builder clearAddControlObjectPassportType() {
          if (addControlObjectPassportTypeBuilder_ == null) {
            addControlObjectPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType.getDefaultInstance();
            onChanged();
          } else {
            addControlObjectPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000002);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 35;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType.Builder getAddControlObjectPassportTypeBuilder() {
          bitField1_ |= 0x00000002;
          onChanged();
          return getAddControlObjectPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 35;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportTypeOrBuilder getAddControlObjectPassportTypeOrBuilder() {
          if (addControlObjectPassportTypeBuilder_ != null) {
            return addControlObjectPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return addControlObjectPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlObjectPassportType add_control_object_passport_type = 35;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportTypeOrBuilder> 
            getAddControlObjectPassportTypeFieldBuilder() {
          if (addControlObjectPassportTypeBuilder_ == null) {
            addControlObjectPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlObjectPassportTypeOrBuilder>(
                    addControlObjectPassportType_,
                    getParentForChildren(),
                    isClean());
            addControlObjectPassportType_ = null;
          }
          return addControlObjectPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 36;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType updControlObjectPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportTypeOrBuilder> updControlObjectPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 36;</code>
         */
        public boolean hasUpdControlObjectPassportType() {
          return ((bitField1_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 36;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType getUpdControlObjectPassportType() {
          if (updControlObjectPassportTypeBuilder_ == null) {
            return updControlObjectPassportType_;
          } else {
            return updControlObjectPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 36;</code>
         */
        public Builder setUpdControlObjectPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType value) {
          if (updControlObjectPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updControlObjectPassportType_ = value;
            onChanged();
          } else {
            updControlObjectPassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 36;</code>
         */
        public Builder setUpdControlObjectPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType.Builder builderForValue) {
          if (updControlObjectPassportTypeBuilder_ == null) {
            updControlObjectPassportType_ = builderForValue.build();
            onChanged();
          } else {
            updControlObjectPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 36;</code>
         */
        public Builder mergeUpdControlObjectPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType value) {
          if (updControlObjectPassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x00000004) == 0x00000004) &&
                updControlObjectPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType.getDefaultInstance()) {
              updControlObjectPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType.newBuilder(updControlObjectPassportType_).mergeFrom(value).buildPartial();
            } else {
              updControlObjectPassportType_ = value;
            }
            onChanged();
          } else {
            updControlObjectPassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 36;</code>
         */
        public Builder clearUpdControlObjectPassportType() {
          if (updControlObjectPassportTypeBuilder_ == null) {
            updControlObjectPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType.getDefaultInstance();
            onChanged();
          } else {
            updControlObjectPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000004);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 36;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType.Builder getUpdControlObjectPassportTypeBuilder() {
          bitField1_ |= 0x00000004;
          onChanged();
          return getUpdControlObjectPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 36;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportTypeOrBuilder getUpdControlObjectPassportTypeOrBuilder() {
          if (updControlObjectPassportTypeBuilder_ != null) {
            return updControlObjectPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return updControlObjectPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectPassportType upd_control_object_passport_type = 36;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportTypeOrBuilder> 
            getUpdControlObjectPassportTypeFieldBuilder() {
          if (updControlObjectPassportTypeBuilder_ == null) {
            updControlObjectPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectPassportTypeOrBuilder>(
                    updControlObjectPassportType_,
                    getParentForChildren(),
                    isClean());
            updControlObjectPassportType_ = null;
          }
          return updControlObjectPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 37;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType delControlObjectPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportTypeOrBuilder> delControlObjectPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 37;</code>
         */
        public boolean hasDelControlObjectPassportType() {
          return ((bitField1_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 37;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType getDelControlObjectPassportType() {
          if (delControlObjectPassportTypeBuilder_ == null) {
            return delControlObjectPassportType_;
          } else {
            return delControlObjectPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 37;</code>
         */
        public Builder setDelControlObjectPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType value) {
          if (delControlObjectPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            delControlObjectPassportType_ = value;
            onChanged();
          } else {
            delControlObjectPassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00000008;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 37;</code>
         */
        public Builder setDelControlObjectPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType.Builder builderForValue) {
          if (delControlObjectPassportTypeBuilder_ == null) {
            delControlObjectPassportType_ = builderForValue.build();
            onChanged();
          } else {
            delControlObjectPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00000008;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 37;</code>
         */
        public Builder mergeDelControlObjectPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType value) {
          if (delControlObjectPassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x00000008) == 0x00000008) &&
                delControlObjectPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType.getDefaultInstance()) {
              delControlObjectPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType.newBuilder(delControlObjectPassportType_).mergeFrom(value).buildPartial();
            } else {
              delControlObjectPassportType_ = value;
            }
            onChanged();
          } else {
            delControlObjectPassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00000008;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 37;</code>
         */
        public Builder clearDelControlObjectPassportType() {
          if (delControlObjectPassportTypeBuilder_ == null) {
            delControlObjectPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType.getDefaultInstance();
            onChanged();
          } else {
            delControlObjectPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000008);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 37;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType.Builder getDelControlObjectPassportTypeBuilder() {
          bitField1_ |= 0x00000008;
          onChanged();
          return getDelControlObjectPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 37;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportTypeOrBuilder getDelControlObjectPassportTypeOrBuilder() {
          if (delControlObjectPassportTypeBuilder_ != null) {
            return delControlObjectPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return delControlObjectPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlObjectPassportType del_control_object_passport_type = 37;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportTypeOrBuilder> 
            getDelControlObjectPassportTypeFieldBuilder() {
          if (delControlObjectPassportTypeBuilder_ == null) {
            delControlObjectPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlObjectPassportTypeOrBuilder>(
                    delControlObjectPassportType_,
                    getParentForChildren(),
                    isClean());
            delControlObjectPassportType_ = null;
          }
          return delControlObjectPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 38;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType addControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportTypeOrBuilder> addControlElementPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 38;</code>
         */
        public boolean hasAddControlElementPassportType() {
          return ((bitField1_ & 0x00000010) == 0x00000010);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 38;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType getAddControlElementPassportType() {
          if (addControlElementPassportTypeBuilder_ == null) {
            return addControlElementPassportType_;
          } else {
            return addControlElementPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 38;</code>
         */
        public Builder setAddControlElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType value) {
          if (addControlElementPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addControlElementPassportType_ = value;
            onChanged();
          } else {
            addControlElementPassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00000010;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 38;</code>
         */
        public Builder setAddControlElementPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType.Builder builderForValue) {
          if (addControlElementPassportTypeBuilder_ == null) {
            addControlElementPassportType_ = builderForValue.build();
            onChanged();
          } else {
            addControlElementPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00000010;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 38;</code>
         */
        public Builder mergeAddControlElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType value) {
          if (addControlElementPassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x00000010) == 0x00000010) &&
                addControlElementPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType.getDefaultInstance()) {
              addControlElementPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType.newBuilder(addControlElementPassportType_).mergeFrom(value).buildPartial();
            } else {
              addControlElementPassportType_ = value;
            }
            onChanged();
          } else {
            addControlElementPassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00000010;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 38;</code>
         */
        public Builder clearAddControlElementPassportType() {
          if (addControlElementPassportTypeBuilder_ == null) {
            addControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType.getDefaultInstance();
            onChanged();
          } else {
            addControlElementPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000010);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 38;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType.Builder getAddControlElementPassportTypeBuilder() {
          bitField1_ |= 0x00000010;
          onChanged();
          return getAddControlElementPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 38;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportTypeOrBuilder getAddControlElementPassportTypeOrBuilder() {
          if (addControlElementPassportTypeBuilder_ != null) {
            return addControlElementPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return addControlElementPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddControlElementPassportType add_control_element_passport_type = 38;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportTypeOrBuilder> 
            getAddControlElementPassportTypeFieldBuilder() {
          if (addControlElementPassportTypeBuilder_ == null) {
            addControlElementPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddControlElementPassportTypeOrBuilder>(
                    addControlElementPassportType_,
                    getParentForChildren(),
                    isClean());
            addControlElementPassportType_ = null;
          }
          return addControlElementPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 39;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType updControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportTypeOrBuilder> updControlElementPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 39;</code>
         */
        public boolean hasUpdControlElementPassportType() {
          return ((bitField1_ & 0x00000020) == 0x00000020);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 39;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType getUpdControlElementPassportType() {
          if (updControlElementPassportTypeBuilder_ == null) {
            return updControlElementPassportType_;
          } else {
            return updControlElementPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 39;</code>
         */
        public Builder setUpdControlElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType value) {
          if (updControlElementPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updControlElementPassportType_ = value;
            onChanged();
          } else {
            updControlElementPassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00000020;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 39;</code>
         */
        public Builder setUpdControlElementPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType.Builder builderForValue) {
          if (updControlElementPassportTypeBuilder_ == null) {
            updControlElementPassportType_ = builderForValue.build();
            onChanged();
          } else {
            updControlElementPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00000020;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 39;</code>
         */
        public Builder mergeUpdControlElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType value) {
          if (updControlElementPassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x00000020) == 0x00000020) &&
                updControlElementPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType.getDefaultInstance()) {
              updControlElementPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType.newBuilder(updControlElementPassportType_).mergeFrom(value).buildPartial();
            } else {
              updControlElementPassportType_ = value;
            }
            onChanged();
          } else {
            updControlElementPassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00000020;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 39;</code>
         */
        public Builder clearUpdControlElementPassportType() {
          if (updControlElementPassportTypeBuilder_ == null) {
            updControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType.getDefaultInstance();
            onChanged();
          } else {
            updControlElementPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000020);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 39;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType.Builder getUpdControlElementPassportTypeBuilder() {
          bitField1_ |= 0x00000020;
          onChanged();
          return getUpdControlElementPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 39;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportTypeOrBuilder getUpdControlElementPassportTypeOrBuilder() {
          if (updControlElementPassportTypeBuilder_ != null) {
            return updControlElementPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return updControlElementPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlElementPassportType upd_control_element_passport_type = 39;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportTypeOrBuilder> 
            getUpdControlElementPassportTypeFieldBuilder() {
          if (updControlElementPassportTypeBuilder_ == null) {
            updControlElementPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlElementPassportTypeOrBuilder>(
                    updControlElementPassportType_,
                    getParentForChildren(),
                    isClean());
            updControlElementPassportType_ = null;
          }
          return updControlElementPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 40;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType delControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportTypeOrBuilder> delControlElementPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 40;</code>
         */
        public boolean hasDelControlElementPassportType() {
          return ((bitField1_ & 0x00000040) == 0x00000040);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 40;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType getDelControlElementPassportType() {
          if (delControlElementPassportTypeBuilder_ == null) {
            return delControlElementPassportType_;
          } else {
            return delControlElementPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 40;</code>
         */
        public Builder setDelControlElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType value) {
          if (delControlElementPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            delControlElementPassportType_ = value;
            onChanged();
          } else {
            delControlElementPassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00000040;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 40;</code>
         */
        public Builder setDelControlElementPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType.Builder builderForValue) {
          if (delControlElementPassportTypeBuilder_ == null) {
            delControlElementPassportType_ = builderForValue.build();
            onChanged();
          } else {
            delControlElementPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00000040;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 40;</code>
         */
        public Builder mergeDelControlElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType value) {
          if (delControlElementPassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x00000040) == 0x00000040) &&
                delControlElementPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType.getDefaultInstance()) {
              delControlElementPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType.newBuilder(delControlElementPassportType_).mergeFrom(value).buildPartial();
            } else {
              delControlElementPassportType_ = value;
            }
            onChanged();
          } else {
            delControlElementPassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00000040;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 40;</code>
         */
        public Builder clearDelControlElementPassportType() {
          if (delControlElementPassportTypeBuilder_ == null) {
            delControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType.getDefaultInstance();
            onChanged();
          } else {
            delControlElementPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000040);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 40;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType.Builder getDelControlElementPassportTypeBuilder() {
          bitField1_ |= 0x00000040;
          onChanged();
          return getDelControlElementPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 40;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportTypeOrBuilder getDelControlElementPassportTypeOrBuilder() {
          if (delControlElementPassportTypeBuilder_ != null) {
            return delControlElementPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return delControlElementPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelControlElementPassportType del_control_element_passport_type = 40;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportTypeOrBuilder> 
            getDelControlElementPassportTypeFieldBuilder() {
          if (delControlElementPassportTypeBuilder_ == null) {
            delControlElementPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelControlElementPassportTypeOrBuilder>(
                    delControlElementPassportType_,
                    getParentForChildren(),
                    isClean());
            delControlElementPassportType_ = null;
          }
          return delControlElementPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 41;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType addEquipmentPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportTypeOrBuilder> addEquipmentPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 41;</code>
         */
        public boolean hasAddEquipmentPassportType() {
          return ((bitField1_ & 0x00000080) == 0x00000080);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 41;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType getAddEquipmentPassportType() {
          if (addEquipmentPassportTypeBuilder_ == null) {
            return addEquipmentPassportType_;
          } else {
            return addEquipmentPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 41;</code>
         */
        public Builder setAddEquipmentPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType value) {
          if (addEquipmentPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addEquipmentPassportType_ = value;
            onChanged();
          } else {
            addEquipmentPassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00000080;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 41;</code>
         */
        public Builder setAddEquipmentPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType.Builder builderForValue) {
          if (addEquipmentPassportTypeBuilder_ == null) {
            addEquipmentPassportType_ = builderForValue.build();
            onChanged();
          } else {
            addEquipmentPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00000080;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 41;</code>
         */
        public Builder mergeAddEquipmentPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType value) {
          if (addEquipmentPassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x00000080) == 0x00000080) &&
                addEquipmentPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType.getDefaultInstance()) {
              addEquipmentPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType.newBuilder(addEquipmentPassportType_).mergeFrom(value).buildPartial();
            } else {
              addEquipmentPassportType_ = value;
            }
            onChanged();
          } else {
            addEquipmentPassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00000080;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 41;</code>
         */
        public Builder clearAddEquipmentPassportType() {
          if (addEquipmentPassportTypeBuilder_ == null) {
            addEquipmentPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType.getDefaultInstance();
            onChanged();
          } else {
            addEquipmentPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000080);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 41;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType.Builder getAddEquipmentPassportTypeBuilder() {
          bitField1_ |= 0x00000080;
          onChanged();
          return getAddEquipmentPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 41;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportTypeOrBuilder getAddEquipmentPassportTypeOrBuilder() {
          if (addEquipmentPassportTypeBuilder_ != null) {
            return addEquipmentPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return addEquipmentPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentPassportType add_equipment_passport_type = 41;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportTypeOrBuilder> 
            getAddEquipmentPassportTypeFieldBuilder() {
          if (addEquipmentPassportTypeBuilder_ == null) {
            addEquipmentPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentPassportTypeOrBuilder>(
                    addEquipmentPassportType_,
                    getParentForChildren(),
                    isClean());
            addEquipmentPassportType_ = null;
          }
          return addEquipmentPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 42;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType updEquipmentPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportTypeOrBuilder> updEquipmentPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 42;</code>
         */
        public boolean hasUpdEquipmentPassportType() {
          return ((bitField1_ & 0x00000100) == 0x00000100);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 42;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType getUpdEquipmentPassportType() {
          if (updEquipmentPassportTypeBuilder_ == null) {
            return updEquipmentPassportType_;
          } else {
            return updEquipmentPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 42;</code>
         */
        public Builder setUpdEquipmentPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType value) {
          if (updEquipmentPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updEquipmentPassportType_ = value;
            onChanged();
          } else {
            updEquipmentPassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00000100;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 42;</code>
         */
        public Builder setUpdEquipmentPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType.Builder builderForValue) {
          if (updEquipmentPassportTypeBuilder_ == null) {
            updEquipmentPassportType_ = builderForValue.build();
            onChanged();
          } else {
            updEquipmentPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00000100;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 42;</code>
         */
        public Builder mergeUpdEquipmentPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType value) {
          if (updEquipmentPassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x00000100) == 0x00000100) &&
                updEquipmentPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType.getDefaultInstance()) {
              updEquipmentPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType.newBuilder(updEquipmentPassportType_).mergeFrom(value).buildPartial();
            } else {
              updEquipmentPassportType_ = value;
            }
            onChanged();
          } else {
            updEquipmentPassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00000100;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 42;</code>
         */
        public Builder clearUpdEquipmentPassportType() {
          if (updEquipmentPassportTypeBuilder_ == null) {
            updEquipmentPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType.getDefaultInstance();
            onChanged();
          } else {
            updEquipmentPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000100);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 42;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType.Builder getUpdEquipmentPassportTypeBuilder() {
          bitField1_ |= 0x00000100;
          onChanged();
          return getUpdEquipmentPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 42;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportTypeOrBuilder getUpdEquipmentPassportTypeOrBuilder() {
          if (updEquipmentPassportTypeBuilder_ != null) {
            return updEquipmentPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return updEquipmentPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentPassportType upd_equipment_passport_type = 42;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportTypeOrBuilder> 
            getUpdEquipmentPassportTypeFieldBuilder() {
          if (updEquipmentPassportTypeBuilder_ == null) {
            updEquipmentPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentPassportTypeOrBuilder>(
                    updEquipmentPassportType_,
                    getParentForChildren(),
                    isClean());
            updEquipmentPassportType_ = null;
          }
          return updEquipmentPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 43;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType delEquipmentPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportTypeOrBuilder> delEquipmentPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 43;</code>
         */
        public boolean hasDelEquipmentPassportType() {
          return ((bitField1_ & 0x00000200) == 0x00000200);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 43;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType getDelEquipmentPassportType() {
          if (delEquipmentPassportTypeBuilder_ == null) {
            return delEquipmentPassportType_;
          } else {
            return delEquipmentPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 43;</code>
         */
        public Builder setDelEquipmentPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType value) {
          if (delEquipmentPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            delEquipmentPassportType_ = value;
            onChanged();
          } else {
            delEquipmentPassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00000200;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 43;</code>
         */
        public Builder setDelEquipmentPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType.Builder builderForValue) {
          if (delEquipmentPassportTypeBuilder_ == null) {
            delEquipmentPassportType_ = builderForValue.build();
            onChanged();
          } else {
            delEquipmentPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00000200;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 43;</code>
         */
        public Builder mergeDelEquipmentPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType value) {
          if (delEquipmentPassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x00000200) == 0x00000200) &&
                delEquipmentPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType.getDefaultInstance()) {
              delEquipmentPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType.newBuilder(delEquipmentPassportType_).mergeFrom(value).buildPartial();
            } else {
              delEquipmentPassportType_ = value;
            }
            onChanged();
          } else {
            delEquipmentPassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00000200;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 43;</code>
         */
        public Builder clearDelEquipmentPassportType() {
          if (delEquipmentPassportTypeBuilder_ == null) {
            delEquipmentPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType.getDefaultInstance();
            onChanged();
          } else {
            delEquipmentPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000200);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 43;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType.Builder getDelEquipmentPassportTypeBuilder() {
          bitField1_ |= 0x00000200;
          onChanged();
          return getDelEquipmentPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 43;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportTypeOrBuilder getDelEquipmentPassportTypeOrBuilder() {
          if (delEquipmentPassportTypeBuilder_ != null) {
            return delEquipmentPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return delEquipmentPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentPassportType del_equipment_passport_type = 43;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportTypeOrBuilder> 
            getDelEquipmentPassportTypeFieldBuilder() {
          if (delEquipmentPassportTypeBuilder_ == null) {
            delEquipmentPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentPassportTypeOrBuilder>(
                    delEquipmentPassportType_,
                    getParentForChildren(),
                    isClean());
            delEquipmentPassportType_ = null;
          }
          return delEquipmentPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 44;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType addManagedElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportTypeOrBuilder> addManagedElementPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 44;</code>
         */
        public boolean hasAddManagedElementPassportType() {
          return ((bitField1_ & 0x00000400) == 0x00000400);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 44;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType getAddManagedElementPassportType() {
          if (addManagedElementPassportTypeBuilder_ == null) {
            return addManagedElementPassportType_;
          } else {
            return addManagedElementPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 44;</code>
         */
        public Builder setAddManagedElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType value) {
          if (addManagedElementPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addManagedElementPassportType_ = value;
            onChanged();
          } else {
            addManagedElementPassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00000400;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 44;</code>
         */
        public Builder setAddManagedElementPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType.Builder builderForValue) {
          if (addManagedElementPassportTypeBuilder_ == null) {
            addManagedElementPassportType_ = builderForValue.build();
            onChanged();
          } else {
            addManagedElementPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00000400;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 44;</code>
         */
        public Builder mergeAddManagedElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType value) {
          if (addManagedElementPassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x00000400) == 0x00000400) &&
                addManagedElementPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType.getDefaultInstance()) {
              addManagedElementPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType.newBuilder(addManagedElementPassportType_).mergeFrom(value).buildPartial();
            } else {
              addManagedElementPassportType_ = value;
            }
            onChanged();
          } else {
            addManagedElementPassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00000400;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 44;</code>
         */
        public Builder clearAddManagedElementPassportType() {
          if (addManagedElementPassportTypeBuilder_ == null) {
            addManagedElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType.getDefaultInstance();
            onChanged();
          } else {
            addManagedElementPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000400);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 44;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType.Builder getAddManagedElementPassportTypeBuilder() {
          bitField1_ |= 0x00000400;
          onChanged();
          return getAddManagedElementPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 44;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportTypeOrBuilder getAddManagedElementPassportTypeOrBuilder() {
          if (addManagedElementPassportTypeBuilder_ != null) {
            return addManagedElementPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return addManagedElementPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddManagedElementPassportType add_managed_element_passport_type = 44;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportTypeOrBuilder> 
            getAddManagedElementPassportTypeFieldBuilder() {
          if (addManagedElementPassportTypeBuilder_ == null) {
            addManagedElementPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddManagedElementPassportTypeOrBuilder>(
                    addManagedElementPassportType_,
                    getParentForChildren(),
                    isClean());
            addManagedElementPassportType_ = null;
          }
          return addManagedElementPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 45;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType updManagedElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportTypeOrBuilder> updManagedElementPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 45;</code>
         */
        public boolean hasUpdManagedElementPassportType() {
          return ((bitField1_ & 0x00000800) == 0x00000800);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 45;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType getUpdManagedElementPassportType() {
          if (updManagedElementPassportTypeBuilder_ == null) {
            return updManagedElementPassportType_;
          } else {
            return updManagedElementPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 45;</code>
         */
        public Builder setUpdManagedElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType value) {
          if (updManagedElementPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updManagedElementPassportType_ = value;
            onChanged();
          } else {
            updManagedElementPassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00000800;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 45;</code>
         */
        public Builder setUpdManagedElementPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType.Builder builderForValue) {
          if (updManagedElementPassportTypeBuilder_ == null) {
            updManagedElementPassportType_ = builderForValue.build();
            onChanged();
          } else {
            updManagedElementPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00000800;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 45;</code>
         */
        public Builder mergeUpdManagedElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType value) {
          if (updManagedElementPassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x00000800) == 0x00000800) &&
                updManagedElementPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType.getDefaultInstance()) {
              updManagedElementPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType.newBuilder(updManagedElementPassportType_).mergeFrom(value).buildPartial();
            } else {
              updManagedElementPassportType_ = value;
            }
            onChanged();
          } else {
            updManagedElementPassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00000800;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 45;</code>
         */
        public Builder clearUpdManagedElementPassportType() {
          if (updManagedElementPassportTypeBuilder_ == null) {
            updManagedElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType.getDefaultInstance();
            onChanged();
          } else {
            updManagedElementPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00000800);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 45;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType.Builder getUpdManagedElementPassportTypeBuilder() {
          bitField1_ |= 0x00000800;
          onChanged();
          return getUpdManagedElementPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 45;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportTypeOrBuilder getUpdManagedElementPassportTypeOrBuilder() {
          if (updManagedElementPassportTypeBuilder_ != null) {
            return updManagedElementPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return updManagedElementPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdManagedElementPassportType upd_managed_element_passport_type = 45;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportTypeOrBuilder> 
            getUpdManagedElementPassportTypeFieldBuilder() {
          if (updManagedElementPassportTypeBuilder_ == null) {
            updManagedElementPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdManagedElementPassportTypeOrBuilder>(
                    updManagedElementPassportType_,
                    getParentForChildren(),
                    isClean());
            updManagedElementPassportType_ = null;
          }
          return updManagedElementPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 46;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType delManagedElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportTypeOrBuilder> delManagedElementPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 46;</code>
         */
        public boolean hasDelManagedElementPassportType() {
          return ((bitField1_ & 0x00001000) == 0x00001000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 46;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType getDelManagedElementPassportType() {
          if (delManagedElementPassportTypeBuilder_ == null) {
            return delManagedElementPassportType_;
          } else {
            return delManagedElementPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 46;</code>
         */
        public Builder setDelManagedElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType value) {
          if (delManagedElementPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            delManagedElementPassportType_ = value;
            onChanged();
          } else {
            delManagedElementPassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00001000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 46;</code>
         */
        public Builder setDelManagedElementPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType.Builder builderForValue) {
          if (delManagedElementPassportTypeBuilder_ == null) {
            delManagedElementPassportType_ = builderForValue.build();
            onChanged();
          } else {
            delManagedElementPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00001000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 46;</code>
         */
        public Builder mergeDelManagedElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType value) {
          if (delManagedElementPassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x00001000) == 0x00001000) &&
                delManagedElementPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType.getDefaultInstance()) {
              delManagedElementPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType.newBuilder(delManagedElementPassportType_).mergeFrom(value).buildPartial();
            } else {
              delManagedElementPassportType_ = value;
            }
            onChanged();
          } else {
            delManagedElementPassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00001000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 46;</code>
         */
        public Builder clearDelManagedElementPassportType() {
          if (delManagedElementPassportTypeBuilder_ == null) {
            delManagedElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType.getDefaultInstance();
            onChanged();
          } else {
            delManagedElementPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00001000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 46;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType.Builder getDelManagedElementPassportTypeBuilder() {
          bitField1_ |= 0x00001000;
          onChanged();
          return getDelManagedElementPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 46;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportTypeOrBuilder getDelManagedElementPassportTypeOrBuilder() {
          if (delManagedElementPassportTypeBuilder_ != null) {
            return delManagedElementPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return delManagedElementPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelManagedElementPassportType del_managed_element_passport_type = 46;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportTypeOrBuilder> 
            getDelManagedElementPassportTypeFieldBuilder() {
          if (delManagedElementPassportTypeBuilder_ == null) {
            delManagedElementPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelManagedElementPassportTypeOrBuilder>(
                    delManagedElementPassportType_,
                    getParentForChildren(),
                    isClean());
            delManagedElementPassportType_ = null;
          }
          return delManagedElementPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 47;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType addSensorControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportTypeOrBuilder> addSensorControlElementPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 47;</code>
         */
        public boolean hasAddSensorControlElementPassportType() {
          return ((bitField1_ & 0x00002000) == 0x00002000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 47;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType getAddSensorControlElementPassportType() {
          if (addSensorControlElementPassportTypeBuilder_ == null) {
            return addSensorControlElementPassportType_;
          } else {
            return addSensorControlElementPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 47;</code>
         */
        public Builder setAddSensorControlElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType value) {
          if (addSensorControlElementPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addSensorControlElementPassportType_ = value;
            onChanged();
          } else {
            addSensorControlElementPassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00002000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 47;</code>
         */
        public Builder setAddSensorControlElementPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType.Builder builderForValue) {
          if (addSensorControlElementPassportTypeBuilder_ == null) {
            addSensorControlElementPassportType_ = builderForValue.build();
            onChanged();
          } else {
            addSensorControlElementPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00002000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 47;</code>
         */
        public Builder mergeAddSensorControlElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType value) {
          if (addSensorControlElementPassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x00002000) == 0x00002000) &&
                addSensorControlElementPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType.getDefaultInstance()) {
              addSensorControlElementPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType.newBuilder(addSensorControlElementPassportType_).mergeFrom(value).buildPartial();
            } else {
              addSensorControlElementPassportType_ = value;
            }
            onChanged();
          } else {
            addSensorControlElementPassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00002000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 47;</code>
         */
        public Builder clearAddSensorControlElementPassportType() {
          if (addSensorControlElementPassportTypeBuilder_ == null) {
            addSensorControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType.getDefaultInstance();
            onChanged();
          } else {
            addSensorControlElementPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00002000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 47;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType.Builder getAddSensorControlElementPassportTypeBuilder() {
          bitField1_ |= 0x00002000;
          onChanged();
          return getAddSensorControlElementPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 47;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportTypeOrBuilder getAddSensorControlElementPassportTypeOrBuilder() {
          if (addSensorControlElementPassportTypeBuilder_ != null) {
            return addSensorControlElementPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return addSensorControlElementPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddSensorControlElementPassportType add_sensor_control_element_passport_type = 47;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportTypeOrBuilder> 
            getAddSensorControlElementPassportTypeFieldBuilder() {
          if (addSensorControlElementPassportTypeBuilder_ == null) {
            addSensorControlElementPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddSensorControlElementPassportTypeOrBuilder>(
                    addSensorControlElementPassportType_,
                    getParentForChildren(),
                    isClean());
            addSensorControlElementPassportType_ = null;
          }
          return addSensorControlElementPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 48;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType updSensorControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportTypeOrBuilder> updSensorControlElementPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 48;</code>
         */
        public boolean hasUpdSensorControlElementPassportType() {
          return ((bitField1_ & 0x00004000) == 0x00004000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 48;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType getUpdSensorControlElementPassportType() {
          if (updSensorControlElementPassportTypeBuilder_ == null) {
            return updSensorControlElementPassportType_;
          } else {
            return updSensorControlElementPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 48;</code>
         */
        public Builder setUpdSensorControlElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType value) {
          if (updSensorControlElementPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updSensorControlElementPassportType_ = value;
            onChanged();
          } else {
            updSensorControlElementPassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00004000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 48;</code>
         */
        public Builder setUpdSensorControlElementPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType.Builder builderForValue) {
          if (updSensorControlElementPassportTypeBuilder_ == null) {
            updSensorControlElementPassportType_ = builderForValue.build();
            onChanged();
          } else {
            updSensorControlElementPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00004000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 48;</code>
         */
        public Builder mergeUpdSensorControlElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType value) {
          if (updSensorControlElementPassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x00004000) == 0x00004000) &&
                updSensorControlElementPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType.getDefaultInstance()) {
              updSensorControlElementPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType.newBuilder(updSensorControlElementPassportType_).mergeFrom(value).buildPartial();
            } else {
              updSensorControlElementPassportType_ = value;
            }
            onChanged();
          } else {
            updSensorControlElementPassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00004000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 48;</code>
         */
        public Builder clearUpdSensorControlElementPassportType() {
          if (updSensorControlElementPassportTypeBuilder_ == null) {
            updSensorControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType.getDefaultInstance();
            onChanged();
          } else {
            updSensorControlElementPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00004000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 48;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType.Builder getUpdSensorControlElementPassportTypeBuilder() {
          bitField1_ |= 0x00004000;
          onChanged();
          return getUpdSensorControlElementPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 48;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportTypeOrBuilder getUpdSensorControlElementPassportTypeOrBuilder() {
          if (updSensorControlElementPassportTypeBuilder_ != null) {
            return updSensorControlElementPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return updSensorControlElementPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdSensorControlElementPassportType upd_sensor_control_element_passport_type = 48;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportTypeOrBuilder> 
            getUpdSensorControlElementPassportTypeFieldBuilder() {
          if (updSensorControlElementPassportTypeBuilder_ == null) {
            updSensorControlElementPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdSensorControlElementPassportTypeOrBuilder>(
                    updSensorControlElementPassportType_,
                    getParentForChildren(),
                    isClean());
            updSensorControlElementPassportType_ = null;
          }
          return updSensorControlElementPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 49;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType delSensorControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportTypeOrBuilder> delSensorControlElementPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 49;</code>
         */
        public boolean hasDelSensorControlElementPassportType() {
          return ((bitField1_ & 0x00008000) == 0x00008000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 49;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType getDelSensorControlElementPassportType() {
          if (delSensorControlElementPassportTypeBuilder_ == null) {
            return delSensorControlElementPassportType_;
          } else {
            return delSensorControlElementPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 49;</code>
         */
        public Builder setDelSensorControlElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType value) {
          if (delSensorControlElementPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            delSensorControlElementPassportType_ = value;
            onChanged();
          } else {
            delSensorControlElementPassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00008000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 49;</code>
         */
        public Builder setDelSensorControlElementPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType.Builder builderForValue) {
          if (delSensorControlElementPassportTypeBuilder_ == null) {
            delSensorControlElementPassportType_ = builderForValue.build();
            onChanged();
          } else {
            delSensorControlElementPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00008000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 49;</code>
         */
        public Builder mergeDelSensorControlElementPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType value) {
          if (delSensorControlElementPassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x00008000) == 0x00008000) &&
                delSensorControlElementPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType.getDefaultInstance()) {
              delSensorControlElementPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType.newBuilder(delSensorControlElementPassportType_).mergeFrom(value).buildPartial();
            } else {
              delSensorControlElementPassportType_ = value;
            }
            onChanged();
          } else {
            delSensorControlElementPassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00008000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 49;</code>
         */
        public Builder clearDelSensorControlElementPassportType() {
          if (delSensorControlElementPassportTypeBuilder_ == null) {
            delSensorControlElementPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType.getDefaultInstance();
            onChanged();
          } else {
            delSensorControlElementPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00008000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 49;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType.Builder getDelSensorControlElementPassportTypeBuilder() {
          bitField1_ |= 0x00008000;
          onChanged();
          return getDelSensorControlElementPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 49;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportTypeOrBuilder getDelSensorControlElementPassportTypeOrBuilder() {
          if (delSensorControlElementPassportTypeBuilder_ != null) {
            return delSensorControlElementPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return delSensorControlElementPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelSensorControlElementPassportType del_sensor_control_element_passport_type = 49;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportTypeOrBuilder> 
            getDelSensorControlElementPassportTypeFieldBuilder() {
          if (delSensorControlElementPassportTypeBuilder_ == null) {
            delSensorControlElementPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelSensorControlElementPassportTypeOrBuilder>(
                    delSensorControlElementPassportType_,
                    getParentForChildren(),
                    isClean());
            delSensorControlElementPassportType_ = null;
          }
          return delSensorControlElementPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 50;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference addGeneralPurposeReference_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceOrBuilder> addGeneralPurposeReferenceBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 50;</code>
         */
        public boolean hasAddGeneralPurposeReference() {
          return ((bitField1_ & 0x00010000) == 0x00010000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 50;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference getAddGeneralPurposeReference() {
          if (addGeneralPurposeReferenceBuilder_ == null) {
            return addGeneralPurposeReference_;
          } else {
            return addGeneralPurposeReferenceBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 50;</code>
         */
        public Builder setAddGeneralPurposeReference(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference value) {
          if (addGeneralPurposeReferenceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addGeneralPurposeReference_ = value;
            onChanged();
          } else {
            addGeneralPurposeReferenceBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00010000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 50;</code>
         */
        public Builder setAddGeneralPurposeReference(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference.Builder builderForValue) {
          if (addGeneralPurposeReferenceBuilder_ == null) {
            addGeneralPurposeReference_ = builderForValue.build();
            onChanged();
          } else {
            addGeneralPurposeReferenceBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00010000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 50;</code>
         */
        public Builder mergeAddGeneralPurposeReference(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference value) {
          if (addGeneralPurposeReferenceBuilder_ == null) {
            if (((bitField1_ & 0x00010000) == 0x00010000) &&
                addGeneralPurposeReference_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference.getDefaultInstance()) {
              addGeneralPurposeReference_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference.newBuilder(addGeneralPurposeReference_).mergeFrom(value).buildPartial();
            } else {
              addGeneralPurposeReference_ = value;
            }
            onChanged();
          } else {
            addGeneralPurposeReferenceBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00010000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 50;</code>
         */
        public Builder clearAddGeneralPurposeReference() {
          if (addGeneralPurposeReferenceBuilder_ == null) {
            addGeneralPurposeReference_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference.getDefaultInstance();
            onChanged();
          } else {
            addGeneralPurposeReferenceBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00010000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 50;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference.Builder getAddGeneralPurposeReferenceBuilder() {
          bitField1_ |= 0x00010000;
          onChanged();
          return getAddGeneralPurposeReferenceFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 50;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceOrBuilder getAddGeneralPurposeReferenceOrBuilder() {
          if (addGeneralPurposeReferenceBuilder_ != null) {
            return addGeneralPurposeReferenceBuilder_.getMessageOrBuilder();
          } else {
            return addGeneralPurposeReference_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReference add_general_purpose_reference = 50;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceOrBuilder> 
            getAddGeneralPurposeReferenceFieldBuilder() {
          if (addGeneralPurposeReferenceBuilder_ == null) {
            addGeneralPurposeReferenceBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReference.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceOrBuilder>(
                    addGeneralPurposeReference_,
                    getParentForChildren(),
                    isClean());
            addGeneralPurposeReference_ = null;
          }
          return addGeneralPurposeReferenceBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReference upd_general_purpose_reference = 51;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference updGeneralPurposeReference_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceOrBuilder> updGeneralPurposeReferenceBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReference upd_general_purpose_reference = 51;</code>
         */
        public boolean hasUpdGeneralPurposeReference() {
          return ((bitField1_ & 0x00020000) == 0x00020000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReference upd_general_purpose_reference = 51;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference getUpdGeneralPurposeReference() {
          if (updGeneralPurposeReferenceBuilder_ == null) {
            return updGeneralPurposeReference_;
          } else {
            return updGeneralPurposeReferenceBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReference upd_general_purpose_reference = 51;</code>
         */
        public Builder setUpdGeneralPurposeReference(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference value) {
          if (updGeneralPurposeReferenceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updGeneralPurposeReference_ = value;
            onChanged();
          } else {
            updGeneralPurposeReferenceBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00020000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReference upd_general_purpose_reference = 51;</code>
         */
        public Builder setUpdGeneralPurposeReference(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference.Builder builderForValue) {
          if (updGeneralPurposeReferenceBuilder_ == null) {
            updGeneralPurposeReference_ = builderForValue.build();
            onChanged();
          } else {
            updGeneralPurposeReferenceBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00020000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReference upd_general_purpose_reference = 51;</code>
         */
        public Builder mergeUpdGeneralPurposeReference(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference value) {
          if (updGeneralPurposeReferenceBuilder_ == null) {
            if (((bitField1_ & 0x00020000) == 0x00020000) &&
                updGeneralPurposeReference_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference.getDefaultInstance()) {
              updGeneralPurposeReference_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference.newBuilder(updGeneralPurposeReference_).mergeFrom(value).buildPartial();
            } else {
              updGeneralPurposeReference_ = value;
            }
            onChanged();
          } else {
            updGeneralPurposeReferenceBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00020000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReference upd_general_purpose_reference = 51;</code>
         */
        public Builder clearUpdGeneralPurposeReference() {
          if (updGeneralPurposeReferenceBuilder_ == null) {
            updGeneralPurposeReference_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference.getDefaultInstance();
            onChanged();
          } else {
            updGeneralPurposeReferenceBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00020000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReference upd_general_purpose_reference = 51;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference.Builder getUpdGeneralPurposeReferenceBuilder() {
          bitField1_ |= 0x00020000;
          onChanged();
          return getUpdGeneralPurposeReferenceFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReference upd_general_purpose_reference = 51;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceOrBuilder getUpdGeneralPurposeReferenceOrBuilder() {
          if (updGeneralPurposeReferenceBuilder_ != null) {
            return updGeneralPurposeReferenceBuilder_.getMessageOrBuilder();
          } else {
            return updGeneralPurposeReference_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReference upd_general_purpose_reference = 51;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceOrBuilder> 
            getUpdGeneralPurposeReferenceFieldBuilder() {
          if (updGeneralPurposeReferenceBuilder_ == null) {
            updGeneralPurposeReferenceBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReference.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceOrBuilder>(
                    updGeneralPurposeReference_,
                    getParentForChildren(),
                    isClean());
            updGeneralPurposeReference_ = null;
          }
          return updGeneralPurposeReferenceBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 52;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference delGeneralPurposeReference_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceOrBuilder> delGeneralPurposeReferenceBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 52;</code>
         */
        public boolean hasDelGeneralPurposeReference() {
          return ((bitField1_ & 0x00040000) == 0x00040000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 52;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference getDelGeneralPurposeReference() {
          if (delGeneralPurposeReferenceBuilder_ == null) {
            return delGeneralPurposeReference_;
          } else {
            return delGeneralPurposeReferenceBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 52;</code>
         */
        public Builder setDelGeneralPurposeReference(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference value) {
          if (delGeneralPurposeReferenceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            delGeneralPurposeReference_ = value;
            onChanged();
          } else {
            delGeneralPurposeReferenceBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00040000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 52;</code>
         */
        public Builder setDelGeneralPurposeReference(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference.Builder builderForValue) {
          if (delGeneralPurposeReferenceBuilder_ == null) {
            delGeneralPurposeReference_ = builderForValue.build();
            onChanged();
          } else {
            delGeneralPurposeReferenceBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00040000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 52;</code>
         */
        public Builder mergeDelGeneralPurposeReference(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference value) {
          if (delGeneralPurposeReferenceBuilder_ == null) {
            if (((bitField1_ & 0x00040000) == 0x00040000) &&
                delGeneralPurposeReference_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference.getDefaultInstance()) {
              delGeneralPurposeReference_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference.newBuilder(delGeneralPurposeReference_).mergeFrom(value).buildPartial();
            } else {
              delGeneralPurposeReference_ = value;
            }
            onChanged();
          } else {
            delGeneralPurposeReferenceBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00040000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 52;</code>
         */
        public Builder clearDelGeneralPurposeReference() {
          if (delGeneralPurposeReferenceBuilder_ == null) {
            delGeneralPurposeReference_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference.getDefaultInstance();
            onChanged();
          } else {
            delGeneralPurposeReferenceBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00040000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 52;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference.Builder getDelGeneralPurposeReferenceBuilder() {
          bitField1_ |= 0x00040000;
          onChanged();
          return getDelGeneralPurposeReferenceFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 52;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceOrBuilder getDelGeneralPurposeReferenceOrBuilder() {
          if (delGeneralPurposeReferenceBuilder_ != null) {
            return delGeneralPurposeReferenceBuilder_.getMessageOrBuilder();
          } else {
            return delGeneralPurposeReference_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReference del_general_purpose_reference = 52;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceOrBuilder> 
            getDelGeneralPurposeReferenceFieldBuilder() {
          if (delGeneralPurposeReferenceBuilder_ == null) {
            delGeneralPurposeReferenceBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReference.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceOrBuilder>(
                    delGeneralPurposeReference_,
                    getParentForChildren(),
                    isClean());
            delGeneralPurposeReference_ = null;
          }
          return delGeneralPurposeReferenceBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 53;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord addGeneralPurposeReferenceRecord_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecordOrBuilder> addGeneralPurposeReferenceRecordBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 53;</code>
         */
        public boolean hasAddGeneralPurposeReferenceRecord() {
          return ((bitField1_ & 0x00080000) == 0x00080000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 53;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord getAddGeneralPurposeReferenceRecord() {
          if (addGeneralPurposeReferenceRecordBuilder_ == null) {
            return addGeneralPurposeReferenceRecord_;
          } else {
            return addGeneralPurposeReferenceRecordBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 53;</code>
         */
        public Builder setAddGeneralPurposeReferenceRecord(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord value) {
          if (addGeneralPurposeReferenceRecordBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addGeneralPurposeReferenceRecord_ = value;
            onChanged();
          } else {
            addGeneralPurposeReferenceRecordBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00080000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 53;</code>
         */
        public Builder setAddGeneralPurposeReferenceRecord(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord.Builder builderForValue) {
          if (addGeneralPurposeReferenceRecordBuilder_ == null) {
            addGeneralPurposeReferenceRecord_ = builderForValue.build();
            onChanged();
          } else {
            addGeneralPurposeReferenceRecordBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00080000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 53;</code>
         */
        public Builder mergeAddGeneralPurposeReferenceRecord(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord value) {
          if (addGeneralPurposeReferenceRecordBuilder_ == null) {
            if (((bitField1_ & 0x00080000) == 0x00080000) &&
                addGeneralPurposeReferenceRecord_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord.getDefaultInstance()) {
              addGeneralPurposeReferenceRecord_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord.newBuilder(addGeneralPurposeReferenceRecord_).mergeFrom(value).buildPartial();
            } else {
              addGeneralPurposeReferenceRecord_ = value;
            }
            onChanged();
          } else {
            addGeneralPurposeReferenceRecordBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00080000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 53;</code>
         */
        public Builder clearAddGeneralPurposeReferenceRecord() {
          if (addGeneralPurposeReferenceRecordBuilder_ == null) {
            addGeneralPurposeReferenceRecord_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord.getDefaultInstance();
            onChanged();
          } else {
            addGeneralPurposeReferenceRecordBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00080000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 53;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord.Builder getAddGeneralPurposeReferenceRecordBuilder() {
          bitField1_ |= 0x00080000;
          onChanged();
          return getAddGeneralPurposeReferenceRecordFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 53;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecordOrBuilder getAddGeneralPurposeReferenceRecordOrBuilder() {
          if (addGeneralPurposeReferenceRecordBuilder_ != null) {
            return addGeneralPurposeReferenceRecordBuilder_.getMessageOrBuilder();
          } else {
            return addGeneralPurposeReferenceRecord_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddGeneralPurposeReferenceRecord add_general_purpose_reference_record = 53;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecordOrBuilder> 
            getAddGeneralPurposeReferenceRecordFieldBuilder() {
          if (addGeneralPurposeReferenceRecordBuilder_ == null) {
            addGeneralPurposeReferenceRecordBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecord.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddGeneralPurposeReferenceRecordOrBuilder>(
                    addGeneralPurposeReferenceRecord_,
                    getParentForChildren(),
                    isClean());
            addGeneralPurposeReferenceRecord_ = null;
          }
          return addGeneralPurposeReferenceRecordBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 54;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord updGeneralPurposeReferenceRecord_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecordOrBuilder> updGeneralPurposeReferenceRecordBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 54;</code>
         */
        public boolean hasUpdGeneralPurposeReferenceRecord() {
          return ((bitField1_ & 0x00100000) == 0x00100000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 54;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord getUpdGeneralPurposeReferenceRecord() {
          if (updGeneralPurposeReferenceRecordBuilder_ == null) {
            return updGeneralPurposeReferenceRecord_;
          } else {
            return updGeneralPurposeReferenceRecordBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 54;</code>
         */
        public Builder setUpdGeneralPurposeReferenceRecord(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord value) {
          if (updGeneralPurposeReferenceRecordBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updGeneralPurposeReferenceRecord_ = value;
            onChanged();
          } else {
            updGeneralPurposeReferenceRecordBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00100000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 54;</code>
         */
        public Builder setUpdGeneralPurposeReferenceRecord(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord.Builder builderForValue) {
          if (updGeneralPurposeReferenceRecordBuilder_ == null) {
            updGeneralPurposeReferenceRecord_ = builderForValue.build();
            onChanged();
          } else {
            updGeneralPurposeReferenceRecordBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00100000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 54;</code>
         */
        public Builder mergeUpdGeneralPurposeReferenceRecord(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord value) {
          if (updGeneralPurposeReferenceRecordBuilder_ == null) {
            if (((bitField1_ & 0x00100000) == 0x00100000) &&
                updGeneralPurposeReferenceRecord_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord.getDefaultInstance()) {
              updGeneralPurposeReferenceRecord_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord.newBuilder(updGeneralPurposeReferenceRecord_).mergeFrom(value).buildPartial();
            } else {
              updGeneralPurposeReferenceRecord_ = value;
            }
            onChanged();
          } else {
            updGeneralPurposeReferenceRecordBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00100000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 54;</code>
         */
        public Builder clearUpdGeneralPurposeReferenceRecord() {
          if (updGeneralPurposeReferenceRecordBuilder_ == null) {
            updGeneralPurposeReferenceRecord_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord.getDefaultInstance();
            onChanged();
          } else {
            updGeneralPurposeReferenceRecordBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00100000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 54;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord.Builder getUpdGeneralPurposeReferenceRecordBuilder() {
          bitField1_ |= 0x00100000;
          onChanged();
          return getUpdGeneralPurposeReferenceRecordFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 54;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecordOrBuilder getUpdGeneralPurposeReferenceRecordOrBuilder() {
          if (updGeneralPurposeReferenceRecordBuilder_ != null) {
            return updGeneralPurposeReferenceRecordBuilder_.getMessageOrBuilder();
          } else {
            return updGeneralPurposeReferenceRecord_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdGeneralPurposeReferenceRecord upd_general_purpose_reference_record = 54;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecordOrBuilder> 
            getUpdGeneralPurposeReferenceRecordFieldBuilder() {
          if (updGeneralPurposeReferenceRecordBuilder_ == null) {
            updGeneralPurposeReferenceRecordBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecord.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdGeneralPurposeReferenceRecordOrBuilder>(
                    updGeneralPurposeReferenceRecord_,
                    getParentForChildren(),
                    isClean());
            updGeneralPurposeReferenceRecord_ = null;
          }
          return updGeneralPurposeReferenceRecordBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 55;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord delGeneralPurposeReferenceRecord_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecordOrBuilder> delGeneralPurposeReferenceRecordBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 55;</code>
         */
        public boolean hasDelGeneralPurposeReferenceRecord() {
          return ((bitField1_ & 0x00200000) == 0x00200000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 55;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord getDelGeneralPurposeReferenceRecord() {
          if (delGeneralPurposeReferenceRecordBuilder_ == null) {
            return delGeneralPurposeReferenceRecord_;
          } else {
            return delGeneralPurposeReferenceRecordBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 55;</code>
         */
        public Builder setDelGeneralPurposeReferenceRecord(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord value) {
          if (delGeneralPurposeReferenceRecordBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            delGeneralPurposeReferenceRecord_ = value;
            onChanged();
          } else {
            delGeneralPurposeReferenceRecordBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00200000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 55;</code>
         */
        public Builder setDelGeneralPurposeReferenceRecord(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord.Builder builderForValue) {
          if (delGeneralPurposeReferenceRecordBuilder_ == null) {
            delGeneralPurposeReferenceRecord_ = builderForValue.build();
            onChanged();
          } else {
            delGeneralPurposeReferenceRecordBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00200000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 55;</code>
         */
        public Builder mergeDelGeneralPurposeReferenceRecord(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord value) {
          if (delGeneralPurposeReferenceRecordBuilder_ == null) {
            if (((bitField1_ & 0x00200000) == 0x00200000) &&
                delGeneralPurposeReferenceRecord_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord.getDefaultInstance()) {
              delGeneralPurposeReferenceRecord_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord.newBuilder(delGeneralPurposeReferenceRecord_).mergeFrom(value).buildPartial();
            } else {
              delGeneralPurposeReferenceRecord_ = value;
            }
            onChanged();
          } else {
            delGeneralPurposeReferenceRecordBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00200000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 55;</code>
         */
        public Builder clearDelGeneralPurposeReferenceRecord() {
          if (delGeneralPurposeReferenceRecordBuilder_ == null) {
            delGeneralPurposeReferenceRecord_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord.getDefaultInstance();
            onChanged();
          } else {
            delGeneralPurposeReferenceRecordBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00200000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 55;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord.Builder getDelGeneralPurposeReferenceRecordBuilder() {
          bitField1_ |= 0x00200000;
          onChanged();
          return getDelGeneralPurposeReferenceRecordFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 55;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecordOrBuilder getDelGeneralPurposeReferenceRecordOrBuilder() {
          if (delGeneralPurposeReferenceRecordBuilder_ != null) {
            return delGeneralPurposeReferenceRecordBuilder_.getMessageOrBuilder();
          } else {
            return delGeneralPurposeReferenceRecord_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelGeneralPurposeReferenceRecord del_general_purpose_reference_record = 55;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecordOrBuilder> 
            getDelGeneralPurposeReferenceRecordFieldBuilder() {
          if (delGeneralPurposeReferenceRecordBuilder_ == null) {
            delGeneralPurposeReferenceRecordBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecord.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelGeneralPurposeReferenceRecordOrBuilder>(
                    delGeneralPurposeReferenceRecord_,
                    getParentForChildren(),
                    isClean());
            delGeneralPurposeReferenceRecord_ = null;
          }
          return delGeneralPurposeReferenceRecordBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassportType add_interface_passport_type = 56;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType addInterfacePassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportTypeOrBuilder> addInterfacePassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassportType add_interface_passport_type = 56;</code>
         */
        public boolean hasAddInterfacePassportType() {
          return ((bitField1_ & 0x00400000) == 0x00400000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassportType add_interface_passport_type = 56;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType getAddInterfacePassportType() {
          if (addInterfacePassportTypeBuilder_ == null) {
            return addInterfacePassportType_;
          } else {
            return addInterfacePassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassportType add_interface_passport_type = 56;</code>
         */
        public Builder setAddInterfacePassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType value) {
          if (addInterfacePassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addInterfacePassportType_ = value;
            onChanged();
          } else {
            addInterfacePassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00400000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassportType add_interface_passport_type = 56;</code>
         */
        public Builder setAddInterfacePassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType.Builder builderForValue) {
          if (addInterfacePassportTypeBuilder_ == null) {
            addInterfacePassportType_ = builderForValue.build();
            onChanged();
          } else {
            addInterfacePassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00400000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassportType add_interface_passport_type = 56;</code>
         */
        public Builder mergeAddInterfacePassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType value) {
          if (addInterfacePassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x00400000) == 0x00400000) &&
                addInterfacePassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType.getDefaultInstance()) {
              addInterfacePassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType.newBuilder(addInterfacePassportType_).mergeFrom(value).buildPartial();
            } else {
              addInterfacePassportType_ = value;
            }
            onChanged();
          } else {
            addInterfacePassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00400000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassportType add_interface_passport_type = 56;</code>
         */
        public Builder clearAddInterfacePassportType() {
          if (addInterfacePassportTypeBuilder_ == null) {
            addInterfacePassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType.getDefaultInstance();
            onChanged();
          } else {
            addInterfacePassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00400000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassportType add_interface_passport_type = 56;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType.Builder getAddInterfacePassportTypeBuilder() {
          bitField1_ |= 0x00400000;
          onChanged();
          return getAddInterfacePassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassportType add_interface_passport_type = 56;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportTypeOrBuilder getAddInterfacePassportTypeOrBuilder() {
          if (addInterfacePassportTypeBuilder_ != null) {
            return addInterfacePassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return addInterfacePassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddInterfacePassportType add_interface_passport_type = 56;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportTypeOrBuilder> 
            getAddInterfacePassportTypeFieldBuilder() {
          if (addInterfacePassportTypeBuilder_ == null) {
            addInterfacePassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddInterfacePassportTypeOrBuilder>(
                    addInterfacePassportType_,
                    getParentForChildren(),
                    isClean());
            addInterfacePassportType_ = null;
          }
          return addInterfacePassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassportType upd_interface_passport_type = 57;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType updInterfacePassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportTypeOrBuilder> updInterfacePassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassportType upd_interface_passport_type = 57;</code>
         */
        public boolean hasUpdInterfacePassportType() {
          return ((bitField1_ & 0x00800000) == 0x00800000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassportType upd_interface_passport_type = 57;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType getUpdInterfacePassportType() {
          if (updInterfacePassportTypeBuilder_ == null) {
            return updInterfacePassportType_;
          } else {
            return updInterfacePassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassportType upd_interface_passport_type = 57;</code>
         */
        public Builder setUpdInterfacePassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType value) {
          if (updInterfacePassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updInterfacePassportType_ = value;
            onChanged();
          } else {
            updInterfacePassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x00800000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassportType upd_interface_passport_type = 57;</code>
         */
        public Builder setUpdInterfacePassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType.Builder builderForValue) {
          if (updInterfacePassportTypeBuilder_ == null) {
            updInterfacePassportType_ = builderForValue.build();
            onChanged();
          } else {
            updInterfacePassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x00800000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassportType upd_interface_passport_type = 57;</code>
         */
        public Builder mergeUpdInterfacePassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType value) {
          if (updInterfacePassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x00800000) == 0x00800000) &&
                updInterfacePassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType.getDefaultInstance()) {
              updInterfacePassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType.newBuilder(updInterfacePassportType_).mergeFrom(value).buildPartial();
            } else {
              updInterfacePassportType_ = value;
            }
            onChanged();
          } else {
            updInterfacePassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x00800000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassportType upd_interface_passport_type = 57;</code>
         */
        public Builder clearUpdInterfacePassportType() {
          if (updInterfacePassportTypeBuilder_ == null) {
            updInterfacePassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType.getDefaultInstance();
            onChanged();
          } else {
            updInterfacePassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x00800000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassportType upd_interface_passport_type = 57;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType.Builder getUpdInterfacePassportTypeBuilder() {
          bitField1_ |= 0x00800000;
          onChanged();
          return getUpdInterfacePassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassportType upd_interface_passport_type = 57;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportTypeOrBuilder getUpdInterfacePassportTypeOrBuilder() {
          if (updInterfacePassportTypeBuilder_ != null) {
            return updInterfacePassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return updInterfacePassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdInterfacePassportType upd_interface_passport_type = 57;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportTypeOrBuilder> 
            getUpdInterfacePassportTypeFieldBuilder() {
          if (updInterfacePassportTypeBuilder_ == null) {
            updInterfacePassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdInterfacePassportTypeOrBuilder>(
                    updInterfacePassportType_,
                    getParentForChildren(),
                    isClean());
            updInterfacePassportType_ = null;
          }
          return updInterfacePassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassportType del_interface_passport_type = 58;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType delInterfacePassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportTypeOrBuilder> delInterfacePassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassportType del_interface_passport_type = 58;</code>
         */
        public boolean hasDelInterfacePassportType() {
          return ((bitField1_ & 0x01000000) == 0x01000000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassportType del_interface_passport_type = 58;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType getDelInterfacePassportType() {
          if (delInterfacePassportTypeBuilder_ == null) {
            return delInterfacePassportType_;
          } else {
            return delInterfacePassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassportType del_interface_passport_type = 58;</code>
         */
        public Builder setDelInterfacePassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType value) {
          if (delInterfacePassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            delInterfacePassportType_ = value;
            onChanged();
          } else {
            delInterfacePassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x01000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassportType del_interface_passport_type = 58;</code>
         */
        public Builder setDelInterfacePassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType.Builder builderForValue) {
          if (delInterfacePassportTypeBuilder_ == null) {
            delInterfacePassportType_ = builderForValue.build();
            onChanged();
          } else {
            delInterfacePassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x01000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassportType del_interface_passport_type = 58;</code>
         */
        public Builder mergeDelInterfacePassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType value) {
          if (delInterfacePassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x01000000) == 0x01000000) &&
                delInterfacePassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType.getDefaultInstance()) {
              delInterfacePassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType.newBuilder(delInterfacePassportType_).mergeFrom(value).buildPartial();
            } else {
              delInterfacePassportType_ = value;
            }
            onChanged();
          } else {
            delInterfacePassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x01000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassportType del_interface_passport_type = 58;</code>
         */
        public Builder clearDelInterfacePassportType() {
          if (delInterfacePassportTypeBuilder_ == null) {
            delInterfacePassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType.getDefaultInstance();
            onChanged();
          } else {
            delInterfacePassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x01000000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassportType del_interface_passport_type = 58;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType.Builder getDelInterfacePassportTypeBuilder() {
          bitField1_ |= 0x01000000;
          onChanged();
          return getDelInterfacePassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassportType del_interface_passport_type = 58;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportTypeOrBuilder getDelInterfacePassportTypeOrBuilder() {
          if (delInterfacePassportTypeBuilder_ != null) {
            return delInterfacePassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return delInterfacePassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelInterfacePassportType del_interface_passport_type = 58;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportTypeOrBuilder> 
            getDelInterfacePassportTypeFieldBuilder() {
          if (delInterfacePassportTypeBuilder_ == null) {
            delInterfacePassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelInterfacePassportTypeOrBuilder>(
                    delInterfacePassportType_,
                    getParentForChildren(),
                    isClean());
            delInterfacePassportType_ = null;
          }
          return delInterfacePassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectState upd_control_object_state = 59;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState updControlObjectState_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStateOrBuilder> updControlObjectStateBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectState upd_control_object_state = 59;</code>
         */
        public boolean hasUpdControlObjectState() {
          return ((bitField1_ & 0x02000000) == 0x02000000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectState upd_control_object_state = 59;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState getUpdControlObjectState() {
          if (updControlObjectStateBuilder_ == null) {
            return updControlObjectState_;
          } else {
            return updControlObjectStateBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectState upd_control_object_state = 59;</code>
         */
        public Builder setUpdControlObjectState(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState value) {
          if (updControlObjectStateBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updControlObjectState_ = value;
            onChanged();
          } else {
            updControlObjectStateBuilder_.setMessage(value);
          }
          bitField1_ |= 0x02000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectState upd_control_object_state = 59;</code>
         */
        public Builder setUpdControlObjectState(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState.Builder builderForValue) {
          if (updControlObjectStateBuilder_ == null) {
            updControlObjectState_ = builderForValue.build();
            onChanged();
          } else {
            updControlObjectStateBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x02000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectState upd_control_object_state = 59;</code>
         */
        public Builder mergeUpdControlObjectState(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState value) {
          if (updControlObjectStateBuilder_ == null) {
            if (((bitField1_ & 0x02000000) == 0x02000000) &&
                updControlObjectState_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState.getDefaultInstance()) {
              updControlObjectState_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState.newBuilder(updControlObjectState_).mergeFrom(value).buildPartial();
            } else {
              updControlObjectState_ = value;
            }
            onChanged();
          } else {
            updControlObjectStateBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x02000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectState upd_control_object_state = 59;</code>
         */
        public Builder clearUpdControlObjectState() {
          if (updControlObjectStateBuilder_ == null) {
            updControlObjectState_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState.getDefaultInstance();
            onChanged();
          } else {
            updControlObjectStateBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x02000000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectState upd_control_object_state = 59;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState.Builder getUpdControlObjectStateBuilder() {
          bitField1_ |= 0x02000000;
          onChanged();
          return getUpdControlObjectStateFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectState upd_control_object_state = 59;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStateOrBuilder getUpdControlObjectStateOrBuilder() {
          if (updControlObjectStateBuilder_ != null) {
            return updControlObjectStateBuilder_.getMessageOrBuilder();
          } else {
            return updControlObjectState_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdControlObjectState upd_control_object_state = 59;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStateOrBuilder> 
            getUpdControlObjectStateFieldBuilder() {
          if (updControlObjectStateBuilder_ == null) {
            updControlObjectStateBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectState.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdControlObjectStateOrBuilder>(
                    updControlObjectState_,
                    getParentForChildren(),
                    isClean());
            updControlObjectState_ = null;
          }
          return updControlObjectStateBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentState upd_equipment_state = 60;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState updEquipmentState_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStateOrBuilder> updEquipmentStateBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentState upd_equipment_state = 60;</code>
         */
        public boolean hasUpdEquipmentState() {
          return ((bitField1_ & 0x04000000) == 0x04000000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentState upd_equipment_state = 60;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState getUpdEquipmentState() {
          if (updEquipmentStateBuilder_ == null) {
            return updEquipmentState_;
          } else {
            return updEquipmentStateBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentState upd_equipment_state = 60;</code>
         */
        public Builder setUpdEquipmentState(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState value) {
          if (updEquipmentStateBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updEquipmentState_ = value;
            onChanged();
          } else {
            updEquipmentStateBuilder_.setMessage(value);
          }
          bitField1_ |= 0x04000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentState upd_equipment_state = 60;</code>
         */
        public Builder setUpdEquipmentState(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState.Builder builderForValue) {
          if (updEquipmentStateBuilder_ == null) {
            updEquipmentState_ = builderForValue.build();
            onChanged();
          } else {
            updEquipmentStateBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x04000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentState upd_equipment_state = 60;</code>
         */
        public Builder mergeUpdEquipmentState(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState value) {
          if (updEquipmentStateBuilder_ == null) {
            if (((bitField1_ & 0x04000000) == 0x04000000) &&
                updEquipmentState_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState.getDefaultInstance()) {
              updEquipmentState_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState.newBuilder(updEquipmentState_).mergeFrom(value).buildPartial();
            } else {
              updEquipmentState_ = value;
            }
            onChanged();
          } else {
            updEquipmentStateBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x04000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentState upd_equipment_state = 60;</code>
         */
        public Builder clearUpdEquipmentState() {
          if (updEquipmentStateBuilder_ == null) {
            updEquipmentState_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState.getDefaultInstance();
            onChanged();
          } else {
            updEquipmentStateBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x04000000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentState upd_equipment_state = 60;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState.Builder getUpdEquipmentStateBuilder() {
          bitField1_ |= 0x04000000;
          onChanged();
          return getUpdEquipmentStateFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentState upd_equipment_state = 60;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStateOrBuilder getUpdEquipmentStateOrBuilder() {
          if (updEquipmentStateBuilder_ != null) {
            return updEquipmentStateBuilder_.getMessageOrBuilder();
          } else {
            return updEquipmentState_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentState upd_equipment_state = 60;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStateOrBuilder> 
            getUpdEquipmentStateFieldBuilder() {
          if (updEquipmentStateBuilder_ == null) {
            updEquipmentStateBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentState.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentStateOrBuilder>(
                    updEquipmentState_,
                    getParentForChildren(),
                    isClean());
            updEquipmentState_ = null;
          }
          return updEquipmentStateBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 61;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType addEquipmentLogicalInputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportTypeOrBuilder> addEquipmentLogicalInputPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 61;</code>
         */
        public boolean hasAddEquipmentLogicalInputPassportType() {
          return ((bitField1_ & 0x08000000) == 0x08000000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 61;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType getAddEquipmentLogicalInputPassportType() {
          if (addEquipmentLogicalInputPassportTypeBuilder_ == null) {
            return addEquipmentLogicalInputPassportType_;
          } else {
            return addEquipmentLogicalInputPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 61;</code>
         */
        public Builder setAddEquipmentLogicalInputPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType value) {
          if (addEquipmentLogicalInputPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addEquipmentLogicalInputPassportType_ = value;
            onChanged();
          } else {
            addEquipmentLogicalInputPassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x08000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 61;</code>
         */
        public Builder setAddEquipmentLogicalInputPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType.Builder builderForValue) {
          if (addEquipmentLogicalInputPassportTypeBuilder_ == null) {
            addEquipmentLogicalInputPassportType_ = builderForValue.build();
            onChanged();
          } else {
            addEquipmentLogicalInputPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x08000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 61;</code>
         */
        public Builder mergeAddEquipmentLogicalInputPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType value) {
          if (addEquipmentLogicalInputPassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x08000000) == 0x08000000) &&
                addEquipmentLogicalInputPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType.getDefaultInstance()) {
              addEquipmentLogicalInputPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType.newBuilder(addEquipmentLogicalInputPassportType_).mergeFrom(value).buildPartial();
            } else {
              addEquipmentLogicalInputPassportType_ = value;
            }
            onChanged();
          } else {
            addEquipmentLogicalInputPassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x08000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 61;</code>
         */
        public Builder clearAddEquipmentLogicalInputPassportType() {
          if (addEquipmentLogicalInputPassportTypeBuilder_ == null) {
            addEquipmentLogicalInputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType.getDefaultInstance();
            onChanged();
          } else {
            addEquipmentLogicalInputPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x08000000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 61;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType.Builder getAddEquipmentLogicalInputPassportTypeBuilder() {
          bitField1_ |= 0x08000000;
          onChanged();
          return getAddEquipmentLogicalInputPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 61;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportTypeOrBuilder getAddEquipmentLogicalInputPassportTypeOrBuilder() {
          if (addEquipmentLogicalInputPassportTypeBuilder_ != null) {
            return addEquipmentLogicalInputPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return addEquipmentLogicalInputPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalInputPassportType add_equipment_logical_input_passport_type = 61;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportTypeOrBuilder> 
            getAddEquipmentLogicalInputPassportTypeFieldBuilder() {
          if (addEquipmentLogicalInputPassportTypeBuilder_ == null) {
            addEquipmentLogicalInputPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalInputPassportTypeOrBuilder>(
                    addEquipmentLogicalInputPassportType_,
                    getParentForChildren(),
                    isClean());
            addEquipmentLogicalInputPassportType_ = null;
          }
          return addEquipmentLogicalInputPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 62;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType updEquipmentLogicalInputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportTypeOrBuilder> updEquipmentLogicalInputPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 62;</code>
         */
        public boolean hasUpdEquipmentLogicalInputPassportType() {
          return ((bitField1_ & 0x10000000) == 0x10000000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 62;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType getUpdEquipmentLogicalInputPassportType() {
          if (updEquipmentLogicalInputPassportTypeBuilder_ == null) {
            return updEquipmentLogicalInputPassportType_;
          } else {
            return updEquipmentLogicalInputPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 62;</code>
         */
        public Builder setUpdEquipmentLogicalInputPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType value) {
          if (updEquipmentLogicalInputPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updEquipmentLogicalInputPassportType_ = value;
            onChanged();
          } else {
            updEquipmentLogicalInputPassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x10000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 62;</code>
         */
        public Builder setUpdEquipmentLogicalInputPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType.Builder builderForValue) {
          if (updEquipmentLogicalInputPassportTypeBuilder_ == null) {
            updEquipmentLogicalInputPassportType_ = builderForValue.build();
            onChanged();
          } else {
            updEquipmentLogicalInputPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x10000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 62;</code>
         */
        public Builder mergeUpdEquipmentLogicalInputPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType value) {
          if (updEquipmentLogicalInputPassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x10000000) == 0x10000000) &&
                updEquipmentLogicalInputPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType.getDefaultInstance()) {
              updEquipmentLogicalInputPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType.newBuilder(updEquipmentLogicalInputPassportType_).mergeFrom(value).buildPartial();
            } else {
              updEquipmentLogicalInputPassportType_ = value;
            }
            onChanged();
          } else {
            updEquipmentLogicalInputPassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x10000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 62;</code>
         */
        public Builder clearUpdEquipmentLogicalInputPassportType() {
          if (updEquipmentLogicalInputPassportTypeBuilder_ == null) {
            updEquipmentLogicalInputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType.getDefaultInstance();
            onChanged();
          } else {
            updEquipmentLogicalInputPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x10000000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 62;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType.Builder getUpdEquipmentLogicalInputPassportTypeBuilder() {
          bitField1_ |= 0x10000000;
          onChanged();
          return getUpdEquipmentLogicalInputPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 62;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportTypeOrBuilder getUpdEquipmentLogicalInputPassportTypeOrBuilder() {
          if (updEquipmentLogicalInputPassportTypeBuilder_ != null) {
            return updEquipmentLogicalInputPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return updEquipmentLogicalInputPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalInputPassportType upd_equipment_logical_input_passport_type = 62;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportTypeOrBuilder> 
            getUpdEquipmentLogicalInputPassportTypeFieldBuilder() {
          if (updEquipmentLogicalInputPassportTypeBuilder_ == null) {
            updEquipmentLogicalInputPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalInputPassportTypeOrBuilder>(
                    updEquipmentLogicalInputPassportType_,
                    getParentForChildren(),
                    isClean());
            updEquipmentLogicalInputPassportType_ = null;
          }
          return updEquipmentLogicalInputPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 63;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType delEquipmentLogicalInputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportTypeOrBuilder> delEquipmentLogicalInputPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 63;</code>
         */
        public boolean hasDelEquipmentLogicalInputPassportType() {
          return ((bitField1_ & 0x20000000) == 0x20000000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 63;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType getDelEquipmentLogicalInputPassportType() {
          if (delEquipmentLogicalInputPassportTypeBuilder_ == null) {
            return delEquipmentLogicalInputPassportType_;
          } else {
            return delEquipmentLogicalInputPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 63;</code>
         */
        public Builder setDelEquipmentLogicalInputPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType value) {
          if (delEquipmentLogicalInputPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            delEquipmentLogicalInputPassportType_ = value;
            onChanged();
          } else {
            delEquipmentLogicalInputPassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x20000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 63;</code>
         */
        public Builder setDelEquipmentLogicalInputPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType.Builder builderForValue) {
          if (delEquipmentLogicalInputPassportTypeBuilder_ == null) {
            delEquipmentLogicalInputPassportType_ = builderForValue.build();
            onChanged();
          } else {
            delEquipmentLogicalInputPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x20000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 63;</code>
         */
        public Builder mergeDelEquipmentLogicalInputPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType value) {
          if (delEquipmentLogicalInputPassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x20000000) == 0x20000000) &&
                delEquipmentLogicalInputPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType.getDefaultInstance()) {
              delEquipmentLogicalInputPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType.newBuilder(delEquipmentLogicalInputPassportType_).mergeFrom(value).buildPartial();
            } else {
              delEquipmentLogicalInputPassportType_ = value;
            }
            onChanged();
          } else {
            delEquipmentLogicalInputPassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x20000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 63;</code>
         */
        public Builder clearDelEquipmentLogicalInputPassportType() {
          if (delEquipmentLogicalInputPassportTypeBuilder_ == null) {
            delEquipmentLogicalInputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType.getDefaultInstance();
            onChanged();
          } else {
            delEquipmentLogicalInputPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x20000000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 63;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType.Builder getDelEquipmentLogicalInputPassportTypeBuilder() {
          bitField1_ |= 0x20000000;
          onChanged();
          return getDelEquipmentLogicalInputPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 63;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportTypeOrBuilder getDelEquipmentLogicalInputPassportTypeOrBuilder() {
          if (delEquipmentLogicalInputPassportTypeBuilder_ != null) {
            return delEquipmentLogicalInputPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return delEquipmentLogicalInputPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalInputPassportType del_equipment_logical_input_passport_type = 63;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportTypeOrBuilder> 
            getDelEquipmentLogicalInputPassportTypeFieldBuilder() {
          if (delEquipmentLogicalInputPassportTypeBuilder_ == null) {
            delEquipmentLogicalInputPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalInputPassportTypeOrBuilder>(
                    delEquipmentLogicalInputPassportType_,
                    getParentForChildren(),
                    isClean());
            delEquipmentLogicalInputPassportType_ = null;
          }
          return delEquipmentLogicalInputPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 64;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType addEquipmentLogicalOutputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportTypeOrBuilder> addEquipmentLogicalOutputPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 64;</code>
         */
        public boolean hasAddEquipmentLogicalOutputPassportType() {
          return ((bitField1_ & 0x40000000) == 0x40000000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 64;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType getAddEquipmentLogicalOutputPassportType() {
          if (addEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            return addEquipmentLogicalOutputPassportType_;
          } else {
            return addEquipmentLogicalOutputPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 64;</code>
         */
        public Builder setAddEquipmentLogicalOutputPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType value) {
          if (addEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addEquipmentLogicalOutputPassportType_ = value;
            onChanged();
          } else {
            addEquipmentLogicalOutputPassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x40000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 64;</code>
         */
        public Builder setAddEquipmentLogicalOutputPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType.Builder builderForValue) {
          if (addEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            addEquipmentLogicalOutputPassportType_ = builderForValue.build();
            onChanged();
          } else {
            addEquipmentLogicalOutputPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x40000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 64;</code>
         */
        public Builder mergeAddEquipmentLogicalOutputPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType value) {
          if (addEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x40000000) == 0x40000000) &&
                addEquipmentLogicalOutputPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType.getDefaultInstance()) {
              addEquipmentLogicalOutputPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType.newBuilder(addEquipmentLogicalOutputPassportType_).mergeFrom(value).buildPartial();
            } else {
              addEquipmentLogicalOutputPassportType_ = value;
            }
            onChanged();
          } else {
            addEquipmentLogicalOutputPassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x40000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 64;</code>
         */
        public Builder clearAddEquipmentLogicalOutputPassportType() {
          if (addEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            addEquipmentLogicalOutputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType.getDefaultInstance();
            onChanged();
          } else {
            addEquipmentLogicalOutputPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x40000000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 64;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType.Builder getAddEquipmentLogicalOutputPassportTypeBuilder() {
          bitField1_ |= 0x40000000;
          onChanged();
          return getAddEquipmentLogicalOutputPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 64;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportTypeOrBuilder getAddEquipmentLogicalOutputPassportTypeOrBuilder() {
          if (addEquipmentLogicalOutputPassportTypeBuilder_ != null) {
            return addEquipmentLogicalOutputPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return addEquipmentLogicalOutputPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentLogicalOutputPassportType add_equipment_logical_output_passport_type = 64;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportTypeOrBuilder> 
            getAddEquipmentLogicalOutputPassportTypeFieldBuilder() {
          if (addEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            addEquipmentLogicalOutputPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentLogicalOutputPassportTypeOrBuilder>(
                    addEquipmentLogicalOutputPassportType_,
                    getParentForChildren(),
                    isClean());
            addEquipmentLogicalOutputPassportType_ = null;
          }
          return addEquipmentLogicalOutputPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 65;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType updEquipmentLogicalOutputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportTypeOrBuilder> updEquipmentLogicalOutputPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 65;</code>
         */
        public boolean hasUpdEquipmentLogicalOutputPassportType() {
          return ((bitField1_ & 0x80000000) == 0x80000000);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 65;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType getUpdEquipmentLogicalOutputPassportType() {
          if (updEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            return updEquipmentLogicalOutputPassportType_;
          } else {
            return updEquipmentLogicalOutputPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 65;</code>
         */
        public Builder setUpdEquipmentLogicalOutputPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType value) {
          if (updEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updEquipmentLogicalOutputPassportType_ = value;
            onChanged();
          } else {
            updEquipmentLogicalOutputPassportTypeBuilder_.setMessage(value);
          }
          bitField1_ |= 0x80000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 65;</code>
         */
        public Builder setUpdEquipmentLogicalOutputPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType.Builder builderForValue) {
          if (updEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            updEquipmentLogicalOutputPassportType_ = builderForValue.build();
            onChanged();
          } else {
            updEquipmentLogicalOutputPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField1_ |= 0x80000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 65;</code>
         */
        public Builder mergeUpdEquipmentLogicalOutputPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType value) {
          if (updEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            if (((bitField1_ & 0x80000000) == 0x80000000) &&
                updEquipmentLogicalOutputPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType.getDefaultInstance()) {
              updEquipmentLogicalOutputPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType.newBuilder(updEquipmentLogicalOutputPassportType_).mergeFrom(value).buildPartial();
            } else {
              updEquipmentLogicalOutputPassportType_ = value;
            }
            onChanged();
          } else {
            updEquipmentLogicalOutputPassportTypeBuilder_.mergeFrom(value);
          }
          bitField1_ |= 0x80000000;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 65;</code>
         */
        public Builder clearUpdEquipmentLogicalOutputPassportType() {
          if (updEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            updEquipmentLogicalOutputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType.getDefaultInstance();
            onChanged();
          } else {
            updEquipmentLogicalOutputPassportTypeBuilder_.clear();
          }
          bitField1_ = (bitField1_ & ~0x80000000);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 65;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType.Builder getUpdEquipmentLogicalOutputPassportTypeBuilder() {
          bitField1_ |= 0x80000000;
          onChanged();
          return getUpdEquipmentLogicalOutputPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 65;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportTypeOrBuilder getUpdEquipmentLogicalOutputPassportTypeOrBuilder() {
          if (updEquipmentLogicalOutputPassportTypeBuilder_ != null) {
            return updEquipmentLogicalOutputPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return updEquipmentLogicalOutputPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentLogicalOutputPassportType upd_equipment_logical_output_passport_type = 65;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportTypeOrBuilder> 
            getUpdEquipmentLogicalOutputPassportTypeFieldBuilder() {
          if (updEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            updEquipmentLogicalOutputPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentLogicalOutputPassportTypeOrBuilder>(
                    updEquipmentLogicalOutputPassportType_,
                    getParentForChildren(),
                    isClean());
            updEquipmentLogicalOutputPassportType_ = null;
          }
          return updEquipmentLogicalOutputPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 66;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType delEquipmentLogicalOutputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportTypeOrBuilder> delEquipmentLogicalOutputPassportTypeBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 66;</code>
         */
        public boolean hasDelEquipmentLogicalOutputPassportType() {
          return ((bitField2_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 66;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType getDelEquipmentLogicalOutputPassportType() {
          if (delEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            return delEquipmentLogicalOutputPassportType_;
          } else {
            return delEquipmentLogicalOutputPassportTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 66;</code>
         */
        public Builder setDelEquipmentLogicalOutputPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType value) {
          if (delEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            delEquipmentLogicalOutputPassportType_ = value;
            onChanged();
          } else {
            delEquipmentLogicalOutputPassportTypeBuilder_.setMessage(value);
          }
          bitField2_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 66;</code>
         */
        public Builder setDelEquipmentLogicalOutputPassportType(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType.Builder builderForValue) {
          if (delEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            delEquipmentLogicalOutputPassportType_ = builderForValue.build();
            onChanged();
          } else {
            delEquipmentLogicalOutputPassportTypeBuilder_.setMessage(builderForValue.build());
          }
          bitField2_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 66;</code>
         */
        public Builder mergeDelEquipmentLogicalOutputPassportType(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType value) {
          if (delEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            if (((bitField2_ & 0x00000001) == 0x00000001) &&
                delEquipmentLogicalOutputPassportType_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType.getDefaultInstance()) {
              delEquipmentLogicalOutputPassportType_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType.newBuilder(delEquipmentLogicalOutputPassportType_).mergeFrom(value).buildPartial();
            } else {
              delEquipmentLogicalOutputPassportType_ = value;
            }
            onChanged();
          } else {
            delEquipmentLogicalOutputPassportTypeBuilder_.mergeFrom(value);
          }
          bitField2_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 66;</code>
         */
        public Builder clearDelEquipmentLogicalOutputPassportType() {
          if (delEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            delEquipmentLogicalOutputPassportType_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType.getDefaultInstance();
            onChanged();
          } else {
            delEquipmentLogicalOutputPassportTypeBuilder_.clear();
          }
          bitField2_ = (bitField2_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 66;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType.Builder getDelEquipmentLogicalOutputPassportTypeBuilder() {
          bitField2_ |= 0x00000001;
          onChanged();
          return getDelEquipmentLogicalOutputPassportTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 66;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportTypeOrBuilder getDelEquipmentLogicalOutputPassportTypeOrBuilder() {
          if (delEquipmentLogicalOutputPassportTypeBuilder_ != null) {
            return delEquipmentLogicalOutputPassportTypeBuilder_.getMessageOrBuilder();
          } else {
            return delEquipmentLogicalOutputPassportType_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentLogicalOutputPassportType del_equipment_logical_output_passport_type = 66;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportTypeOrBuilder> 
            getDelEquipmentLogicalOutputPassportTypeFieldBuilder() {
          if (delEquipmentLogicalOutputPassportTypeBuilder_ == null) {
            delEquipmentLogicalOutputPassportTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportType.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentLogicalOutputPassportTypeOrBuilder>(
                    delEquipmentLogicalOutputPassportType_,
                    getParentForChildren(),
                    isClean());
            delEquipmentLogicalOutputPassportType_ = null;
          }
          return delEquipmentLogicalOutputPassportTypeBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 67;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport addEquipmentFirmwarePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassportOrBuilder> addEquipmentFirmwarePassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 67;</code>
         */
        public boolean hasAddEquipmentFirmwarePassport() {
          return ((bitField2_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 67;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport getAddEquipmentFirmwarePassport() {
          if (addEquipmentFirmwarePassportBuilder_ == null) {
            return addEquipmentFirmwarePassport_;
          } else {
            return addEquipmentFirmwarePassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 67;</code>
         */
        public Builder setAddEquipmentFirmwarePassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport value) {
          if (addEquipmentFirmwarePassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addEquipmentFirmwarePassport_ = value;
            onChanged();
          } else {
            addEquipmentFirmwarePassportBuilder_.setMessage(value);
          }
          bitField2_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 67;</code>
         */
        public Builder setAddEquipmentFirmwarePassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport.Builder builderForValue) {
          if (addEquipmentFirmwarePassportBuilder_ == null) {
            addEquipmentFirmwarePassport_ = builderForValue.build();
            onChanged();
          } else {
            addEquipmentFirmwarePassportBuilder_.setMessage(builderForValue.build());
          }
          bitField2_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 67;</code>
         */
        public Builder mergeAddEquipmentFirmwarePassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport value) {
          if (addEquipmentFirmwarePassportBuilder_ == null) {
            if (((bitField2_ & 0x00000002) == 0x00000002) &&
                addEquipmentFirmwarePassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport.getDefaultInstance()) {
              addEquipmentFirmwarePassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport.newBuilder(addEquipmentFirmwarePassport_).mergeFrom(value).buildPartial();
            } else {
              addEquipmentFirmwarePassport_ = value;
            }
            onChanged();
          } else {
            addEquipmentFirmwarePassportBuilder_.mergeFrom(value);
          }
          bitField2_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 67;</code>
         */
        public Builder clearAddEquipmentFirmwarePassport() {
          if (addEquipmentFirmwarePassportBuilder_ == null) {
            addEquipmentFirmwarePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport.getDefaultInstance();
            onChanged();
          } else {
            addEquipmentFirmwarePassportBuilder_.clear();
          }
          bitField2_ = (bitField2_ & ~0x00000002);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 67;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport.Builder getAddEquipmentFirmwarePassportBuilder() {
          bitField2_ |= 0x00000002;
          onChanged();
          return getAddEquipmentFirmwarePassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 67;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassportOrBuilder getAddEquipmentFirmwarePassportOrBuilder() {
          if (addEquipmentFirmwarePassportBuilder_ != null) {
            return addEquipmentFirmwarePassportBuilder_.getMessageOrBuilder();
          } else {
            return addEquipmentFirmwarePassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.AddEquipmentFirmwarePassport add_equipment_firmware_passport = 67;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassportOrBuilder> 
            getAddEquipmentFirmwarePassportFieldBuilder() {
          if (addEquipmentFirmwarePassportBuilder_ == null) {
            addEquipmentFirmwarePassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.AddEquipmentFirmwarePassportOrBuilder>(
                    addEquipmentFirmwarePassport_,
                    getParentForChildren(),
                    isClean());
            addEquipmentFirmwarePassport_ = null;
          }
          return addEquipmentFirmwarePassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 68;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport updEquipmentFirmwarePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassportOrBuilder> updEquipmentFirmwarePassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 68;</code>
         */
        public boolean hasUpdEquipmentFirmwarePassport() {
          return ((bitField2_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 68;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport getUpdEquipmentFirmwarePassport() {
          if (updEquipmentFirmwarePassportBuilder_ == null) {
            return updEquipmentFirmwarePassport_;
          } else {
            return updEquipmentFirmwarePassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 68;</code>
         */
        public Builder setUpdEquipmentFirmwarePassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport value) {
          if (updEquipmentFirmwarePassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            updEquipmentFirmwarePassport_ = value;
            onChanged();
          } else {
            updEquipmentFirmwarePassportBuilder_.setMessage(value);
          }
          bitField2_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 68;</code>
         */
        public Builder setUpdEquipmentFirmwarePassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport.Builder builderForValue) {
          if (updEquipmentFirmwarePassportBuilder_ == null) {
            updEquipmentFirmwarePassport_ = builderForValue.build();
            onChanged();
          } else {
            updEquipmentFirmwarePassportBuilder_.setMessage(builderForValue.build());
          }
          bitField2_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 68;</code>
         */
        public Builder mergeUpdEquipmentFirmwarePassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport value) {
          if (updEquipmentFirmwarePassportBuilder_ == null) {
            if (((bitField2_ & 0x00000004) == 0x00000004) &&
                updEquipmentFirmwarePassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport.getDefaultInstance()) {
              updEquipmentFirmwarePassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport.newBuilder(updEquipmentFirmwarePassport_).mergeFrom(value).buildPartial();
            } else {
              updEquipmentFirmwarePassport_ = value;
            }
            onChanged();
          } else {
            updEquipmentFirmwarePassportBuilder_.mergeFrom(value);
          }
          bitField2_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 68;</code>
         */
        public Builder clearUpdEquipmentFirmwarePassport() {
          if (updEquipmentFirmwarePassportBuilder_ == null) {
            updEquipmentFirmwarePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport.getDefaultInstance();
            onChanged();
          } else {
            updEquipmentFirmwarePassportBuilder_.clear();
          }
          bitField2_ = (bitField2_ & ~0x00000004);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 68;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport.Builder getUpdEquipmentFirmwarePassportBuilder() {
          bitField2_ |= 0x00000004;
          onChanged();
          return getUpdEquipmentFirmwarePassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 68;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassportOrBuilder getUpdEquipmentFirmwarePassportOrBuilder() {
          if (updEquipmentFirmwarePassportBuilder_ != null) {
            return updEquipmentFirmwarePassportBuilder_.getMessageOrBuilder();
          } else {
            return updEquipmentFirmwarePassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.UpdEquipmentFirmwarePassport upd_equipment_firmware_passport = 68;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassportOrBuilder> 
            getUpdEquipmentFirmwarePassportFieldBuilder() {
          if (updEquipmentFirmwarePassportBuilder_ == null) {
            updEquipmentFirmwarePassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.UpdEquipmentFirmwarePassportOrBuilder>(
                    updEquipmentFirmwarePassport_,
                    getParentForChildren(),
                    isClean());
            updEquipmentFirmwarePassport_ = null;
          }
          return updEquipmentFirmwarePassportBuilder_;
        }

        // optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 69;
        private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport delEquipmentFirmwarePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassportOrBuilder> delEquipmentFirmwarePassportBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 69;</code>
         */
        public boolean hasDelEquipmentFirmwarePassport() {
          return ((bitField2_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 69;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport getDelEquipmentFirmwarePassport() {
          if (delEquipmentFirmwarePassportBuilder_ == null) {
            return delEquipmentFirmwarePassport_;
          } else {
            return delEquipmentFirmwarePassportBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 69;</code>
         */
        public Builder setDelEquipmentFirmwarePassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport value) {
          if (delEquipmentFirmwarePassportBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            delEquipmentFirmwarePassport_ = value;
            onChanged();
          } else {
            delEquipmentFirmwarePassportBuilder_.setMessage(value);
          }
          bitField2_ |= 0x00000008;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 69;</code>
         */
        public Builder setDelEquipmentFirmwarePassport(
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport.Builder builderForValue) {
          if (delEquipmentFirmwarePassportBuilder_ == null) {
            delEquipmentFirmwarePassport_ = builderForValue.build();
            onChanged();
          } else {
            delEquipmentFirmwarePassportBuilder_.setMessage(builderForValue.build());
          }
          bitField2_ |= 0x00000008;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 69;</code>
         */
        public Builder mergeDelEquipmentFirmwarePassport(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport value) {
          if (delEquipmentFirmwarePassportBuilder_ == null) {
            if (((bitField2_ & 0x00000008) == 0x00000008) &&
                delEquipmentFirmwarePassport_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport.getDefaultInstance()) {
              delEquipmentFirmwarePassport_ =
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport.newBuilder(delEquipmentFirmwarePassport_).mergeFrom(value).buildPartial();
            } else {
              delEquipmentFirmwarePassport_ = value;
            }
            onChanged();
          } else {
            delEquipmentFirmwarePassportBuilder_.mergeFrom(value);
          }
          bitField2_ |= 0x00000008;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 69;</code>
         */
        public Builder clearDelEquipmentFirmwarePassport() {
          if (delEquipmentFirmwarePassportBuilder_ == null) {
            delEquipmentFirmwarePassport_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport.getDefaultInstance();
            onChanged();
          } else {
            delEquipmentFirmwarePassportBuilder_.clear();
          }
          bitField2_ = (bitField2_ & ~0x00000008);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 69;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport.Builder getDelEquipmentFirmwarePassportBuilder() {
          bitField2_ |= 0x00000008;
          onChanged();
          return getDelEquipmentFirmwarePassportFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 69;</code>
         */
        public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassportOrBuilder getDelEquipmentFirmwarePassportOrBuilder() {
          if (delEquipmentFirmwarePassportBuilder_ != null) {
            return delEquipmentFirmwarePassportBuilder_.getMessageOrBuilder();
          } else {
            return delEquipmentFirmwarePassport_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.RpcProtocol.DelEquipmentFirmwarePassport del_equipment_firmware_passport = 69;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassportOrBuilder> 
            getDelEquipmentFirmwarePassportFieldBuilder() {
          if (delEquipmentFirmwarePassportBuilder_ == null) {
            delEquipmentFirmwarePassportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassport.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.DelEquipmentFirmwarePassportOrBuilder>(
                    delEquipmentFirmwarePassport_,
                    getParentForChildren(),
                    isClean());
            delEquipmentFirmwarePassport_ = null;
          }
          return delEquipmentFirmwarePassportBuilder_;
        }

        // optional .almaz2.rpc.commands.EquipmentAnswerBase equipment_answer = 100;
        private ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentAnswerBase equipmentAnswer_ = ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentAnswerBase.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentAnswerBase, ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentAnswerBase.Builder, ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentAnswerBaseOrBuilder> equipmentAnswerBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.EquipmentAnswerBase equipment_answer = 100;</code>
         *
         * <pre>
         * Ответы на команды для оборудования объекта.
         * </pre>
         */
        public boolean hasEquipmentAnswer() {
          return ((bitField2_ & 0x00000010) == 0x00000010);
        }
        /**
         * <code>optional .almaz2.rpc.commands.EquipmentAnswerBase equipment_answer = 100;</code>
         *
         * <pre>
         * Ответы на команды для оборудования объекта.
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentAnswerBase getEquipmentAnswer() {
          if (equipmentAnswerBuilder_ == null) {
            return equipmentAnswer_;
          } else {
            return equipmentAnswerBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.EquipmentAnswerBase equipment_answer = 100;</code>
         *
         * <pre>
         * Ответы на команды для оборудования объекта.
         * </pre>
         */
        public Builder setEquipmentAnswer(ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentAnswerBase value) {
          if (equipmentAnswerBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            equipmentAnswer_ = value;
            onChanged();
          } else {
            equipmentAnswerBuilder_.setMessage(value);
          }
          bitField2_ |= 0x00000010;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.EquipmentAnswerBase equipment_answer = 100;</code>
         *
         * <pre>
         * Ответы на команды для оборудования объекта.
         * </pre>
         */
        public Builder setEquipmentAnswer(
            ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentAnswerBase.Builder builderForValue) {
          if (equipmentAnswerBuilder_ == null) {
            equipmentAnswer_ = builderForValue.build();
            onChanged();
          } else {
            equipmentAnswerBuilder_.setMessage(builderForValue.build());
          }
          bitField2_ |= 0x00000010;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.EquipmentAnswerBase equipment_answer = 100;</code>
         *
         * <pre>
         * Ответы на команды для оборудования объекта.
         * </pre>
         */
        public Builder mergeEquipmentAnswer(ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentAnswerBase value) {
          if (equipmentAnswerBuilder_ == null) {
            if (((bitField2_ & 0x00000010) == 0x00000010) &&
                equipmentAnswer_ != ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentAnswerBase.getDefaultInstance()) {
              equipmentAnswer_ =
                ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentAnswerBase.newBuilder(equipmentAnswer_).mergeFrom(value).buildPartial();
            } else {
              equipmentAnswer_ = value;
            }
            onChanged();
          } else {
            equipmentAnswerBuilder_.mergeFrom(value);
          }
          bitField2_ |= 0x00000010;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.EquipmentAnswerBase equipment_answer = 100;</code>
         *
         * <pre>
         * Ответы на команды для оборудования объекта.
         * </pre>
         */
        public Builder clearEquipmentAnswer() {
          if (equipmentAnswerBuilder_ == null) {
            equipmentAnswer_ = ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentAnswerBase.getDefaultInstance();
            onChanged();
          } else {
            equipmentAnswerBuilder_.clear();
          }
          bitField2_ = (bitField2_ & ~0x00000010);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.EquipmentAnswerBase equipment_answer = 100;</code>
         *
         * <pre>
         * Ответы на команды для оборудования объекта.
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentAnswerBase.Builder getEquipmentAnswerBuilder() {
          bitField2_ |= 0x00000010;
          onChanged();
          return getEquipmentAnswerFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.EquipmentAnswerBase equipment_answer = 100;</code>
         *
         * <pre>
         * Ответы на команды для оборудования объекта.
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentAnswerBaseOrBuilder getEquipmentAnswerOrBuilder() {
          if (equipmentAnswerBuilder_ != null) {
            return equipmentAnswerBuilder_.getMessageOrBuilder();
          } else {
            return equipmentAnswer_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.EquipmentAnswerBase equipment_answer = 100;</code>
         *
         * <pre>
         * Ответы на команды для оборудования объекта.
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentAnswerBase, ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentAnswerBase.Builder, ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentAnswerBaseOrBuilder> 
            getEquipmentAnswerFieldBuilder() {
          if (equipmentAnswerBuilder_ == null) {
            equipmentAnswerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentAnswerBase, ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentAnswerBase.Builder, ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.EquipmentAnswerBaseOrBuilder>(
                    equipmentAnswer_,
                    getParentForChildren(),
                    isClean());
            equipmentAnswer_ = null;
          }
          return equipmentAnswerBuilder_;
        }

        // optional .almaz2.rpc.commands.DatabaseResultBase database_result = 200;
        private ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase databaseResult_ = ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase.Builder, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBaseOrBuilder> databaseResultBuilder_;
        /**
         * <code>optional .almaz2.rpc.commands.DatabaseResultBase database_result = 200;</code>
         *
         * <pre>
         * Ответы на команды для запросов из базы данных.
         * </pre>
         */
        public boolean hasDatabaseResult() {
          return ((bitField2_ & 0x00000020) == 0x00000020);
        }
        /**
         * <code>optional .almaz2.rpc.commands.DatabaseResultBase database_result = 200;</code>
         *
         * <pre>
         * Ответы на команды для запросов из базы данных.
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase getDatabaseResult() {
          if (databaseResultBuilder_ == null) {
            return databaseResult_;
          } else {
            return databaseResultBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.DatabaseResultBase database_result = 200;</code>
         *
         * <pre>
         * Ответы на команды для запросов из базы данных.
         * </pre>
         */
        public Builder setDatabaseResult(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase value) {
          if (databaseResultBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            databaseResult_ = value;
            onChanged();
          } else {
            databaseResultBuilder_.setMessage(value);
          }
          bitField2_ |= 0x00000020;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.DatabaseResultBase database_result = 200;</code>
         *
         * <pre>
         * Ответы на команды для запросов из базы данных.
         * </pre>
         */
        public Builder setDatabaseResult(
            ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase.Builder builderForValue) {
          if (databaseResultBuilder_ == null) {
            databaseResult_ = builderForValue.build();
            onChanged();
          } else {
            databaseResultBuilder_.setMessage(builderForValue.build());
          }
          bitField2_ |= 0x00000020;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.DatabaseResultBase database_result = 200;</code>
         *
         * <pre>
         * Ответы на команды для запросов из базы данных.
         * </pre>
         */
        public Builder mergeDatabaseResult(ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase value) {
          if (databaseResultBuilder_ == null) {
            if (((bitField2_ & 0x00000020) == 0x00000020) &&
                databaseResult_ != ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase.getDefaultInstance()) {
              databaseResult_ =
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase.newBuilder(databaseResult_).mergeFrom(value).buildPartial();
            } else {
              databaseResult_ = value;
            }
            onChanged();
          } else {
            databaseResultBuilder_.mergeFrom(value);
          }
          bitField2_ |= 0x00000020;
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.DatabaseResultBase database_result = 200;</code>
         *
         * <pre>
         * Ответы на команды для запросов из базы данных.
         * </pre>
         */
        public Builder clearDatabaseResult() {
          if (databaseResultBuilder_ == null) {
            databaseResult_ = ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase.getDefaultInstance();
            onChanged();
          } else {
            databaseResultBuilder_.clear();
          }
          bitField2_ = (bitField2_ & ~0x00000020);
          return this;
        }
        /**
         * <code>optional .almaz2.rpc.commands.DatabaseResultBase database_result = 200;</code>
         *
         * <pre>
         * Ответы на команды для запросов из базы данных.
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase.Builder getDatabaseResultBuilder() {
          bitField2_ |= 0x00000020;
          onChanged();
          return getDatabaseResultFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .almaz2.rpc.commands.DatabaseResultBase database_result = 200;</code>
         *
         * <pre>
         * Ответы на команды для запросов из базы данных.
         * </pre>
         */
        public ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBaseOrBuilder getDatabaseResultOrBuilder() {
          if (databaseResultBuilder_ != null) {
            return databaseResultBuilder_.getMessageOrBuilder();
          } else {
            return databaseResult_;
          }
        }
        /**
         * <code>optional .almaz2.rpc.commands.DatabaseResultBase database_result = 200;</code>
         *
         * <pre>
         * Ответы на команды для запросов из базы данных.
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase.Builder, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBaseOrBuilder> 
            getDatabaseResultFieldBuilder() {
          if (databaseResultBuilder_ == null) {
            databaseResultBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBase.Builder, ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.DatabaseResultBaseOrBuilder>(
                    databaseResult_,
                    getParentForChildren(),
                    isClean());
            databaseResult_ = null;
          }
          return databaseResultBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol.ReplyBase)
      }

      static {
        defaultInstance = new ReplyBase(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol.ReplyBase)
    }

    private int bitField0_;
    // optional .almaz2.rpc.commands.RpcProtocol.RequestBase request = 100;
    public static final int REQUEST_FIELD_NUMBER = 100;
    private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase request_;
    /**
     * <code>optional .almaz2.rpc.commands.RpcProtocol.RequestBase request = 100;</code>
     */
    public boolean hasRequest() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .almaz2.rpc.commands.RpcProtocol.RequestBase request = 100;</code>
     */
    public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase getRequest() {
      return request_;
    }
    /**
     * <code>optional .almaz2.rpc.commands.RpcProtocol.RequestBase request = 100;</code>
     */
    public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBaseOrBuilder getRequestOrBuilder() {
      return request_;
    }

    // optional .almaz2.rpc.commands.RpcProtocol.ReplyBase reply = 101;
    public static final int REPLY_FIELD_NUMBER = 101;
    private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase reply_;
    /**
     * <code>optional .almaz2.rpc.commands.RpcProtocol.ReplyBase reply = 101;</code>
     */
    public boolean hasReply() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .almaz2.rpc.commands.RpcProtocol.ReplyBase reply = 101;</code>
     */
    public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase getReply() {
      return reply_;
    }
    /**
     * <code>optional .almaz2.rpc.commands.RpcProtocol.ReplyBase reply = 101;</code>
     */
    public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBaseOrBuilder getReplyOrBuilder() {
      return reply_;
    }

    private void initFields() {
      request_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase.getDefaultInstance();
      reply_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (hasRequest()) {
        if (!getRequest().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasReply()) {
        if (!getReply().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(100, request_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(101, reply_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(100, request_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(101, reply_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code almaz2.rpc.commands.RpcProtocol}
     *
     * <pre>
     ** 
     * Описание структур протокола RPC.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocolOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.class, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.Builder.class);
      }

      // Construct using ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRequestFieldBuilder();
          getReplyFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (requestBuilder_ == null) {
          request_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase.getDefaultInstance();
        } else {
          requestBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (replyBuilder_ == null) {
          reply_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase.getDefaultInstance();
        } else {
          replyBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.internal_static_almaz2_rpc_commands_RpcProtocol_descriptor;
      }

      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol getDefaultInstanceForType() {
        return ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.getDefaultInstance();
      }

      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol build() {
        ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol buildPartial() {
        ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol result = new ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (requestBuilder_ == null) {
          result.request_ = request_;
        } else {
          result.request_ = requestBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (replyBuilder_ == null) {
          result.reply_ = reply_;
        } else {
          result.reply_ = replyBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol) {
          return mergeFrom((ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol other) {
        if (other == ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.getDefaultInstance()) return this;
        if (other.hasRequest()) {
          mergeRequest(other.getRequest());
        }
        if (other.hasReply()) {
          mergeReply(other.getReply());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (hasRequest()) {
          if (!getRequest().isInitialized()) {
            
            return false;
          }
        }
        if (hasReply()) {
          if (!getReply().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .almaz2.rpc.commands.RpcProtocol.RequestBase request = 100;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase request_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBaseOrBuilder> requestBuilder_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.RequestBase request = 100;</code>
       */
      public boolean hasRequest() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.RequestBase request = 100;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase getRequest() {
        if (requestBuilder_ == null) {
          return request_;
        } else {
          return requestBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.RequestBase request = 100;</code>
       */
      public Builder setRequest(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase value) {
        if (requestBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          request_ = value;
          onChanged();
        } else {
          requestBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.RequestBase request = 100;</code>
       */
      public Builder setRequest(
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase.Builder builderForValue) {
        if (requestBuilder_ == null) {
          request_ = builderForValue.build();
          onChanged();
        } else {
          requestBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.RequestBase request = 100;</code>
       */
      public Builder mergeRequest(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase value) {
        if (requestBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              request_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase.getDefaultInstance()) {
            request_ =
              ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase.newBuilder(request_).mergeFrom(value).buildPartial();
          } else {
            request_ = value;
          }
          onChanged();
        } else {
          requestBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.RequestBase request = 100;</code>
       */
      public Builder clearRequest() {
        if (requestBuilder_ == null) {
          request_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase.getDefaultInstance();
          onChanged();
        } else {
          requestBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.RequestBase request = 100;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase.Builder getRequestBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRequestFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.RequestBase request = 100;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBaseOrBuilder getRequestOrBuilder() {
        if (requestBuilder_ != null) {
          return requestBuilder_.getMessageOrBuilder();
        } else {
          return request_;
        }
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.RequestBase request = 100;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBaseOrBuilder> 
          getRequestFieldBuilder() {
        if (requestBuilder_ == null) {
          requestBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBase.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.RequestBaseOrBuilder>(
                  request_,
                  getParentForChildren(),
                  isClean());
          request_ = null;
        }
        return requestBuilder_;
      }

      // optional .almaz2.rpc.commands.RpcProtocol.ReplyBase reply = 101;
      private ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase reply_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBaseOrBuilder> replyBuilder_;
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.ReplyBase reply = 101;</code>
       */
      public boolean hasReply() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.ReplyBase reply = 101;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase getReply() {
        if (replyBuilder_ == null) {
          return reply_;
        } else {
          return replyBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.ReplyBase reply = 101;</code>
       */
      public Builder setReply(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase value) {
        if (replyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          reply_ = value;
          onChanged();
        } else {
          replyBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.ReplyBase reply = 101;</code>
       */
      public Builder setReply(
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase.Builder builderForValue) {
        if (replyBuilder_ == null) {
          reply_ = builderForValue.build();
          onChanged();
        } else {
          replyBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.ReplyBase reply = 101;</code>
       */
      public Builder mergeReply(ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase value) {
        if (replyBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              reply_ != ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase.getDefaultInstance()) {
            reply_ =
              ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase.newBuilder(reply_).mergeFrom(value).buildPartial();
          } else {
            reply_ = value;
          }
          onChanged();
        } else {
          replyBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.ReplyBase reply = 101;</code>
       */
      public Builder clearReply() {
        if (replyBuilder_ == null) {
          reply_ = ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase.getDefaultInstance();
          onChanged();
        } else {
          replyBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.ReplyBase reply = 101;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase.Builder getReplyBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getReplyFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.ReplyBase reply = 101;</code>
       */
      public ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBaseOrBuilder getReplyOrBuilder() {
        if (replyBuilder_ != null) {
          return replyBuilder_.getMessageOrBuilder();
        } else {
          return reply_;
        }
      }
      /**
       * <code>optional .almaz2.rpc.commands.RpcProtocol.ReplyBase reply = 101;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBaseOrBuilder> 
          getReplyFieldBuilder() {
        if (replyBuilder_ == null) {
          replyBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBase.Builder, ru.kodos.almaz2.rpc.commands.RpcMessageClass.RpcProtocol.ReplyBaseOrBuilder>(
                  reply_,
                  getParentForChildren(),
                  isClean());
          reply_ = null;
        }
        return replyBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:almaz2.rpc.commands.RpcProtocol)
    }

    static {
      defaultInstance = new RpcProtocol(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:almaz2.rpc.commands.RpcProtocol)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_Header_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_Header_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_PrimaryAuthRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_PrimaryAuthRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_PrimaryAuthReply_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_PrimaryAuthReply_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_AuthRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_AuthRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_AuthReply_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_AuthReply_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_UserLoginRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_UserLoginRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_SendConfigurationRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_SendConfigurationRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_UserLoginReply_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_UserLoginReply_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_UserLogoutRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_UserLogoutRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_UserLogoutReply_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_UserLogoutReply_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectPassport_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectPassport_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectPassport_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectPassport_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_DelControlObjectPassport_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_DelControlObjectPassport_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectStatus_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectStatus_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectStatus_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectStatus_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectState_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectState_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectAlarm_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectAlarm_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectAlarm_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectAlarm_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentPassport_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentPassport_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentPassport_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentPassport_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentPassport_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentPassport_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_AddInterfacePassport_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_AddInterfacePassport_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_UpdInterfacePassport_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_UpdInterfacePassport_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_DelInterfacePassport_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_DelInterfacePassport_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentStatus_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentStatus_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentStatus_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentStatus_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentState_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentState_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_UpdCommunicationDriverStatus_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_UpdCommunicationDriverStatus_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_AckRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_AckRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_AckAnswer_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_AckAnswer_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_AddZone_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_AddZone_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_UpdZone_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_UpdZone_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_DelZone_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_DelZone_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_AddClientPassport_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_AddClientPassport_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_UpdClientPassport_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_UpdClientPassport_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_DelClientPassport_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_DelClientPassport_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_AddUserPassport_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_AddUserPassport_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_UpdUserPassport_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_UpdUserPassport_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_DelUserPassport_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_DelUserPassport_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentFirmwarePassport_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentFirmwarePassport_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentFirmwarePassport_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentFirmwarePassport_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentFirmwarePassport_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentFirmwarePassport_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectPassportType_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectPassportType_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectPassportType_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectPassportType_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_DelControlObjectPassportType_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_DelControlObjectPassportType_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_AddControlElementPassportType_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_AddControlElementPassportType_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlElementPassportType_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlElementPassportType_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_DelControlElementPassportType_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_DelControlElementPassportType_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentPassportType_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentPassportType_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentPassportType_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentPassportType_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentPassportType_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentPassportType_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_AddManagedElementPassportType_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_AddManagedElementPassportType_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_UpdManagedElementPassportType_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_UpdManagedElementPassportType_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_DelManagedElementPassportType_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_DelManagedElementPassportType_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_AddSensorControlElementPassportType_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_AddSensorControlElementPassportType_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_UpdSensorControlElementPassportType_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_UpdSensorControlElementPassportType_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_DelSensorControlElementPassportType_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_DelSensorControlElementPassportType_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_AddInterfacePassportType_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_AddInterfacePassportType_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_UpdInterfacePassportType_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_UpdInterfacePassportType_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_DelInterfacePassportType_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_DelInterfacePassportType_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentLogicalInputPassportType_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentLogicalInputPassportType_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentLogicalInputPassportType_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentLogicalInputPassportType_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentLogicalInputPassportType_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentLogicalInputPassportType_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentLogicalOutputPassportType_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentLogicalOutputPassportType_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentLogicalOutputPassportType_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentLogicalOutputPassportType_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentLogicalOutputPassportType_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentLogicalOutputPassportType_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_AddGeneralPurposeReference_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_AddGeneralPurposeReference_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_UpdGeneralPurposeReference_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_UpdGeneralPurposeReference_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_DelGeneralPurposeReference_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_DelGeneralPurposeReference_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_AddGeneralPurposeReferenceRecord_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_AddGeneralPurposeReferenceRecord_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_UpdGeneralPurposeReferenceRecord_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_UpdGeneralPurposeReferenceRecord_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_DelGeneralPurposeReferenceRecord_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_DelGeneralPurposeReferenceRecord_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_RequestBase_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_RequestBase_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_almaz2_rpc_commands_RpcProtocol_ReplyBase_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_almaz2_rpc_commands_RpcProtocol_ReplyBase_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\trpc.proto\022\023almaz2.rpc.commands\032\016status" +
      "es.proto\032\nzone.proto\032\021field_types.proto\032" +
      "\020properties.proto\032\"control_object_passpo" +
      "rt_type.proto\032#control_element_passport_" +
      "type.proto\032\035equipment_passport_type.prot" +
      "o\032#managed_element_passport_type.proto\032\032" +
      "sensor_passport_type.proto\032\035interface_pa" +
      "ssport_type.proto\032+equipment_logical_inp" +
      "ut_passport_type.proto\032,equipment_logica" +
      "l_output_passport_type.proto\032\017reference.",
      "proto\032\035control_object_passport.proto\032\025cl" +
      "ient_passport.proto\032\023user_passport.proto" +
      "\032\030equipment_passport.proto\032\030interface_pa" +
      "ssport.proto\032!equipment_firmware_passpor" +
      "t.proto\032\025action_commands.proto\032\032control_" +
      "object_alarm.proto\032\035control_object_comma" +
      "nds.proto\032\027database_commands.proto\032\030equi" +
      "pment_commands.proto\032\032control_object_sta" +
      "te.proto\032\025periodic_signal.proto\"\250\215\001\n\013Rpc" +
      "Protocol\022=\n\007request\030d \001(\0132,.almaz2.rpc.c",
      "ommands.RpcProtocol.RequestBase\0229\n\005reply" +
      "\030e \001(\0132*.almaz2.rpc.commands.RpcProtocol" +
      ".ReplyBase\032\205\001\n\006Header\022\021\n\tclient_id\030\001 \001(\r" +
      "\022\022\n\npacket_num\030\002 \001(\r\022\014\n\004time\030\003 \001(\003\022/\n\010pr" +
      "iority\030\004 \001(\0162\035.almaz2.rpc.commands.Prior" +
      "ity\022\025\n\rconnection_id\030\005 \001(\r\032<\n\022PrimaryAut" +
      "hRequest\022\021\n\tclient_id\030\001 \001(\r\022\023\n\013primary_k" +
      "ey\030\002 \001(\t\032y\n\020PrimaryAuthReply\022\022\n\nerror_co" +
      "de\030\001 \001(\r\022\025\n\rerror_message\030\002 \001(\t\022\021\n\tclien" +
      "t_id\030\003 \001(\r\022\022\n\npublic_key\030\004 \001(\t\022\023\n\013privat",
      "e_key\030\005 \001(\t\032Z\n\013AuthRequest\022\021\n\tclient_id\030" +
      "\001 \001(\r\022\025\n\rconnection_id\030\002 \001(\r\022\017\n\007session\030" +
      "\003 \001(\t\022\020\n\010auth_key\030\004 \001(\t\032Y\n\tAuthReply\022\022\n\n" +
      "error_code\030\001 \001(\r\022\025\n\rerror_message\030\002 \001(\t\022" +
      "\017\n\007session\030\003 \001(\t\022\020\n\010auth_key\030\004 \001(\t\0323\n\020Us" +
      "erLoginRequest\022\r\n\005login\030\001 \001(\t\022\020\n\010passwor" +
      "d\030\002 \001(\t\032>\n\030SendConfigurationRequest\022\021\n\tc" +
      "lient_id\030\001 \001(\r\022\017\n\007user_id\030\002 \001(\r\032;\n\016UserL" +
      "oginReply\022\022\n\nerror_code\030\001 \001(\r\022\025\n\rerror_m" +
      "essage\030\002 \001(\t\032\"\n\021UserLogoutRequest\022\r\n\005log",
      "in\030\001 \001(\t\032<\n\017UserLogoutReply\022\022\n\nerror_cod" +
      "e\030\001 \001(\r\022\025\n\rerror_message\030\002 \001(\t\032Z\n\030AddCon" +
      "trolObjectPassport\022>\n\010passport\030\001 \001(\0132,.a" +
      "lmaz2.domain_objects.ControlObjectPasspo" +
      "rt\032Z\n\030UpdControlObjectPassport\022>\n\010passpo" +
      "rt\030\001 \001(\0132,.almaz2.domain_objects.Control" +
      "ObjectPassport\032/\n\030DelControlObjectPasspo" +
      "rt\022\023\n\013passport_id\030\001 \001(\r\032T\n\026AddControlObj" +
      "ectStatus\022:\n\006status\030\001 \001(\0132*.almaz2.domai" +
      "n_objects.ControlObjectStatus\032T\n\026UpdCont",
      "rolObjectStatus\022:\n\006status\030\001 \001(\0132*.almaz2" +
      ".domain_objects.ControlObjectStatus\032Q\n\025U" +
      "pdControlObjectState\0228\n\005state\030\001 \001(\0132).al" +
      "maz2.domain_objects.ControlObjectState\032Q" +
      "\n\025AddControlObjectAlarm\0228\n\005alarm\030\001 \001(\0132)" +
      ".almaz2.domain_objects.ControlObjectAlar" +
      "m\032Q\n\025UpdControlObjectAlarm\0228\n\005alarm\030\001 \001(" +
      "\0132).almaz2.domain_objects.ControlObjectA" +
      "larm\032R\n\024AddEquipmentPassport\022:\n\010passport" +
      "\030\001 \001(\0132(.almaz2.domain_objects.Equipment",
      "Passport\032R\n\024UpdEquipmentPassport\022:\n\010pass" +
      "port\030\001 \001(\0132(.almaz2.domain_objects.Equip" +
      "mentPassport\032+\n\024DelEquipmentPassport\022\023\n\013" +
      "passport_id\030\001 \001(\r\032R\n\024AddInterfacePasspor" +
      "t\022:\n\010passport\030\001 \001(\0132(.almaz2.domain_obje" +
      "cts.InterfacePassport\032R\n\024UpdInterfacePas" +
      "sport\022:\n\010passport\030\001 \001(\0132(.almaz2.domain_" +
      "objects.InterfacePassport\032+\n\024DelInterfac" +
      "ePassport\022\023\n\013passport_id\030\001 \001(\r\032Y\n\022AddEqu" +
      "ipmentStatus\022C\n\006status\030\001 \001(\01323.almaz2.do",
      "main_objects.ControlObjectEquipmentStatu" +
      "s\032Y\n\022UpdEquipmentStatus\022C\n\006status\030\001 \001(\0132" +
      "3.almaz2.domain_objects.ControlObjectEqu" +
      "ipmentStatus\032I\n\021UpdEquipmentState\0224\n\005sta" +
      "te\030\001 \001(\0132%.almaz2.domain_objects.Periodi" +
      "cSignal\032`\n\034UpdCommunicationDriverStatus\022" +
      "@\n\006status\030\001 \001(\01320.almaz2.domain_objects." +
      "CommunicationDriverStatus\032\034\n\nAckRequest\022" +
      "\016\n\006ack_id\030\001 \001(\r\032\033\n\tAckAnswer\022\016\n\006ack_id\030\001" +
      " \001(\r\0324\n\007AddZone\022)\n\004zone\030\001 \001(\0132\033.almaz2.d",
      "omain_objects.Zone\0324\n\007UpdZone\022)\n\004zone\030\001 " +
      "\001(\0132\033.almaz2.domain_objects.Zone\032\025\n\007DelZ" +
      "one\022\n\n\002id\030\001 \001(\r\032L\n\021AddClientPassport\0227\n\010" +
      "passport\030\001 \001(\0132%.almaz2.domain_objects.C" +
      "lientPassport\032L\n\021UpdClientPassport\0227\n\010pa" +
      "ssport\030\001 \001(\0132%.almaz2.domain_objects.Cli" +
      "entPassport\032(\n\021DelClientPassport\022\023\n\013pass" +
      "port_id\030\001 \001(\r\032H\n\017AddUserPassport\0225\n\010pass" +
      "port\030\001 \001(\0132#.almaz2.domain_objects.UserP" +
      "assport\032H\n\017UpdUserPassport\0225\n\010passport\030\001",
      " \001(\0132#.almaz2.domain_objects.UserPasspor" +
      "t\032&\n\017DelUserPassport\022\023\n\013passport_id\030\001 \001(" +
      "\r\032b\n\034AddEquipmentFirmwarePassport\022B\n\010pas" +
      "sport\030\001 \001(\01320.almaz2.domain_objects.Equi" +
      "pmentFirmwarePassport\032b\n\034UpdEquipmentFir" +
      "mwarePassport\022B\n\010passport\030\001 \001(\01320.almaz2" +
      ".domain_objects.EquipmentFirmwarePasspor" +
      "t\0323\n\034DelEquipmentFirmwarePassport\022\023\n\013pas" +
      "sport_id\030\001 \001(\r\032g\n\034AddControlObjectPasspo" +
      "rtType\022G\n\rpassport_type\030\001 \001(\01320.almaz2.d",
      "omain_objects.ControlObjectPassportType\032" +
      "g\n\034UpdControlObjectPassportType\022G\n\rpassp" +
      "ort_type\030\001 \001(\01320.almaz2.domain_objects.C" +
      "ontrolObjectPassportType\0328\n\034DelControlOb" +
      "jectPassportType\022\030\n\020passport_type_id\030\001 \001" +
      "(\t\032i\n\035AddControlElementPassportType\022H\n\rp" +
      "assport_type\030\001 \001(\01321.almaz2.domain_objec" +
      "ts.ControlElementPassportType\032i\n\035UpdCont" +
      "rolElementPassportType\022H\n\rpassport_type\030" +
      "\001 \001(\01321.almaz2.domain_objects.ControlEle",
      "mentPassportType\0329\n\035DelControlElementPas" +
      "sportType\022\030\n\020passport_type_id\030\001 \001(\t\032_\n\030A" +
      "ddEquipmentPassportType\022C\n\rpassport_type" +
      "\030\001 \001(\0132,.almaz2.domain_objects.Equipment" +
      "PassportType\032_\n\030UpdEquipmentPassportType" +
      "\022C\n\rpassport_type\030\001 \001(\0132,.almaz2.domain_" +
      "objects.EquipmentPassportType\0324\n\030DelEqui" +
      "pmentPassportType\022\030\n\020passport_type_id\030\001 " +
      "\001(\t\032i\n\035AddManagedElementPassportType\022H\n\r" +
      "passport_type\030\001 \001(\01321.almaz2.domain_obje",
      "cts.ManagedElementPassportType\032i\n\035UpdMan" +
      "agedElementPassportType\022H\n\rpassport_type" +
      "\030\001 \001(\01321.almaz2.domain_objects.ManagedEl" +
      "ementPassportType\0329\n\035DelManagedElementPa" +
      "ssportType\022\030\n\020passport_type_id\030\001 \001(\t\032g\n#" +
      "AddSensorControlElementPassportType\022@\n\rp" +
      "assport_type\030\001 \001(\0132).almaz2.domain_objec" +
      "ts.SensorPassportType\032g\n#UpdSensorContro" +
      "lElementPassportType\022@\n\rpassport_type\030\001 " +
      "\001(\0132).almaz2.domain_objects.SensorPasspo",
      "rtType\032?\n#DelSensorControlElementPasspor" +
      "tType\022\030\n\020passport_type_id\030\001 \001(\t\032_\n\030AddIn" +
      "terfacePassportType\022C\n\rpassport_type\030\001 \001" +
      "(\0132,.almaz2.domain_objects.InterfacePass" +
      "portType\032_\n\030UpdInterfacePassportType\022C\n\r" +
      "passport_type\030\001 \001(\0132,.almaz2.domain_obje" +
      "cts.InterfacePassportType\0324\n\030DelInterfac" +
      "ePassportType\022\030\n\020passport_type_id\030\001 \001(\t\032" +
      "w\n$AddEquipmentLogicalInputPassportType\022" +
      "O\n\rpassport_type\030\001 \001(\01328.almaz2.domain_o",
      "bjects.EquipmentLogicalInputPassportType" +
      "\032w\n$UpdEquipmentLogicalInputPassportType" +
      "\022O\n\rpassport_type\030\001 \001(\01328.almaz2.domain_" +
      "objects.EquipmentLogicalInputPassportTyp" +
      "e\032@\n$DelEquipmentLogicalInputPassportTyp" +
      "e\022\030\n\020passport_type_id\030\001 \001(\t\032y\n%AddEquipm" +
      "entLogicalOutputPassportType\022P\n\rpassport" +
      "_type\030\001 \001(\01329.almaz2.domain_objects.Equi" +
      "pmentLogicalOutputPassportType\032y\n%UpdEqu" +
      "ipmentLogicalOutputPassportType\022P\n\rpassp",
      "ort_type\030\001 \001(\01329.almaz2.domain_objects.E" +
      "quipmentLogicalOutputPassportType\032A\n%Del" +
      "EquipmentLogicalOutputPassportType\022\030\n\020pa" +
      "ssport_type_id\030\001 \001(\t\032h\n\032AddGeneralPurpos" +
      "eReference\022J\n\025reference_description\030\001 \001(" +
      "\0132+.almaz2.domain_objects.ReferenceDescr" +
      "iption\032h\n\032UpdGeneralPurposeReference\022J\n\025" +
      "reference_description\030\001 \001(\0132+.almaz2.dom" +
      "ain_objects.ReferenceDescription\032(\n\032DelG" +
      "eneralPurposeReference\022\n\n\002id\030\001 \001(\r\032\360\001\n A",
      "ddGeneralPurposeReferenceRecord\0228\n\tkey_v" +
      "alue\030\001 \001(\0132%.almaz2.domain_objects.Field" +
      "TypeValue\022?\n\013array_value\030\002 \001(\0132*.almaz2." +
      "domain_objects.FieldTypeValueArray\022\032\n\022re" +
      "ference_value_id\030\003 \001(\r\022\037\n\027reference_valu" +
      "e_link_id\030\004 \001(\r\022\024\n\014reference_id\030\005 \001(\t\032\360\001" +
      "\n UpdGeneralPurposeReferenceRecord\0228\n\tke" +
      "y_value\030\001 \001(\0132%.almaz2.domain_objects.Fi" +
      "eldTypeValue\022?\n\013array_value\030\002 \001(\0132*.alma" +
      "z2.domain_objects.FieldTypeValueArray\022\032\n",
      "\022reference_value_id\030\003 \001(\r\022\037\n\027reference_v" +
      "alue_link_id\030\004 \001(\r\022\024\n\014reference_id\030\005 \001(\t" +
      "\032T\n DelGeneralPurposeReferenceRecord\022\032\n\022" +
      "reference_value_id\030\001 \001(\r\022\024\n\014reference_id" +
      "\030\002 \001(\t\032\276*\n\013RequestBase\0227\n\006header\030\001 \001(\0132\'" +
      ".almaz2.rpc.commands.RpcProtocol.Header\022" +
      ":\n\004auth\030\002 \001(\0132,.almaz2.rpc.commands.RpcP" +
      "rotocol.AuthRequest\022E\n\nuser_login\030\003 \001(\0132" +
      "1.almaz2.rpc.commands.RpcProtocol.UserLo" +
      "ginRequest\022G\n\013user_logout\030\004 \001(\01322.almaz2",
      ".rpc.commands.RpcProtocol.UserLogoutRequ" +
      "est\022^\n\033add_control_object_passport\030\005 \001(\013" +
      "29.almaz2.rpc.commands.RpcProtocol.AddCo" +
      "ntrolObjectPassport\022^\n\033upd_control_objec" +
      "t_passport\030\006 \001(\01329.almaz2.rpc.commands.R" +
      "pcProtocol.UpdControlObjectPassport\022^\n\033d" +
      "el_control_object_passport\030\007 \001(\01329.almaz" +
      "2.rpc.commands.RpcProtocol.DelControlObj" +
      "ectPassport\022U\n\026add_equipment_passport\030\010 " +
      "\001(\01325.almaz2.rpc.commands.RpcProtocol.Ad",
      "dEquipmentPassport\022U\n\026upd_equipment_pass" +
      "port\030\t \001(\01325.almaz2.rpc.commands.RpcProt" +
      "ocol.UpdEquipmentPassport\022U\n\026del_equipme" +
      "nt_passport\030\n \001(\01325.almaz2.rpc.commands." +
      "RpcProtocol.DelEquipmentPassport\022>\n\nack_" +
      "answer\030\013 \001(\0132*.almaz2.rpc.commands.RpcPr" +
      "otocol.AckAnswer\022:\n\010add_zone\030\014 \001(\0132(.alm" +
      "az2.rpc.commands.RpcProtocol.AddZone\022:\n\010" +
      "upd_zone\030\r \001(\0132(.almaz2.rpc.commands.Rpc" +
      "Protocol.UpdZone\022:\n\010del_zone\030\016 \001(\0132(.alm",
      "az2.rpc.commands.RpcProtocol.DelZone\022O\n\023" +
      "add_client_passport\030\017 \001(\01322.almaz2.rpc.c" +
      "ommands.RpcProtocol.AddClientPassport\022O\n" +
      "\023upd_client_passport\030\020 \001(\01322.almaz2.rpc." +
      "commands.RpcProtocol.UpdClientPassport\022O" +
      "\n\023del_client_passport\030\021 \001(\01322.almaz2.rpc" +
      ".commands.RpcProtocol.DelClientPassport\022" +
      "K\n\021add_user_passport\030\023 \001(\01320.almaz2.rpc." +
      "commands.RpcProtocol.AddUserPassport\022K\n\021" +
      "upd_user_passport\030\024 \001(\01320.almaz2.rpc.com",
      "mands.RpcProtocol.UpdUserPassport\022K\n\021del" +
      "_user_passport\030\025 \001(\01320.almaz2.rpc.comman" +
      "ds.RpcProtocol.DelUserPassport\022U\n\026add_in" +
      "terface_passport\030\026 \001(\01325.almaz2.rpc.comm" +
      "ands.RpcProtocol.AddInterfacePassport\022U\n" +
      "\026upd_interface_passport\030\027 \001(\01325.almaz2.r" +
      "pc.commands.RpcProtocol.UpdInterfacePass" +
      "port\022U\n\026del_interface_passport\030\030 \001(\01325.a" +
      "lmaz2.rpc.commands.RpcProtocol.DelInterf" +
      "acePassport\022g\n add_control_object_passpo",
      "rt_type\030\031 \001(\0132=.almaz2.rpc.commands.RpcP" +
      "rotocol.AddControlObjectPassportType\022g\n " +
      "upd_control_object_passport_type\030\032 \001(\0132=" +
      ".almaz2.rpc.commands.RpcProtocol.UpdCont" +
      "rolObjectPassportType\022g\n del_control_obj" +
      "ect_passport_type\030\033 \001(\0132=.almaz2.rpc.com" +
      "mands.RpcProtocol.DelControlObjectPasspo" +
      "rtType\022i\n!add_control_element_passport_t" +
      "ype\030\034 \001(\0132>.almaz2.rpc.commands.RpcProto" +
      "col.AddControlElementPassportType\022i\n!upd",
      "_control_element_passport_type\030\035 \001(\0132>.a" +
      "lmaz2.rpc.commands.RpcProtocol.UpdContro" +
      "lElementPassportType\022i\n!del_control_elem" +
      "ent_passport_type\030\036 \001(\0132>.almaz2.rpc.com" +
      "mands.RpcProtocol.DelControlElementPassp" +
      "ortType\022^\n\033add_equipment_passport_type\030\037" +
      " \001(\01329.almaz2.rpc.commands.RpcProtocol.A" +
      "ddEquipmentPassportType\022^\n\033upd_equipment" +
      "_passport_type\030  \001(\01329.almaz2.rpc.comman" +
      "ds.RpcProtocol.UpdEquipmentPassportType\022",
      "^\n\033del_equipment_passport_type\030! \001(\01329.a" +
      "lmaz2.rpc.commands.RpcProtocol.DelEquipm" +
      "entPassportType\022i\n!add_managed_element_p" +
      "assport_type\030\" \001(\0132>.almaz2.rpc.commands" +
      ".RpcProtocol.AddManagedElementPassportTy" +
      "pe\022i\n!upd_managed_element_passport_type\030" +
      "# \001(\0132>.almaz2.rpc.commands.RpcProtocol." +
      "UpdManagedElementPassportType\022i\n!del_man" +
      "aged_element_passport_type\030$ \001(\0132>.almaz" +
      "2.rpc.commands.RpcProtocol.DelManagedEle",
      "mentPassportType\022v\n(add_sensor_control_e" +
      "lement_passport_type\030% \001(\0132D.almaz2.rpc." +
      "commands.RpcProtocol.AddSensorControlEle" +
      "mentPassportType\022v\n(upd_sensor_control_e" +
      "lement_passport_type\030& \001(\0132D.almaz2.rpc." +
      "commands.RpcProtocol.UpdSensorControlEle" +
      "mentPassportType\022v\n(del_sensor_control_e" +
      "lement_passport_type\030\' \001(\0132D.almaz2.rpc." +
      "commands.RpcProtocol.DelSensorControlEle" +
      "mentPassportType\022b\n\035add_general_purpose_",
      "reference\030( \001(\0132;.almaz2.rpc.commands.Rp" +
      "cProtocol.AddGeneralPurposeReference\022b\n\035" +
      "del_general_purpose_reference\030* \001(\0132;.al" +
      "maz2.rpc.commands.RpcProtocol.DelGeneral" +
      "PurposeReference\022o\n$add_general_purpose_" +
      "reference_record\030+ \001(\0132A.almaz2.rpc.comm" +
      "ands.RpcProtocol.AddGeneralPurposeRefere" +
      "nceRecord\022o\n$upd_general_purpose_referen" +
      "ce_record\030, \001(\0132A.almaz2.rpc.commands.Rp" +
      "cProtocol.UpdGeneralPurposeReferenceReco",
      "rd\022o\n$del_general_purpose_reference_reco" +
      "rd\030- \001(\0132A.almaz2.rpc.commands.RpcProtoc" +
      "ol.DelGeneralPurposeReferenceRecord\022U\n\022s" +
      "end_configuration\030. \001(\01329.almaz2.rpc.com" +
      "mands.RpcProtocol.SendConfigurationReque" +
      "st\022x\n)add_equipment_logical_input_passpo" +
      "rt_type\030/ \001(\0132E.almaz2.rpc.commands.RpcP" +
      "rotocol.AddEquipmentLogicalInputPassport" +
      "Type\022x\n)upd_equipment_logical_input_pass" +
      "port_type\0300 \001(\0132E.almaz2.rpc.commands.Rp",
      "cProtocol.UpdEquipmentLogicalInputPasspo" +
      "rtType\022x\n)del_equipment_logical_input_pa" +
      "ssport_type\0301 \001(\0132E.almaz2.rpc.commands." +
      "RpcProtocol.DelEquipmentLogicalInputPass" +
      "portType\022z\n*add_equipment_logical_output" +
      "_passport_type\0302 \001(\0132F.almaz2.rpc.comman" +
      "ds.RpcProtocol.AddEquipmentLogicalOutput" +
      "PassportType\022z\n*upd_equipment_logical_ou" +
      "tput_passport_type\0303 \001(\0132F.almaz2.rpc.co" +
      "mmands.RpcProtocol.UpdEquipmentLogicalOu",
      "tputPassportType\022z\n*del_equipment_logica" +
      "l_output_passport_type\0304 \001(\0132F.almaz2.rp" +
      "c.commands.RpcProtocol.DelEquipmentLogic" +
      "alOutputPassportType\022f\n\037add_equipment_fi" +
      "rmware_passport\0305 \001(\0132=.almaz2.rpc.comma" +
      "nds.RpcProtocol.AddEquipmentFirmwarePass" +
      "port\022f\n\037upd_equipment_firmware_passport\030" +
      "6 \001(\0132=.almaz2.rpc.commands.RpcProtocol." +
      "UpdEquipmentFirmwarePassport\022f\n\037del_equi" +
      "pment_firmware_passport\0307 \001(\0132=.almaz2.r",
      "pc.commands.RpcProtocol.DelEquipmentFirm" +
      "warePassport\022I\n\014primary_auth\030c \001(\01323.alm" +
      "az2.rpc.commands.RpcProtocol.PrimaryAuth" +
      "Request\022D\n\021equipment_command\030d \001(\0132).alm" +
      "az2.rpc.commands.EquipmentCommandBase\022?\n" +
      "\016database_query\030\310\001 \001(\0132&.almaz2.rpc.comm" +
      "ands.DatabaseQueryBase\022N\n\026control_object" +
      "_command\030\254\002 \001(\0132-.almaz2.rpc.commands.Co" +
      "ntrolObjectCommandBase\022?\n\016action_command" +
      "\030\336\002 \001(\0132&.almaz2.rpc.commands.ActionComm",
      "andBase\032\2412\n\tReplyBase\0227\n\006header\030\001 \001(\0132\'." +
      "almaz2.rpc.commands.RpcProtocol.Header\022\022" +
      "\n\nerror_code\030\022 \001(\r\022\025\n\rerror_message\030\023 \001(" +
      "\t\0228\n\004auth\030\002 \001(\0132*.almaz2.rpc.commands.Rp" +
      "cProtocol.AuthReply\022C\n\nuser_login\030\003 \001(\0132" +
      "/.almaz2.rpc.commands.RpcProtocol.UserLo" +
      "ginReply\022D\n\013user_logout\030\004 \001(\0132/.almaz2.r" +
      "pc.commands.RpcProtocol.UserLoginReply\022^" +
      "\n\033add_control_object_passport\030\005 \001(\01329.al" +
      "maz2.rpc.commands.RpcProtocol.AddControl",
      "ObjectPassport\022^\n\033upd_control_object_pas" +
      "sport\030\007 \001(\01329.almaz2.rpc.commands.RpcPro" +
      "tocol.UpdControlObjectPassport\022^\n\033del_co" +
      "ntrol_object_passport\030\010 \001(\01329.almaz2.rpc" +
      ".commands.RpcProtocol.DelControlObjectPa" +
      "ssport\022Z\n\031add_control_object_status\030\t \001(" +
      "\01327.almaz2.rpc.commands.RpcProtocol.AddC" +
      "ontrolObjectStatus\022Z\n\031upd_control_object" +
      "_status\030\n \001(\01327.almaz2.rpc.commands.RpcP" +
      "rotocol.UpdControlObjectStatus\022X\n\030add_co",
      "ntrol_object_alarm\030\013 \001(\01326.almaz2.rpc.co" +
      "mmands.RpcProtocol.AddControlObjectAlarm" +
      "\022X\n\030upd_control_object_alarm\030\014 \001(\01326.alm" +
      "az2.rpc.commands.RpcProtocol.UpdControlO" +
      "bjectAlarm\022Q\n\024add_equipment_status\030\r \001(\013" +
      "23.almaz2.rpc.commands.RpcProtocol.AddEq" +
      "uipmentStatus\022Q\n\024upd_equipment_status\030\016 " +
      "\001(\01323.almaz2.rpc.commands.RpcProtocol.Up" +
      "dEquipmentStatus\022U\n\026add_equipment_passpo" +
      "rt\030\017 \001(\01325.almaz2.rpc.commands.RpcProtoc",
      "ol.AddEquipmentPassport\022U\n\026upd_equipment" +
      "_passport\030\020 \001(\01325.almaz2.rpc.commands.Rp" +
      "cProtocol.UpdEquipmentPassport\022U\n\026del_eq" +
      "uipment_passport\030\021 \001(\01325.almaz2.rpc.comm" +
      "ands.RpcProtocol.DelEquipmentPassport\022f\n" +
      "\037upd_communication_driver_status\030\024 \001(\0132=" +
      ".almaz2.rpc.commands.RpcProtocol.UpdComm" +
      "unicationDriverStatus\022@\n\013ack_request\030\025 \001" +
      "(\0132+.almaz2.rpc.commands.RpcProtocol.Ack" +
      "Request\022:\n\010add_zone\030\026 \001(\0132(.almaz2.rpc.c",
      "ommands.RpcProtocol.AddZone\022:\n\010upd_zone\030" +
      "\027 \001(\0132(.almaz2.rpc.commands.RpcProtocol." +
      "UpdZone\022:\n\010del_zone\030\030 \001(\0132(.almaz2.rpc.c" +
      "ommands.RpcProtocol.DelZone\022O\n\023add_clien" +
      "t_passport\030\031 \001(\01322.almaz2.rpc.commands.R" +
      "pcProtocol.AddClientPassport\022O\n\023upd_clie" +
      "nt_passport\030\032 \001(\01322.almaz2.rpc.commands." +
      "RpcProtocol.UpdClientPassport\022O\n\023del_cli" +
      "ent_passport\030\033 \001(\01322.almaz2.rpc.commands" +
      ".RpcProtocol.DelClientPassport\022G\n\014primar",
      "y_auth\030\034 \001(\01321.almaz2.rpc.commands.RpcPr" +
      "otocol.PrimaryAuthReply\022K\n\021add_user_pass" +
      "port\030\035 \001(\01320.almaz2.rpc.commands.RpcProt" +
      "ocol.AddUserPassport\022K\n\021upd_user_passpor" +
      "t\030\036 \001(\01320.almaz2.rpc.commands.RpcProtoco" +
      "l.UpdUserPassport\022K\n\021del_user_passport\030\037" +
      " \001(\01320.almaz2.rpc.commands.RpcProtocol.D" +
      "elUserPassport\022U\n\026add_interface_passport" +
      "\030  \001(\01325.almaz2.rpc.commands.RpcProtocol" +
      ".AddInterfacePassport\022U\n\026upd_interface_p",
      "assport\030! \001(\01325.almaz2.rpc.commands.RpcP" +
      "rotocol.UpdInterfacePassport\022U\n\026del_inte" +
      "rface_passport\030\" \001(\01325.almaz2.rpc.comman" +
      "ds.RpcProtocol.DelInterfacePassport\022g\n a" +
      "dd_control_object_passport_type\030# \001(\0132=." +
      "almaz2.rpc.commands.RpcProtocol.AddContr" +
      "olObjectPassportType\022g\n upd_control_obje" +
      "ct_passport_type\030$ \001(\0132=.almaz2.rpc.comm" +
      "ands.RpcProtocol.UpdControlObjectPasspor" +
      "tType\022g\n del_control_object_passport_typ",
      "e\030% \001(\0132=.almaz2.rpc.commands.RpcProtoco" +
      "l.DelControlObjectPassportType\022i\n!add_co" +
      "ntrol_element_passport_type\030& \001(\0132>.alma" +
      "z2.rpc.commands.RpcProtocol.AddControlEl" +
      "ementPassportType\022i\n!upd_control_element" +
      "_passport_type\030\' \001(\0132>.almaz2.rpc.comman" +
      "ds.RpcProtocol.UpdControlElementPassport" +
      "Type\022i\n!del_control_element_passport_typ" +
      "e\030( \001(\0132>.almaz2.rpc.commands.RpcProtoco" +
      "l.DelControlElementPassportType\022^\n\033add_e",
      "quipment_passport_type\030) \001(\01329.almaz2.rp" +
      "c.commands.RpcProtocol.AddEquipmentPassp" +
      "ortType\022^\n\033upd_equipment_passport_type\030*" +
      " \001(\01329.almaz2.rpc.commands.RpcProtocol.U" +
      "pdEquipmentPassportType\022^\n\033del_equipment" +
      "_passport_type\030+ \001(\01329.almaz2.rpc.comman" +
      "ds.RpcProtocol.DelEquipmentPassportType\022" +
      "i\n!add_managed_element_passport_type\030, \001" +
      "(\0132>.almaz2.rpc.commands.RpcProtocol.Add" +
      "ManagedElementPassportType\022i\n!upd_manage",
      "d_element_passport_type\030- \001(\0132>.almaz2.r" +
      "pc.commands.RpcProtocol.UpdManagedElemen" +
      "tPassportType\022i\n!del_managed_element_pas" +
      "sport_type\030. \001(\0132>.almaz2.rpc.commands.R" +
      "pcProtocol.DelManagedElementPassportType" +
      "\022v\n(add_sensor_control_element_passport_" +
      "type\030/ \001(\0132D.almaz2.rpc.commands.RpcProt" +
      "ocol.AddSensorControlElementPassportType" +
      "\022v\n(upd_sensor_control_element_passport_" +
      "type\0300 \001(\0132D.almaz2.rpc.commands.RpcProt",
      "ocol.UpdSensorControlElementPassportType" +
      "\022v\n(del_sensor_control_element_passport_" +
      "type\0301 \001(\0132D.almaz2.rpc.commands.RpcProt" +
      "ocol.DelSensorControlElementPassportType" +
      "\022b\n\035add_general_purpose_reference\0302 \001(\0132" +
      ";.almaz2.rpc.commands.RpcProtocol.AddGen" +
      "eralPurposeReference\022b\n\035upd_general_purp" +
      "ose_reference\0303 \001(\0132;.almaz2.rpc.command" +
      "s.RpcProtocol.UpdGeneralPurposeReference" +
      "\022b\n\035del_general_purpose_reference\0304 \001(\0132",
      ";.almaz2.rpc.commands.RpcProtocol.DelGen" +
      "eralPurposeReference\022o\n$add_general_purp" +
      "ose_reference_record\0305 \001(\0132A.almaz2.rpc." +
      "commands.RpcProtocol.AddGeneralPurposeRe" +
      "ferenceRecord\022o\n$upd_general_purpose_ref" +
      "erence_record\0306 \001(\0132A.almaz2.rpc.command" +
      "s.RpcProtocol.UpdGeneralPurposeReference" +
      "Record\022o\n$del_general_purpose_reference_" +
      "record\0307 \001(\0132A.almaz2.rpc.commands.RpcPr" +
      "otocol.DelGeneralPurposeReferenceRecord\022",
      "^\n\033add_interface_passport_type\0308 \001(\01329.a" +
      "lmaz2.rpc.commands.RpcProtocol.AddInterf" +
      "acePassportType\022^\n\033upd_interface_passpor" +
      "t_type\0309 \001(\01329.almaz2.rpc.commands.RpcPr" +
      "otocol.UpdInterfacePassportType\022^\n\033del_i" +
      "nterface_passport_type\030: \001(\01329.almaz2.rp" +
      "c.commands.RpcProtocol.DelInterfacePassp" +
      "ortType\022X\n\030upd_control_object_state\030; \001(" +
      "\01326.almaz2.rpc.commands.RpcProtocol.UpdC" +
      "ontrolObjectState\022O\n\023upd_equipment_state",
      "\030< \001(\01322.almaz2.rpc.commands.RpcProtocol" +
      ".UpdEquipmentState\022x\n)add_equipment_logi" +
      "cal_input_passport_type\030= \001(\0132E.almaz2.r" +
      "pc.commands.RpcProtocol.AddEquipmentLogi" +
      "calInputPassportType\022x\n)upd_equipment_lo" +
      "gical_input_passport_type\030> \001(\0132E.almaz2" +
      ".rpc.commands.RpcProtocol.UpdEquipmentLo" +
      "gicalInputPassportType\022x\n)del_equipment_" +
      "logical_input_passport_type\030? \001(\0132E.alma" +
      "z2.rpc.commands.RpcProtocol.DelEquipment",
      "LogicalInputPassportType\022z\n*add_equipmen" +
      "t_logical_output_passport_type\030@ \001(\0132F.a" +
      "lmaz2.rpc.commands.RpcProtocol.AddEquipm" +
      "entLogicalOutputPassportType\022z\n*upd_equi" +
      "pment_logical_output_passport_type\030A \001(\013" +
      "2F.almaz2.rpc.commands.RpcProtocol.UpdEq" +
      "uipmentLogicalOutputPassportType\022z\n*del_" +
      "equipment_logical_output_passport_type\030B" +
      " \001(\0132F.almaz2.rpc.commands.RpcProtocol.D" +
      "elEquipmentLogicalOutputPassportType\022f\n\037",
      "add_equipment_firmware_passport\030C \001(\0132=." +
      "almaz2.rpc.commands.RpcProtocol.AddEquip" +
      "mentFirmwarePassport\022f\n\037upd_equipment_fi" +
      "rmware_passport\030D \001(\0132=.almaz2.rpc.comma" +
      "nds.RpcProtocol.UpdEquipmentFirmwarePass" +
      "port\022f\n\037del_equipment_firmware_passport\030" +
      "E \001(\0132=.almaz2.rpc.commands.RpcProtocol." +
      "DelEquipmentFirmwarePassport\022B\n\020equipmen" +
      "t_answer\030d \001(\0132(.almaz2.rpc.commands.Equ" +
      "ipmentAnswerBase\022A\n\017database_result\030\310\001 \001",
      "(\0132\'.almaz2.rpc.commands.DatabaseResultB" +
      "ase*Z\n\010Priority\022\020\n\014LOW_PRIORITY\020c\022\023\n\017NOR" +
      "MAL_PRIORITY\020B\022\022\n\016HIGHT_PRIORITY\020!\022\023\n\017UR" +
      "GENT_PRIORITY\020\001B/\n\034ru.kodos.almaz2.rpc.c" +
      "ommandsB\017RpcMessageClass"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_almaz2_rpc_commands_RpcProtocol_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_almaz2_rpc_commands_RpcProtocol_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_descriptor,
              new java.lang.String[] { "Request", "Reply", });
          internal_static_almaz2_rpc_commands_RpcProtocol_Header_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(0);
          internal_static_almaz2_rpc_commands_RpcProtocol_Header_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_Header_descriptor,
              new java.lang.String[] { "ClientId", "PacketNum", "Time", "Priority", "ConnectionId", });
          internal_static_almaz2_rpc_commands_RpcProtocol_PrimaryAuthRequest_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(1);
          internal_static_almaz2_rpc_commands_RpcProtocol_PrimaryAuthRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_PrimaryAuthRequest_descriptor,
              new java.lang.String[] { "ClientId", "PrimaryKey", });
          internal_static_almaz2_rpc_commands_RpcProtocol_PrimaryAuthReply_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(2);
          internal_static_almaz2_rpc_commands_RpcProtocol_PrimaryAuthReply_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_PrimaryAuthReply_descriptor,
              new java.lang.String[] { "ErrorCode", "ErrorMessage", "ClientId", "PublicKey", "PrivateKey", });
          internal_static_almaz2_rpc_commands_RpcProtocol_AuthRequest_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(3);
          internal_static_almaz2_rpc_commands_RpcProtocol_AuthRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_AuthRequest_descriptor,
              new java.lang.String[] { "ClientId", "ConnectionId", "Session", "AuthKey", });
          internal_static_almaz2_rpc_commands_RpcProtocol_AuthReply_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(4);
          internal_static_almaz2_rpc_commands_RpcProtocol_AuthReply_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_AuthReply_descriptor,
              new java.lang.String[] { "ErrorCode", "ErrorMessage", "Session", "AuthKey", });
          internal_static_almaz2_rpc_commands_RpcProtocol_UserLoginRequest_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(5);
          internal_static_almaz2_rpc_commands_RpcProtocol_UserLoginRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_UserLoginRequest_descriptor,
              new java.lang.String[] { "Login", "Password", });
          internal_static_almaz2_rpc_commands_RpcProtocol_SendConfigurationRequest_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(6);
          internal_static_almaz2_rpc_commands_RpcProtocol_SendConfigurationRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_SendConfigurationRequest_descriptor,
              new java.lang.String[] { "ClientId", "UserId", });
          internal_static_almaz2_rpc_commands_RpcProtocol_UserLoginReply_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(7);
          internal_static_almaz2_rpc_commands_RpcProtocol_UserLoginReply_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_UserLoginReply_descriptor,
              new java.lang.String[] { "ErrorCode", "ErrorMessage", });
          internal_static_almaz2_rpc_commands_RpcProtocol_UserLogoutRequest_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(8);
          internal_static_almaz2_rpc_commands_RpcProtocol_UserLogoutRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_UserLogoutRequest_descriptor,
              new java.lang.String[] { "Login", });
          internal_static_almaz2_rpc_commands_RpcProtocol_UserLogoutReply_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(9);
          internal_static_almaz2_rpc_commands_RpcProtocol_UserLogoutReply_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_UserLogoutReply_descriptor,
              new java.lang.String[] { "ErrorCode", "ErrorMessage", });
          internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectPassport_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(10);
          internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectPassport_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectPassport_descriptor,
              new java.lang.String[] { "Passport", });
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectPassport_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(11);
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectPassport_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectPassport_descriptor,
              new java.lang.String[] { "Passport", });
          internal_static_almaz2_rpc_commands_RpcProtocol_DelControlObjectPassport_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(12);
          internal_static_almaz2_rpc_commands_RpcProtocol_DelControlObjectPassport_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_DelControlObjectPassport_descriptor,
              new java.lang.String[] { "PassportId", });
          internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectStatus_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(13);
          internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectStatus_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectStatus_descriptor,
              new java.lang.String[] { "Status", });
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectStatus_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(14);
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectStatus_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectStatus_descriptor,
              new java.lang.String[] { "Status", });
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectState_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(15);
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectState_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectState_descriptor,
              new java.lang.String[] { "State", });
          internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectAlarm_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(16);
          internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectAlarm_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectAlarm_descriptor,
              new java.lang.String[] { "Alarm", });
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectAlarm_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(17);
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectAlarm_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectAlarm_descriptor,
              new java.lang.String[] { "Alarm", });
          internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentPassport_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(18);
          internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentPassport_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentPassport_descriptor,
              new java.lang.String[] { "Passport", });
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentPassport_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(19);
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentPassport_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentPassport_descriptor,
              new java.lang.String[] { "Passport", });
          internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentPassport_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(20);
          internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentPassport_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentPassport_descriptor,
              new java.lang.String[] { "PassportId", });
          internal_static_almaz2_rpc_commands_RpcProtocol_AddInterfacePassport_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(21);
          internal_static_almaz2_rpc_commands_RpcProtocol_AddInterfacePassport_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_AddInterfacePassport_descriptor,
              new java.lang.String[] { "Passport", });
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdInterfacePassport_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(22);
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdInterfacePassport_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_UpdInterfacePassport_descriptor,
              new java.lang.String[] { "Passport", });
          internal_static_almaz2_rpc_commands_RpcProtocol_DelInterfacePassport_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(23);
          internal_static_almaz2_rpc_commands_RpcProtocol_DelInterfacePassport_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_DelInterfacePassport_descriptor,
              new java.lang.String[] { "PassportId", });
          internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentStatus_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(24);
          internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentStatus_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentStatus_descriptor,
              new java.lang.String[] { "Status", });
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentStatus_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(25);
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentStatus_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentStatus_descriptor,
              new java.lang.String[] { "Status", });
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentState_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(26);
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentState_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentState_descriptor,
              new java.lang.String[] { "State", });
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdCommunicationDriverStatus_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(27);
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdCommunicationDriverStatus_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_UpdCommunicationDriverStatus_descriptor,
              new java.lang.String[] { "Status", });
          internal_static_almaz2_rpc_commands_RpcProtocol_AckRequest_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(28);
          internal_static_almaz2_rpc_commands_RpcProtocol_AckRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_AckRequest_descriptor,
              new java.lang.String[] { "AckId", });
          internal_static_almaz2_rpc_commands_RpcProtocol_AckAnswer_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(29);
          internal_static_almaz2_rpc_commands_RpcProtocol_AckAnswer_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_AckAnswer_descriptor,
              new java.lang.String[] { "AckId", });
          internal_static_almaz2_rpc_commands_RpcProtocol_AddZone_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(30);
          internal_static_almaz2_rpc_commands_RpcProtocol_AddZone_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_AddZone_descriptor,
              new java.lang.String[] { "Zone", });
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdZone_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(31);
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdZone_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_UpdZone_descriptor,
              new java.lang.String[] { "Zone", });
          internal_static_almaz2_rpc_commands_RpcProtocol_DelZone_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(32);
          internal_static_almaz2_rpc_commands_RpcProtocol_DelZone_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_DelZone_descriptor,
              new java.lang.String[] { "Id", });
          internal_static_almaz2_rpc_commands_RpcProtocol_AddClientPassport_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(33);
          internal_static_almaz2_rpc_commands_RpcProtocol_AddClientPassport_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_AddClientPassport_descriptor,
              new java.lang.String[] { "Passport", });
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdClientPassport_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(34);
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdClientPassport_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_UpdClientPassport_descriptor,
              new java.lang.String[] { "Passport", });
          internal_static_almaz2_rpc_commands_RpcProtocol_DelClientPassport_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(35);
          internal_static_almaz2_rpc_commands_RpcProtocol_DelClientPassport_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_DelClientPassport_descriptor,
              new java.lang.String[] { "PassportId", });
          internal_static_almaz2_rpc_commands_RpcProtocol_AddUserPassport_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(36);
          internal_static_almaz2_rpc_commands_RpcProtocol_AddUserPassport_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_AddUserPassport_descriptor,
              new java.lang.String[] { "Passport", });
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdUserPassport_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(37);
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdUserPassport_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_UpdUserPassport_descriptor,
              new java.lang.String[] { "Passport", });
          internal_static_almaz2_rpc_commands_RpcProtocol_DelUserPassport_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(38);
          internal_static_almaz2_rpc_commands_RpcProtocol_DelUserPassport_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_DelUserPassport_descriptor,
              new java.lang.String[] { "PassportId", });
          internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentFirmwarePassport_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(39);
          internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentFirmwarePassport_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentFirmwarePassport_descriptor,
              new java.lang.String[] { "Passport", });
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentFirmwarePassport_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(40);
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentFirmwarePassport_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentFirmwarePassport_descriptor,
              new java.lang.String[] { "Passport", });
          internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentFirmwarePassport_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(41);
          internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentFirmwarePassport_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentFirmwarePassport_descriptor,
              new java.lang.String[] { "PassportId", });
          internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectPassportType_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(42);
          internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectPassportType_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_AddControlObjectPassportType_descriptor,
              new java.lang.String[] { "PassportType", });
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectPassportType_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(43);
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectPassportType_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlObjectPassportType_descriptor,
              new java.lang.String[] { "PassportType", });
          internal_static_almaz2_rpc_commands_RpcProtocol_DelControlObjectPassportType_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(44);
          internal_static_almaz2_rpc_commands_RpcProtocol_DelControlObjectPassportType_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_DelControlObjectPassportType_descriptor,
              new java.lang.String[] { "PassportTypeId", });
          internal_static_almaz2_rpc_commands_RpcProtocol_AddControlElementPassportType_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(45);
          internal_static_almaz2_rpc_commands_RpcProtocol_AddControlElementPassportType_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_AddControlElementPassportType_descriptor,
              new java.lang.String[] { "PassportType", });
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlElementPassportType_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(46);
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlElementPassportType_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_UpdControlElementPassportType_descriptor,
              new java.lang.String[] { "PassportType", });
          internal_static_almaz2_rpc_commands_RpcProtocol_DelControlElementPassportType_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(47);
          internal_static_almaz2_rpc_commands_RpcProtocol_DelControlElementPassportType_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_DelControlElementPassportType_descriptor,
              new java.lang.String[] { "PassportTypeId", });
          internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentPassportType_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(48);
          internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentPassportType_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentPassportType_descriptor,
              new java.lang.String[] { "PassportType", });
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentPassportType_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(49);
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentPassportType_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentPassportType_descriptor,
              new java.lang.String[] { "PassportType", });
          internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentPassportType_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(50);
          internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentPassportType_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentPassportType_descriptor,
              new java.lang.String[] { "PassportTypeId", });
          internal_static_almaz2_rpc_commands_RpcProtocol_AddManagedElementPassportType_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(51);
          internal_static_almaz2_rpc_commands_RpcProtocol_AddManagedElementPassportType_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_AddManagedElementPassportType_descriptor,
              new java.lang.String[] { "PassportType", });
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdManagedElementPassportType_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(52);
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdManagedElementPassportType_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_UpdManagedElementPassportType_descriptor,
              new java.lang.String[] { "PassportType", });
          internal_static_almaz2_rpc_commands_RpcProtocol_DelManagedElementPassportType_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(53);
          internal_static_almaz2_rpc_commands_RpcProtocol_DelManagedElementPassportType_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_DelManagedElementPassportType_descriptor,
              new java.lang.String[] { "PassportTypeId", });
          internal_static_almaz2_rpc_commands_RpcProtocol_AddSensorControlElementPassportType_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(54);
          internal_static_almaz2_rpc_commands_RpcProtocol_AddSensorControlElementPassportType_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_AddSensorControlElementPassportType_descriptor,
              new java.lang.String[] { "PassportType", });
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdSensorControlElementPassportType_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(55);
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdSensorControlElementPassportType_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_UpdSensorControlElementPassportType_descriptor,
              new java.lang.String[] { "PassportType", });
          internal_static_almaz2_rpc_commands_RpcProtocol_DelSensorControlElementPassportType_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(56);
          internal_static_almaz2_rpc_commands_RpcProtocol_DelSensorControlElementPassportType_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_DelSensorControlElementPassportType_descriptor,
              new java.lang.String[] { "PassportTypeId", });
          internal_static_almaz2_rpc_commands_RpcProtocol_AddInterfacePassportType_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(57);
          internal_static_almaz2_rpc_commands_RpcProtocol_AddInterfacePassportType_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_AddInterfacePassportType_descriptor,
              new java.lang.String[] { "PassportType", });
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdInterfacePassportType_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(58);
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdInterfacePassportType_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_UpdInterfacePassportType_descriptor,
              new java.lang.String[] { "PassportType", });
          internal_static_almaz2_rpc_commands_RpcProtocol_DelInterfacePassportType_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(59);
          internal_static_almaz2_rpc_commands_RpcProtocol_DelInterfacePassportType_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_DelInterfacePassportType_descriptor,
              new java.lang.String[] { "PassportTypeId", });
          internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentLogicalInputPassportType_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(60);
          internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentLogicalInputPassportType_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentLogicalInputPassportType_descriptor,
              new java.lang.String[] { "PassportType", });
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentLogicalInputPassportType_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(61);
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentLogicalInputPassportType_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentLogicalInputPassportType_descriptor,
              new java.lang.String[] { "PassportType", });
          internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentLogicalInputPassportType_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(62);
          internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentLogicalInputPassportType_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentLogicalInputPassportType_descriptor,
              new java.lang.String[] { "PassportTypeId", });
          internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentLogicalOutputPassportType_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(63);
          internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentLogicalOutputPassportType_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_AddEquipmentLogicalOutputPassportType_descriptor,
              new java.lang.String[] { "PassportType", });
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentLogicalOutputPassportType_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(64);
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentLogicalOutputPassportType_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_UpdEquipmentLogicalOutputPassportType_descriptor,
              new java.lang.String[] { "PassportType", });
          internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentLogicalOutputPassportType_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(65);
          internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentLogicalOutputPassportType_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_DelEquipmentLogicalOutputPassportType_descriptor,
              new java.lang.String[] { "PassportTypeId", });
          internal_static_almaz2_rpc_commands_RpcProtocol_AddGeneralPurposeReference_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(66);
          internal_static_almaz2_rpc_commands_RpcProtocol_AddGeneralPurposeReference_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_AddGeneralPurposeReference_descriptor,
              new java.lang.String[] { "ReferenceDescription", });
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdGeneralPurposeReference_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(67);
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdGeneralPurposeReference_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_UpdGeneralPurposeReference_descriptor,
              new java.lang.String[] { "ReferenceDescription", });
          internal_static_almaz2_rpc_commands_RpcProtocol_DelGeneralPurposeReference_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(68);
          internal_static_almaz2_rpc_commands_RpcProtocol_DelGeneralPurposeReference_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_DelGeneralPurposeReference_descriptor,
              new java.lang.String[] { "Id", });
          internal_static_almaz2_rpc_commands_RpcProtocol_AddGeneralPurposeReferenceRecord_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(69);
          internal_static_almaz2_rpc_commands_RpcProtocol_AddGeneralPurposeReferenceRecord_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_AddGeneralPurposeReferenceRecord_descriptor,
              new java.lang.String[] { "KeyValue", "ArrayValue", "ReferenceValueId", "ReferenceValueLinkId", "ReferenceId", });
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdGeneralPurposeReferenceRecord_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(70);
          internal_static_almaz2_rpc_commands_RpcProtocol_UpdGeneralPurposeReferenceRecord_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_UpdGeneralPurposeReferenceRecord_descriptor,
              new java.lang.String[] { "KeyValue", "ArrayValue", "ReferenceValueId", "ReferenceValueLinkId", "ReferenceId", });
          internal_static_almaz2_rpc_commands_RpcProtocol_DelGeneralPurposeReferenceRecord_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(71);
          internal_static_almaz2_rpc_commands_RpcProtocol_DelGeneralPurposeReferenceRecord_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_DelGeneralPurposeReferenceRecord_descriptor,
              new java.lang.String[] { "ReferenceValueId", "ReferenceId", });
          internal_static_almaz2_rpc_commands_RpcProtocol_RequestBase_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(72);
          internal_static_almaz2_rpc_commands_RpcProtocol_RequestBase_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_RequestBase_descriptor,
              new java.lang.String[] { "Header", "Auth", "UserLogin", "UserLogout", "AddControlObjectPassport", "UpdControlObjectPassport", "DelControlObjectPassport", "AddEquipmentPassport", "UpdEquipmentPassport", "DelEquipmentPassport", "AckAnswer", "AddZone", "UpdZone", "DelZone", "AddClientPassport", "UpdClientPassport", "DelClientPassport", "AddUserPassport", "UpdUserPassport", "DelUserPassport", "AddInterfacePassport", "UpdInterfacePassport", "DelInterfacePassport", "AddControlObjectPassportType", "UpdControlObjectPassportType", "DelControlObjectPassportType", "AddControlElementPassportType", "UpdControlElementPassportType", "DelControlElementPassportType", "AddEquipmentPassportType", "UpdEquipmentPassportType", "DelEquipmentPassportType", "AddManagedElementPassportType", "UpdManagedElementPassportType", "DelManagedElementPassportType", "AddSensorControlElementPassportType", "UpdSensorControlElementPassportType", "DelSensorControlElementPassportType", "AddGeneralPurposeReference", "DelGeneralPurposeReference", "AddGeneralPurposeReferenceRecord", "UpdGeneralPurposeReferenceRecord", "DelGeneralPurposeReferenceRecord", "SendConfiguration", "AddEquipmentLogicalInputPassportType", "UpdEquipmentLogicalInputPassportType", "DelEquipmentLogicalInputPassportType", "AddEquipmentLogicalOutputPassportType", "UpdEquipmentLogicalOutputPassportType", "DelEquipmentLogicalOutputPassportType", "AddEquipmentFirmwarePassport", "UpdEquipmentFirmwarePassport", "DelEquipmentFirmwarePassport", "PrimaryAuth", "EquipmentCommand", "DatabaseQuery", "ControlObjectCommand", "ActionCommand", });
          internal_static_almaz2_rpc_commands_RpcProtocol_ReplyBase_descriptor =
            internal_static_almaz2_rpc_commands_RpcProtocol_descriptor.getNestedTypes().get(73);
          internal_static_almaz2_rpc_commands_RpcProtocol_ReplyBase_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_almaz2_rpc_commands_RpcProtocol_ReplyBase_descriptor,
              new java.lang.String[] { "Header", "ErrorCode", "ErrorMessage", "Auth", "UserLogin", "UserLogout", "AddControlObjectPassport", "UpdControlObjectPassport", "DelControlObjectPassport", "AddControlObjectStatus", "UpdControlObjectStatus", "AddControlObjectAlarm", "UpdControlObjectAlarm", "AddEquipmentStatus", "UpdEquipmentStatus", "AddEquipmentPassport", "UpdEquipmentPassport", "DelEquipmentPassport", "UpdCommunicationDriverStatus", "AckRequest", "AddZone", "UpdZone", "DelZone", "AddClientPassport", "UpdClientPassport", "DelClientPassport", "PrimaryAuth", "AddUserPassport", "UpdUserPassport", "DelUserPassport", "AddInterfacePassport", "UpdInterfacePassport", "DelInterfacePassport", "AddControlObjectPassportType", "UpdControlObjectPassportType", "DelControlObjectPassportType", "AddControlElementPassportType", "UpdControlElementPassportType", "DelControlElementPassportType", "AddEquipmentPassportType", "UpdEquipmentPassportType", "DelEquipmentPassportType", "AddManagedElementPassportType", "UpdManagedElementPassportType", "DelManagedElementPassportType", "AddSensorControlElementPassportType", "UpdSensorControlElementPassportType", "DelSensorControlElementPassportType", "AddGeneralPurposeReference", "UpdGeneralPurposeReference", "DelGeneralPurposeReference", "AddGeneralPurposeReferenceRecord", "UpdGeneralPurposeReferenceRecord", "DelGeneralPurposeReferenceRecord", "AddInterfacePassportType", "UpdInterfacePassportType", "DelInterfacePassportType", "UpdControlObjectState", "UpdEquipmentState", "AddEquipmentLogicalInputPassportType", "UpdEquipmentLogicalInputPassportType", "DelEquipmentLogicalInputPassportType", "AddEquipmentLogicalOutputPassportType", "UpdEquipmentLogicalOutputPassportType", "DelEquipmentLogicalOutputPassportType", "AddEquipmentFirmwarePassport", "UpdEquipmentFirmwarePassport", "DelEquipmentFirmwarePassport", "EquipmentAnswer", "DatabaseResult", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          ru.kodos.almaz2.domain_objects.StatusesClass.getDescriptor(),
          ru.kodos.almaz2.domain_objects.ZoneClass.getDescriptor(),
          ru.kodos.almaz2.domain_objects.FieldTypesClass.getDescriptor(),
          ru.kodos.almaz2.domain_objects.PropertiesClass.getDescriptor(),
          ru.kodos.almaz2.domain_objects.ControlObjectPassportTypeClass.getDescriptor(),
          ru.kodos.almaz2.domain_objects.ControlElementPassportTypeClass.getDescriptor(),
          ru.kodos.almaz2.domain_objects.EquipmentPassportTypeClass.getDescriptor(),
          ru.kodos.almaz2.domain_objects.ManagedElementPassportTypeClass.getDescriptor(),
          ru.kodos.almaz2.domain_objects.SensorPassportTypeClass.getDescriptor(),
          ru.kodos.almaz2.domain_objects.InterfacePassportTypeClass.getDescriptor(),
          ru.kodos.almaz2.domain_objects.EquipmentLogicalInputPassportTypeClass.getDescriptor(),
          ru.kodos.almaz2.domain_objects.EquipmentLogicalOutputPassportTypeClass.getDescriptor(),
          ru.kodos.almaz2.domain_objects.ReferenceDescriptionClass.getDescriptor(),
          ru.kodos.almaz2.domain_objects.ControlObjectPassportClass.getDescriptor(),
          ru.kodos.almaz2.domain_objects.ClientPassportClass.getDescriptor(),
          ru.kodos.almaz2.domain_objects.UserPassportClass.getDescriptor(),
          ru.kodos.almaz2.domain_objects.EquipmentPassportClass.getDescriptor(),
          ru.kodos.almaz2.domain_objects.InterfacePassportClass.getDescriptor(),
          ru.kodos.almaz2.domain_objects.EquipmentFirmwareClass.getDescriptor(),
          ru.kodos.almaz2.rpc.commands.ActionCommandsClass.getDescriptor(),
          ru.kodos.almaz2.domain_objects.ControlObjectAlarmClass.getDescriptor(),
          ru.kodos.almaz2.rpc.commands.ControlObjectCommandsClass.getDescriptor(),
          ru.kodos.almaz2.rpc.commands.DatabaseCommandsClass.getDescriptor(),
          ru.kodos.almaz2.rpc.commands.EquipmentCommandsClass.getDescriptor(),
          ru.kodos.almaz2.domain_objects.ControlObjectStateClass.getDescriptor(),
          ru.kodos.almaz2.domain_objects.PeriodicSignalClass.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
